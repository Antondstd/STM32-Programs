
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08007868  08007868  00017868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bf0  08007bf0  00020cd0  2**0
                  CONTENTS
  4 .ARM          00000008  08007bf0  08007bf0  00017bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bf8  08007bf8  00020cd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bf8  08007bf8  00017bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bfc  08007bfc  00017bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000cd0  20000000  08007c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020cd0  2**0
                  CONTENTS
 10 .bss          00000360  20000cd0  20000cd0  00020cd0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001030  20001030  00020cd0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020cd0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017e40  00000000  00000000  00020d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003136  00000000  00000000  00038b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001180  00000000  00000000  0003bc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001060  00000000  00000000  0003cdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023145  00000000  00000000  0003de58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016b32  00000000  00000000  00060f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce7ed  00000000  00000000  00077acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001462bc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004de8  00000000  00000000  00146310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000cd0 	.word	0x20000cd0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007850 	.word	0x08007850

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000cd4 	.word	0x20000cd4
 80001cc:	08007850 	.word	0x08007850

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__gedf2>:
 800084c:	f04f 3cff 	mov.w	ip, #4294967295
 8000850:	e006      	b.n	8000860 <__cmpdf2+0x4>
 8000852:	bf00      	nop

08000854 <__ledf2>:
 8000854:	f04f 0c01 	mov.w	ip, #1
 8000858:	e002      	b.n	8000860 <__cmpdf2+0x4>
 800085a:	bf00      	nop

0800085c <__cmpdf2>:
 800085c:	f04f 0c01 	mov.w	ip, #1
 8000860:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000864:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000868:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800086c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000870:	bf18      	it	ne
 8000872:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000876:	d01b      	beq.n	80008b0 <__cmpdf2+0x54>
 8000878:	b001      	add	sp, #4
 800087a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800087e:	bf0c      	ite	eq
 8000880:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000884:	ea91 0f03 	teqne	r1, r3
 8000888:	bf02      	ittt	eq
 800088a:	ea90 0f02 	teqeq	r0, r2
 800088e:	2000      	moveq	r0, #0
 8000890:	4770      	bxeq	lr
 8000892:	f110 0f00 	cmn.w	r0, #0
 8000896:	ea91 0f03 	teq	r1, r3
 800089a:	bf58      	it	pl
 800089c:	4299      	cmppl	r1, r3
 800089e:	bf08      	it	eq
 80008a0:	4290      	cmpeq	r0, r2
 80008a2:	bf2c      	ite	cs
 80008a4:	17d8      	asrcs	r0, r3, #31
 80008a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008aa:	f040 0001 	orr.w	r0, r0, #1
 80008ae:	4770      	bx	lr
 80008b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d102      	bne.n	80008c0 <__cmpdf2+0x64>
 80008ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008be:	d107      	bne.n	80008d0 <__cmpdf2+0x74>
 80008c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d1d6      	bne.n	8000878 <__cmpdf2+0x1c>
 80008ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008ce:	d0d3      	beq.n	8000878 <__cmpdf2+0x1c>
 80008d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdrcmple>:
 80008d8:	4684      	mov	ip, r0
 80008da:	4610      	mov	r0, r2
 80008dc:	4662      	mov	r2, ip
 80008de:	468c      	mov	ip, r1
 80008e0:	4619      	mov	r1, r3
 80008e2:	4663      	mov	r3, ip
 80008e4:	e000      	b.n	80008e8 <__aeabi_cdcmpeq>
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdcmpeq>:
 80008e8:	b501      	push	{r0, lr}
 80008ea:	f7ff ffb7 	bl	800085c <__cmpdf2>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	bf48      	it	mi
 80008f2:	f110 0f00 	cmnmi.w	r0, #0
 80008f6:	bd01      	pop	{r0, pc}

080008f8 <__aeabi_dcmpeq>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff fff4 	bl	80008e8 <__aeabi_cdcmpeq>
 8000900:	bf0c      	ite	eq
 8000902:	2001      	moveq	r0, #1
 8000904:	2000      	movne	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_dcmplt>:
 800090c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000910:	f7ff ffea 	bl	80008e8 <__aeabi_cdcmpeq>
 8000914:	bf34      	ite	cc
 8000916:	2001      	movcc	r0, #1
 8000918:	2000      	movcs	r0, #0
 800091a:	f85d fb08 	ldr.w	pc, [sp], #8
 800091e:	bf00      	nop

08000920 <__aeabi_dcmple>:
 8000920:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000924:	f7ff ffe0 	bl	80008e8 <__aeabi_cdcmpeq>
 8000928:	bf94      	ite	ls
 800092a:	2001      	movls	r0, #1
 800092c:	2000      	movhi	r0, #0
 800092e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000932:	bf00      	nop

08000934 <__aeabi_dcmpge>:
 8000934:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000938:	f7ff ffce 	bl	80008d8 <__aeabi_cdrcmple>
 800093c:	bf94      	ite	ls
 800093e:	2001      	movls	r0, #1
 8000940:	2000      	movhi	r0, #0
 8000942:	f85d fb08 	ldr.w	pc, [sp], #8
 8000946:	bf00      	nop

08000948 <__aeabi_dcmpgt>:
 8000948:	f84d ed08 	str.w	lr, [sp, #-8]!
 800094c:	f7ff ffc4 	bl	80008d8 <__aeabi_cdrcmple>
 8000950:	bf34      	ite	cc
 8000952:	2001      	movcc	r0, #1
 8000954:	2000      	movcs	r0, #0
 8000956:	f85d fb08 	ldr.w	pc, [sp], #8
 800095a:	bf00      	nop

0800095c <__aeabi_d2iz>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d215      	bcs.n	8000992 <__aeabi_d2iz+0x36>
 8000966:	d511      	bpl.n	800098c <__aeabi_d2iz+0x30>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d912      	bls.n	8000998 <__aeabi_d2iz+0x3c>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000982:	fa23 f002 	lsr.w	r0, r3, r2
 8000986:	bf18      	it	ne
 8000988:	4240      	negne	r0, r0
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d105      	bne.n	80009a4 <__aeabi_d2iz+0x48>
 8000998:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800099c:	bf08      	it	eq
 800099e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_uldivmod>:
 80009ac:	b953      	cbnz	r3, 80009c4 <__aeabi_uldivmod+0x18>
 80009ae:	b94a      	cbnz	r2, 80009c4 <__aeabi_uldivmod+0x18>
 80009b0:	2900      	cmp	r1, #0
 80009b2:	bf08      	it	eq
 80009b4:	2800      	cmpeq	r0, #0
 80009b6:	bf1c      	itt	ne
 80009b8:	f04f 31ff 	movne.w	r1, #4294967295
 80009bc:	f04f 30ff 	movne.w	r0, #4294967295
 80009c0:	f000 b96e 	b.w	8000ca0 <__aeabi_idiv0>
 80009c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009cc:	f000 f806 	bl	80009dc <__udivmoddi4>
 80009d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d8:	b004      	add	sp, #16
 80009da:	4770      	bx	lr

080009dc <__udivmoddi4>:
 80009dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e0:	9d08      	ldr	r5, [sp, #32]
 80009e2:	4604      	mov	r4, r0
 80009e4:	468c      	mov	ip, r1
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f040 8083 	bne.w	8000af2 <__udivmoddi4+0x116>
 80009ec:	428a      	cmp	r2, r1
 80009ee:	4617      	mov	r7, r2
 80009f0:	d947      	bls.n	8000a82 <__udivmoddi4+0xa6>
 80009f2:	fab2 f282 	clz	r2, r2
 80009f6:	b142      	cbz	r2, 8000a0a <__udivmoddi4+0x2e>
 80009f8:	f1c2 0020 	rsb	r0, r2, #32
 80009fc:	fa24 f000 	lsr.w	r0, r4, r0
 8000a00:	4091      	lsls	r1, r2
 8000a02:	4097      	lsls	r7, r2
 8000a04:	ea40 0c01 	orr.w	ip, r0, r1
 8000a08:	4094      	lsls	r4, r2
 8000a0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a0e:	0c23      	lsrs	r3, r4, #16
 8000a10:	fbbc f6f8 	udiv	r6, ip, r8
 8000a14:	fa1f fe87 	uxth.w	lr, r7
 8000a18:	fb08 c116 	mls	r1, r8, r6, ip
 8000a1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a20:	fb06 f10e 	mul.w	r1, r6, lr
 8000a24:	4299      	cmp	r1, r3
 8000a26:	d909      	bls.n	8000a3c <__udivmoddi4+0x60>
 8000a28:	18fb      	adds	r3, r7, r3
 8000a2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a2e:	f080 8119 	bcs.w	8000c64 <__udivmoddi4+0x288>
 8000a32:	4299      	cmp	r1, r3
 8000a34:	f240 8116 	bls.w	8000c64 <__udivmoddi4+0x288>
 8000a38:	3e02      	subs	r6, #2
 8000a3a:	443b      	add	r3, r7
 8000a3c:	1a5b      	subs	r3, r3, r1
 8000a3e:	b2a4      	uxth	r4, r4
 8000a40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a44:	fb08 3310 	mls	r3, r8, r0, r3
 8000a48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a50:	45a6      	cmp	lr, r4
 8000a52:	d909      	bls.n	8000a68 <__udivmoddi4+0x8c>
 8000a54:	193c      	adds	r4, r7, r4
 8000a56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a5a:	f080 8105 	bcs.w	8000c68 <__udivmoddi4+0x28c>
 8000a5e:	45a6      	cmp	lr, r4
 8000a60:	f240 8102 	bls.w	8000c68 <__udivmoddi4+0x28c>
 8000a64:	3802      	subs	r0, #2
 8000a66:	443c      	add	r4, r7
 8000a68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6c:	eba4 040e 	sub.w	r4, r4, lr
 8000a70:	2600      	movs	r6, #0
 8000a72:	b11d      	cbz	r5, 8000a7c <__udivmoddi4+0xa0>
 8000a74:	40d4      	lsrs	r4, r2
 8000a76:	2300      	movs	r3, #0
 8000a78:	e9c5 4300 	strd	r4, r3, [r5]
 8000a7c:	4631      	mov	r1, r6
 8000a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a82:	b902      	cbnz	r2, 8000a86 <__udivmoddi4+0xaa>
 8000a84:	deff      	udf	#255	; 0xff
 8000a86:	fab2 f282 	clz	r2, r2
 8000a8a:	2a00      	cmp	r2, #0
 8000a8c:	d150      	bne.n	8000b30 <__udivmoddi4+0x154>
 8000a8e:	1bcb      	subs	r3, r1, r7
 8000a90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a94:	fa1f f887 	uxth.w	r8, r7
 8000a98:	2601      	movs	r6, #1
 8000a9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a9e:	0c21      	lsrs	r1, r4, #16
 8000aa0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000aa4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aa8:	fb08 f30c 	mul.w	r3, r8, ip
 8000aac:	428b      	cmp	r3, r1
 8000aae:	d907      	bls.n	8000ac0 <__udivmoddi4+0xe4>
 8000ab0:	1879      	adds	r1, r7, r1
 8000ab2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ab6:	d202      	bcs.n	8000abe <__udivmoddi4+0xe2>
 8000ab8:	428b      	cmp	r3, r1
 8000aba:	f200 80e9 	bhi.w	8000c90 <__udivmoddi4+0x2b4>
 8000abe:	4684      	mov	ip, r0
 8000ac0:	1ac9      	subs	r1, r1, r3
 8000ac2:	b2a3      	uxth	r3, r4
 8000ac4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ac8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000acc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ad0:	fb08 f800 	mul.w	r8, r8, r0
 8000ad4:	45a0      	cmp	r8, r4
 8000ad6:	d907      	bls.n	8000ae8 <__udivmoddi4+0x10c>
 8000ad8:	193c      	adds	r4, r7, r4
 8000ada:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ade:	d202      	bcs.n	8000ae6 <__udivmoddi4+0x10a>
 8000ae0:	45a0      	cmp	r8, r4
 8000ae2:	f200 80d9 	bhi.w	8000c98 <__udivmoddi4+0x2bc>
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	eba4 0408 	sub.w	r4, r4, r8
 8000aec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000af0:	e7bf      	b.n	8000a72 <__udivmoddi4+0x96>
 8000af2:	428b      	cmp	r3, r1
 8000af4:	d909      	bls.n	8000b0a <__udivmoddi4+0x12e>
 8000af6:	2d00      	cmp	r5, #0
 8000af8:	f000 80b1 	beq.w	8000c5e <__udivmoddi4+0x282>
 8000afc:	2600      	movs	r6, #0
 8000afe:	e9c5 0100 	strd	r0, r1, [r5]
 8000b02:	4630      	mov	r0, r6
 8000b04:	4631      	mov	r1, r6
 8000b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0a:	fab3 f683 	clz	r6, r3
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d14a      	bne.n	8000ba8 <__udivmoddi4+0x1cc>
 8000b12:	428b      	cmp	r3, r1
 8000b14:	d302      	bcc.n	8000b1c <__udivmoddi4+0x140>
 8000b16:	4282      	cmp	r2, r0
 8000b18:	f200 80b8 	bhi.w	8000c8c <__udivmoddi4+0x2b0>
 8000b1c:	1a84      	subs	r4, r0, r2
 8000b1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000b22:	2001      	movs	r0, #1
 8000b24:	468c      	mov	ip, r1
 8000b26:	2d00      	cmp	r5, #0
 8000b28:	d0a8      	beq.n	8000a7c <__udivmoddi4+0xa0>
 8000b2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b2e:	e7a5      	b.n	8000a7c <__udivmoddi4+0xa0>
 8000b30:	f1c2 0320 	rsb	r3, r2, #32
 8000b34:	fa20 f603 	lsr.w	r6, r0, r3
 8000b38:	4097      	lsls	r7, r2
 8000b3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000b3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b42:	40d9      	lsrs	r1, r3
 8000b44:	4330      	orrs	r0, r6
 8000b46:	0c03      	lsrs	r3, r0, #16
 8000b48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b4c:	fa1f f887 	uxth.w	r8, r7
 8000b50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b58:	fb06 f108 	mul.w	r1, r6, r8
 8000b5c:	4299      	cmp	r1, r3
 8000b5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x19c>
 8000b64:	18fb      	adds	r3, r7, r3
 8000b66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b6a:	f080 808d 	bcs.w	8000c88 <__udivmoddi4+0x2ac>
 8000b6e:	4299      	cmp	r1, r3
 8000b70:	f240 808a 	bls.w	8000c88 <__udivmoddi4+0x2ac>
 8000b74:	3e02      	subs	r6, #2
 8000b76:	443b      	add	r3, r7
 8000b78:	1a5b      	subs	r3, r3, r1
 8000b7a:	b281      	uxth	r1, r0
 8000b7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b88:	fb00 f308 	mul.w	r3, r0, r8
 8000b8c:	428b      	cmp	r3, r1
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x1c4>
 8000b90:	1879      	adds	r1, r7, r1
 8000b92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b96:	d273      	bcs.n	8000c80 <__udivmoddi4+0x2a4>
 8000b98:	428b      	cmp	r3, r1
 8000b9a:	d971      	bls.n	8000c80 <__udivmoddi4+0x2a4>
 8000b9c:	3802      	subs	r0, #2
 8000b9e:	4439      	add	r1, r7
 8000ba0:	1acb      	subs	r3, r1, r3
 8000ba2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ba6:	e778      	b.n	8000a9a <__udivmoddi4+0xbe>
 8000ba8:	f1c6 0c20 	rsb	ip, r6, #32
 8000bac:	fa03 f406 	lsl.w	r4, r3, r6
 8000bb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bb4:	431c      	orrs	r4, r3
 8000bb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bba:	fa01 f306 	lsl.w	r3, r1, r6
 8000bbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bc6:	431f      	orrs	r7, r3
 8000bc8:	0c3b      	lsrs	r3, r7, #16
 8000bca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bce:	fa1f f884 	uxth.w	r8, r4
 8000bd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bda:	fb09 fa08 	mul.w	sl, r9, r8
 8000bde:	458a      	cmp	sl, r1
 8000be0:	fa02 f206 	lsl.w	r2, r2, r6
 8000be4:	fa00 f306 	lsl.w	r3, r0, r6
 8000be8:	d908      	bls.n	8000bfc <__udivmoddi4+0x220>
 8000bea:	1861      	adds	r1, r4, r1
 8000bec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bf0:	d248      	bcs.n	8000c84 <__udivmoddi4+0x2a8>
 8000bf2:	458a      	cmp	sl, r1
 8000bf4:	d946      	bls.n	8000c84 <__udivmoddi4+0x2a8>
 8000bf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000bfa:	4421      	add	r1, r4
 8000bfc:	eba1 010a 	sub.w	r1, r1, sl
 8000c00:	b2bf      	uxth	r7, r7
 8000c02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c0e:	fb00 f808 	mul.w	r8, r0, r8
 8000c12:	45b8      	cmp	r8, r7
 8000c14:	d907      	bls.n	8000c26 <__udivmoddi4+0x24a>
 8000c16:	19e7      	adds	r7, r4, r7
 8000c18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c1c:	d22e      	bcs.n	8000c7c <__udivmoddi4+0x2a0>
 8000c1e:	45b8      	cmp	r8, r7
 8000c20:	d92c      	bls.n	8000c7c <__udivmoddi4+0x2a0>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4427      	add	r7, r4
 8000c26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c2a:	eba7 0708 	sub.w	r7, r7, r8
 8000c2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c32:	454f      	cmp	r7, r9
 8000c34:	46c6      	mov	lr, r8
 8000c36:	4649      	mov	r1, r9
 8000c38:	d31a      	bcc.n	8000c70 <__udivmoddi4+0x294>
 8000c3a:	d017      	beq.n	8000c6c <__udivmoddi4+0x290>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x27a>
 8000c3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000c42:	eb67 0701 	sbc.w	r7, r7, r1
 8000c46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c4a:	40f2      	lsrs	r2, r6
 8000c4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000c50:	40f7      	lsrs	r7, r6
 8000c52:	e9c5 2700 	strd	r2, r7, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	462e      	mov	r6, r5
 8000c60:	4628      	mov	r0, r5
 8000c62:	e70b      	b.n	8000a7c <__udivmoddi4+0xa0>
 8000c64:	4606      	mov	r6, r0
 8000c66:	e6e9      	b.n	8000a3c <__udivmoddi4+0x60>
 8000c68:	4618      	mov	r0, r3
 8000c6a:	e6fd      	b.n	8000a68 <__udivmoddi4+0x8c>
 8000c6c:	4543      	cmp	r3, r8
 8000c6e:	d2e5      	bcs.n	8000c3c <__udivmoddi4+0x260>
 8000c70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c74:	eb69 0104 	sbc.w	r1, r9, r4
 8000c78:	3801      	subs	r0, #1
 8000c7a:	e7df      	b.n	8000c3c <__udivmoddi4+0x260>
 8000c7c:	4608      	mov	r0, r1
 8000c7e:	e7d2      	b.n	8000c26 <__udivmoddi4+0x24a>
 8000c80:	4660      	mov	r0, ip
 8000c82:	e78d      	b.n	8000ba0 <__udivmoddi4+0x1c4>
 8000c84:	4681      	mov	r9, r0
 8000c86:	e7b9      	b.n	8000bfc <__udivmoddi4+0x220>
 8000c88:	4666      	mov	r6, ip
 8000c8a:	e775      	b.n	8000b78 <__udivmoddi4+0x19c>
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	e74a      	b.n	8000b26 <__udivmoddi4+0x14a>
 8000c90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c94:	4439      	add	r1, r7
 8000c96:	e713      	b.n	8000ac0 <__udivmoddi4+0xe4>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	443c      	add	r4, r7
 8000c9c:	e724      	b.n	8000ae8 <__udivmoddi4+0x10c>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_idiv0>:
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b35      	ldr	r3, [pc, #212]	; (8000d94 <MX_GPIO_Init+0xf0>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a34      	ldr	r2, [pc, #208]	; (8000d94 <MX_GPIO_Init+0xf0>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b32      	ldr	r3, [pc, #200]	; (8000d94 <MX_GPIO_Init+0xf0>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <MX_GPIO_Init+0xf0>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a2d      	ldr	r2, [pc, #180]	; (8000d94 <MX_GPIO_Init+0xf0>)
 8000ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <MX_GPIO_Init+0xf0>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	4b27      	ldr	r3, [pc, #156]	; (8000d94 <MX_GPIO_Init+0xf0>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a26      	ldr	r2, [pc, #152]	; (8000d94 <MX_GPIO_Init+0xf0>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <MX_GPIO_Init+0xf0>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <MX_GPIO_Init+0xf0>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a1f      	ldr	r2, [pc, #124]	; (8000d94 <MX_GPIO_Init+0xf0>)
 8000d18:	f043 0308 	orr.w	r3, r3, #8
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <MX_GPIO_Init+0xf0>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0308 	and.w	r3, r3, #8
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <MX_GPIO_Init+0xf0>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a18      	ldr	r2, [pc, #96]	; (8000d94 <MX_GPIO_Init+0xf0>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <MX_GPIO_Init+0xf0>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000d4c:	4812      	ldr	r0, [pc, #72]	; (8000d98 <MX_GPIO_Init+0xf4>)
 8000d4e:	f001 feff 	bl	8002b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	480d      	ldr	r0, [pc, #52]	; (8000d9c <MX_GPIO_Init+0xf8>)
 8000d68:	f001 fd3e 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d6c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	4804      	ldr	r0, [pc, #16]	; (8000d98 <MX_GPIO_Init+0xf4>)
 8000d86:	f001 fd2f 	bl	80027e8 <HAL_GPIO_Init>

}
 8000d8a:	bf00      	nop
 8000d8c:	3728      	adds	r7, #40	; 0x28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40020c00 	.word	0x40020c00
 8000d9c:	40020800 	.word	0x40020800

08000da0 <getButtonState>:
        setOffYellowDiode();
        delay(500);
    }
}

int getButtonState() {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
 8000da4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <getButtonState+0x14>)
 8000daa:	f001 feb9 	bl	8002b20 <HAL_GPIO_ReadPin>
 8000dae:	4603      	mov	r3, r0
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40020800 	.word	0x40020800

08000db8 <getCurrentTime>:

long getCurrentTime(){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000dbc:	f001 fb56 	bl	800246c <HAL_GetTick>
 8000dc0:	4603      	mov	r3, r0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000dce:	4a13      	ldr	r2, [pc, #76]	; (8000e1c <MX_I2C1_Init+0x54>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000dd4:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <MX_I2C1_Init+0x58>)
 8000dd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000de6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dec:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000df8:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e04:	4804      	ldr	r0, [pc, #16]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000e06:	f001 febd 	bl	8002b84 <HAL_I2C_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e10:	f000 ffa0 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000dd0 	.word	0x20000dd0
 8000e1c:	40005400 	.word	0x40005400
 8000e20:	000186a0 	.word	0x000186a0

08000e24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a21      	ldr	r2, [pc, #132]	; (8000ec8 <HAL_I2C_MspInit+0xa4>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d13c      	bne.n	8000ec0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <HAL_I2C_MspInit+0xa8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a1f      	ldr	r2, [pc, #124]	; (8000ecc <HAL_I2C_MspInit+0xa8>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <HAL_I2C_MspInit+0xa8>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e68:	2312      	movs	r3, #18
 8000e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e74:	2304      	movs	r3, #4
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4814      	ldr	r0, [pc, #80]	; (8000ed0 <HAL_I2C_MspInit+0xac>)
 8000e80:	f001 fcb2 	bl	80027e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <HAL_I2C_MspInit+0xa8>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <HAL_I2C_MspInit+0xa8>)
 8000e8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e92:	6413      	str	r3, [r2, #64]	; 0x40
 8000e94:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <HAL_I2C_MspInit+0xa8>)
 8000e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	201f      	movs	r0, #31
 8000ea6:	f001 fbc8 	bl	800263a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000eaa:	201f      	movs	r0, #31
 8000eac:	f001 fbe1 	bl	8002672 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2020      	movs	r0, #32
 8000eb6:	f001 fbc0 	bl	800263a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000eba:	2020      	movs	r0, #32
 8000ebc:	f001 fbd9 	bl	8002672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	3728      	adds	r7, #40	; 0x28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40005400 	.word	0x40005400
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020400 	.word	0x40020400

08000ed4 <ks_continue>:

int ks_state = 0;
uint8_t ks_result = 0;
uint8_t ks_current_row = 0;

HAL_StatusTypeDef ks_continue(void) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b0c6      	sub	sp, #280	; 0x118
 8000ed8:	af04      	add	r7, sp, #16
	static uint8_t buf[4];
	uint8_t Nkey = 0x00;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	uint8_t kbd_in;

	switch (ks_state) {
 8000ee0:	4b82      	ldr	r3, [pc, #520]	; (80010ec <ks_continue+0x218>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b04      	cmp	r3, #4
 8000ee6:	f200 80fa 	bhi.w	80010de <ks_continue+0x20a>
 8000eea:	a201      	add	r2, pc, #4	; (adr r2, 8000ef0 <ks_continue+0x1c>)
 8000eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef0:	08000f05 	.word	0x08000f05
 8000ef4:	08000f6f 	.word	0x08000f6f
 8000ef8:	08000fc7 	.word	0x08000fc7
 8000efc:	08001021 	.word	0x08001021
 8000f00:	08001075 	.word	0x08001075
	case 0:
		buf[0] = 0x70;
 8000f04:	4b7a      	ldr	r3, [pc, #488]	; (80010f0 <ks_continue+0x21c>)
 8000f06:	2270      	movs	r2, #112	; 0x70
 8000f08:	701a      	strb	r2, [r3, #0]
		buf[1] = 0;
 8000f0a:	4b79      	ldr	r3, [pc, #484]	; (80010f0 <ks_continue+0x21c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	705a      	strb	r2, [r3, #1]
		buf[2] = 0;
 8000f10:	4b77      	ldr	r3, [pc, #476]	; (80010f0 <ks_continue+0x21c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	709a      	strb	r2, [r3, #2]
		buf[3] = 0;
 8000f16:	4b76      	ldr	r3, [pc, #472]	; (80010f0 <ks_continue+0x21c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	70da      	strb	r2, [r3, #3]
		ks_state = 0;
 8000f1c:	4b73      	ldr	r3, [pc, #460]	; (80010ec <ks_continue+0x218>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
		CHK_HAL(PCA9538_Write_Register(KBRD_WR_ADDR, CONFIG, buf))
 8000f22:	4a73      	ldr	r2, [pc, #460]	; (80010f0 <ks_continue+0x21c>)
 8000f24:	2103      	movs	r1, #3
 8000f26:	20e2      	movs	r0, #226	; 0xe2
 8000f28:	f000 ff3e 	bl	8001da8 <PCA9538_Write_Register>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
 8000f32:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d014      	beq.n	8000f64 <ks_continue+0x90>
 8000f3a:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8000f3e:	4638      	mov	r0, r7
 8000f40:	4a6c      	ldr	r2, [pc, #432]	; (80010f4 <ks_continue+0x220>)
 8000f42:	9202      	str	r2, [sp, #8]
 8000f44:	9301      	str	r3, [sp, #4]
 8000f46:	231f      	movs	r3, #31
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	4b6b      	ldr	r3, [pc, #428]	; (80010f8 <ks_continue+0x224>)
 8000f4c:	4a6b      	ldr	r2, [pc, #428]	; (80010fc <ks_continue+0x228>)
 8000f4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f52:	f006 f83b 	bl	8006fcc <sniprintf>
 8000f56:	463b      	mov	r3, r7
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 ff5b 	bl	8001e14 <UART_Transmit>
 8000f5e:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8000f62:	e0bd      	b.n	80010e0 <ks_continue+0x20c>
		;
		ks_state = 1;
 8000f64:	4b61      	ldr	r3, [pc, #388]	; (80010ec <ks_continue+0x218>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e0b8      	b.n	80010e0 <ks_continue+0x20c>
	case 1:
		buf[0] = 0;
 8000f6e:	4b60      	ldr	r3, [pc, #384]	; (80010f0 <ks_continue+0x21c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
		ks_state = 0;
 8000f74:	4b5d      	ldr	r3, [pc, #372]	; (80010ec <ks_continue+0x218>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
		CHK_HAL(PCA9538_Write_Register(KBRD_WR_ADDR, OUTPUT_PORT, buf))
 8000f7a:	4a5d      	ldr	r2, [pc, #372]	; (80010f0 <ks_continue+0x21c>)
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	20e2      	movs	r0, #226	; 0xe2
 8000f80:	f000 ff12 	bl	8001da8 <PCA9538_Write_Register>
 8000f84:	4603      	mov	r3, r0
 8000f86:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
 8000f8a:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d014      	beq.n	8000fbc <ks_continue+0xe8>
 8000f92:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8000f96:	4638      	mov	r0, r7
 8000f98:	4a59      	ldr	r2, [pc, #356]	; (8001100 <ks_continue+0x22c>)
 8000f9a:	9202      	str	r2, [sp, #8]
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	2326      	movs	r3, #38	; 0x26
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	4b55      	ldr	r3, [pc, #340]	; (80010f8 <ks_continue+0x224>)
 8000fa4:	4a55      	ldr	r2, [pc, #340]	; (80010fc <ks_continue+0x228>)
 8000fa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000faa:	f006 f80f 	bl	8006fcc <sniprintf>
 8000fae:	463b      	mov	r3, r7
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f000 ff2f 	bl	8001e14 <UART_Transmit>
 8000fb6:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8000fba:	e091      	b.n	80010e0 <ks_continue+0x20c>
		;
		ks_state = 2;
 8000fbc:	4b4b      	ldr	r3, [pc, #300]	; (80010ec <ks_continue+0x218>)
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e08c      	b.n	80010e0 <ks_continue+0x20c>
	case 2:
		buf[0] = ks_current_row;
 8000fc6:	4b4f      	ldr	r3, [pc, #316]	; (8001104 <ks_continue+0x230>)
 8000fc8:	781a      	ldrb	r2, [r3, #0]
 8000fca:	4b49      	ldr	r3, [pc, #292]	; (80010f0 <ks_continue+0x21c>)
 8000fcc:	701a      	strb	r2, [r3, #0]
		ks_state = 0;
 8000fce:	4b47      	ldr	r3, [pc, #284]	; (80010ec <ks_continue+0x218>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
		CHK_HAL(PCA9538_Write_Register(KBRD_WR_ADDR, OUTPUT_PORT, buf))
 8000fd4:	4a46      	ldr	r2, [pc, #280]	; (80010f0 <ks_continue+0x21c>)
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	20e2      	movs	r0, #226	; 0xe2
 8000fda:	f000 fee5 	bl	8001da8 <PCA9538_Write_Register>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
 8000fe4:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d014      	beq.n	8001016 <ks_continue+0x142>
 8000fec:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8000ff0:	4638      	mov	r0, r7
 8000ff2:	4a43      	ldr	r2, [pc, #268]	; (8001100 <ks_continue+0x22c>)
 8000ff4:	9202      	str	r2, [sp, #8]
 8000ff6:	9301      	str	r3, [sp, #4]
 8000ff8:	232d      	movs	r3, #45	; 0x2d
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	4b3e      	ldr	r3, [pc, #248]	; (80010f8 <ks_continue+0x224>)
 8000ffe:	4a3f      	ldr	r2, [pc, #252]	; (80010fc <ks_continue+0x228>)
 8001000:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001004:	f005 ffe2 	bl	8006fcc <sniprintf>
 8001008:	463b      	mov	r3, r7
 800100a:	4618      	mov	r0, r3
 800100c:	f000 ff02 	bl	8001e14 <UART_Transmit>
 8001010:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8001014:	e064      	b.n	80010e0 <ks_continue+0x20c>
		;
		ks_state = 3;
 8001016:	4b35      	ldr	r3, [pc, #212]	; (80010ec <ks_continue+0x218>)
 8001018:	2203      	movs	r2, #3
 800101a:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	e05f      	b.n	80010e0 <ks_continue+0x20c>
	case 3:
		buf[0] = 0;
 8001020:	4b33      	ldr	r3, [pc, #204]	; (80010f0 <ks_continue+0x21c>)
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
		ks_state = 0;
 8001026:	4b31      	ldr	r3, [pc, #196]	; (80010ec <ks_continue+0x218>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
		CHK_HAL(PCA9538_Read_Inputs(KBRD_RD_ADDR, buf))
 800102c:	4930      	ldr	r1, [pc, #192]	; (80010f0 <ks_continue+0x21c>)
 800102e:	20e3      	movs	r0, #227	; 0xe3
 8001030:	f000 fede 	bl	8001df0 <PCA9538_Read_Inputs>
 8001034:	4603      	mov	r3, r0
 8001036:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
 800103a:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800103e:	2b00      	cmp	r3, #0
 8001040:	d014      	beq.n	800106c <ks_continue+0x198>
 8001042:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8001046:	4638      	mov	r0, r7
 8001048:	4a2f      	ldr	r2, [pc, #188]	; (8001108 <ks_continue+0x234>)
 800104a:	9202      	str	r2, [sp, #8]
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	2334      	movs	r3, #52	; 0x34
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <ks_continue+0x224>)
 8001054:	4a29      	ldr	r2, [pc, #164]	; (80010fc <ks_continue+0x228>)
 8001056:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105a:	f005 ffb7 	bl	8006fcc <sniprintf>
 800105e:	463b      	mov	r3, r7
 8001060:	4618      	mov	r0, r3
 8001062:	f000 fed7 	bl	8001e14 <UART_Transmit>
 8001066:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800106a:	e039      	b.n	80010e0 <ks_continue+0x20c>
		;
		ks_state = 4;
 800106c:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <ks_continue+0x218>)
 800106e:	2204      	movs	r2, #4
 8001070:	601a      	str	r2, [r3, #0]
		break;
 8001072:	e034      	b.n	80010de <ks_continue+0x20a>
	case 4:
		ks_state = 0;
 8001074:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <ks_continue+0x218>)
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
		kbd_in = buf[0] & 0x70;
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <ks_continue+0x21c>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001082:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		Nkey = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		if (!(kbd_in & 0x10))
 800108c:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001090:	f003 0310 	and.w	r3, r3, #16
 8001094:	2b00      	cmp	r3, #0
 8001096:	d105      	bne.n	80010a4 <ks_continue+0x1d0>
			Nkey |= 0x04;
 8001098:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		if (!(kbd_in & 0x20))
 80010a4:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80010a8:	f003 0320 	and.w	r3, r3, #32
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d105      	bne.n	80010bc <ks_continue+0x1e8>
			Nkey |= 0x02;
 80010b0:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		if (!(kbd_in & 0x40))
 80010bc:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80010c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d105      	bne.n	80010d4 <ks_continue+0x200>
			Nkey |= 0x01;
 80010c8:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

		ks_result = Nkey;
 80010d4:	4a0d      	ldr	r2, [pc, #52]	; (800110c <ks_continue+0x238>)
 80010d6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80010da:	7013      	strb	r3, [r2, #0]
		break;
 80010dc:	bf00      	nop
	}
	return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000cec 	.word	0x20000cec
 80010f0:	20000cf4 	.word	0x20000cf4
 80010f4:	080078a0 	.word	0x080078a0
 80010f8:	08007868 	.word	0x08007868
 80010fc:	0800787c 	.word	0x0800787c
 8001100:	080078d4 	.word	0x080078d4
 8001104:	20000cf1 	.word	0x20000cf1
 8001108:	0800790c 	.word	0x0800790c
 800110c:	20000cf0 	.word	0x20000cf0

08001110 <buffer_add>:
void buffer_init() {
    for (size_t i = 0; i < BUFFER_SIZE; ++i)
        buffer[i] = 0;
}

void buffer_add(uint8_t num) {
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
    buffer[write_pointer] = num;
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <buffer_add+0x30>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4909      	ldr	r1, [pc, #36]	; (8001144 <buffer_add+0x34>)
 8001120:	79fa      	ldrb	r2, [r7, #7]
 8001122:	54ca      	strb	r2, [r1, r3]
    write_pointer = (write_pointer + 1) % BUFFER_SIZE;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <buffer_add+0x30>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	3301      	adds	r3, #1
 800112a:	f003 031f 	and.w	r3, r3, #31
 800112e:	4a04      	ldr	r2, [pc, #16]	; (8001140 <buffer_add+0x30>)
 8001130:	6013      	str	r3, [r2, #0]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000d90 	.word	0x20000d90
 8001144:	20000f24 	.word	0x20000f24

08001148 <buffer_read>:

int buffer_read() {
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
    if (read_pointer == write_pointer) {
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <buffer_read+0x40>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <buffer_read+0x44>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	d102      	bne.n	8001160 <buffer_read+0x18>
        return -1;
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
 800115e:	e00c      	b.n	800117a <buffer_read+0x32>
    }
    uint8_t num = buffer[read_pointer];
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <buffer_read+0x40>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <buffer_read+0x48>)
 8001166:	5cd3      	ldrb	r3, [r2, r3]
 8001168:	71fb      	strb	r3, [r7, #7]
    read_pointer = (read_pointer + 1) % BUFFER_SIZE;
 800116a:	4b07      	ldr	r3, [pc, #28]	; (8001188 <buffer_read+0x40>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	3301      	adds	r3, #1
 8001170:	f003 031f 	and.w	r3, r3, #31
 8001174:	4a04      	ldr	r2, [pc, #16]	; (8001188 <buffer_read+0x40>)
 8001176:	6013      	str	r3, [r2, #0]
    return num;
 8001178:	79fb      	ldrb	r3, [r7, #7]
}
 800117a:	4618      	mov	r0, r3
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000d94 	.word	0x20000d94
 800118c:	20000d90 	.word	0x20000d90
 8001190:	20000f24 	.word	0x20000f24

08001194 <keyboard_read>:

void keyboard_read(void) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
//    static uint8_t const rows[4] = { 0xF7, 0x7B, 0x3D, 0x1E };
    static uint8_t const rows[4] = {0x1E, 0x3D, 0x7B, 0xF7};
    static int current_row = 0;
    static int row_result[4] = {0, 0, 0, 0};

    if (ks_state == 0) {
 800119a:	4b32      	ldr	r3, [pc, #200]	; (8001264 <keyboard_read+0xd0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d15b      	bne.n	800125a <keyboard_read+0xc6>
        if (row_result[current_row] != ks_result) {
 80011a2:	4b31      	ldr	r3, [pc, #196]	; (8001268 <keyboard_read+0xd4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a31      	ldr	r2, [pc, #196]	; (800126c <keyboard_read+0xd8>)
 80011a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ac:	4a30      	ldr	r2, [pc, #192]	; (8001270 <keyboard_read+0xdc>)
 80011ae:	7812      	ldrb	r2, [r2, #0]
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d036      	beq.n	8001222 <keyboard_read+0x8e>
            uint8_t keyNum = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	71fb      	strb	r3, [r7, #7]
            if (ks_result & 1) {
 80011b8:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <keyboard_read+0xdc>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d00a      	beq.n	80011da <keyboard_read+0x46>
                buffer_add(3 * current_row + 3);
 80011c4:	4b28      	ldr	r3, [pc, #160]	; (8001268 <keyboard_read+0xd4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	3301      	adds	r3, #1
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	461a      	mov	r2, r3
 80011ce:	0052      	lsls	r2, r2, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff9b 	bl	8001110 <buffer_add>
            }
            if (ks_result & 2) {
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <keyboard_read+0xdc>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00b      	beq.n	80011fe <keyboard_read+0x6a>
                buffer_add(3 * current_row + 2);
 80011e6:	4b20      	ldr	r3, [pc, #128]	; (8001268 <keyboard_read+0xd4>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	461a      	mov	r2, r3
 80011ee:	0052      	lsls	r2, r2, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	3302      	adds	r3, #2
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff89 	bl	8001110 <buffer_add>
            }
            if (ks_result & 4) {
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <keyboard_read+0xdc>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00b      	beq.n	8001222 <keyboard_read+0x8e>
                buffer_add(3 * current_row + 1);
 800120a:	4b17      	ldr	r3, [pc, #92]	; (8001268 <keyboard_read+0xd4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	461a      	mov	r2, r3
 8001212:	0052      	lsls	r2, r2, #1
 8001214:	4413      	add	r3, r2
 8001216:	b2db      	uxtb	r3, r3
 8001218:	3301      	adds	r3, #1
 800121a:	b2db      	uxtb	r3, r3
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff77 	bl	8001110 <buffer_add>
            }
        }

        row_result[current_row] = ks_result;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <keyboard_read+0xdc>)
 8001224:	781a      	ldrb	r2, [r3, #0]
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <keyboard_read+0xd4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4611      	mov	r1, r2
 800122c:	4a0f      	ldr	r2, [pc, #60]	; (800126c <keyboard_read+0xd8>)
 800122e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        current_row = (current_row + 1) % 4;
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <keyboard_read+0xd4>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	3301      	adds	r3, #1
 8001238:	425a      	negs	r2, r3
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	f002 0203 	and.w	r2, r2, #3
 8001242:	bf58      	it	pl
 8001244:	4253      	negpl	r3, r2
 8001246:	4a08      	ldr	r2, [pc, #32]	; (8001268 <keyboard_read+0xd4>)
 8001248:	6013      	str	r3, [r2, #0]
        ks_current_row = rows[current_row];
 800124a:	4b07      	ldr	r3, [pc, #28]	; (8001268 <keyboard_read+0xd4>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a09      	ldr	r2, [pc, #36]	; (8001274 <keyboard_read+0xe0>)
 8001250:	5cd2      	ldrb	r2, [r2, r3]
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <keyboard_read+0xe4>)
 8001254:	701a      	strb	r2, [r3, #0]
        ks_continue();
 8001256:	f7ff fe3d 	bl	8000ed4 <ks_continue>
    }
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000cec 	.word	0x20000cec
 8001268:	20000db0 	.word	0x20000db0
 800126c:	20000db4 	.word	0x20000db4
 8001270:	20000cf0 	.word	0x20000cf0
 8001274:	08007ba0 	.word	0x08007ba0
 8001278:	20000cf1 	.word	0x20000cf1

0800127c <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
    if (hi2c == &hi2c1 && ks_state) {
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <HAL_I2C_MemTxCpltCallback+0x24>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d105      	bne.n	8001298 <HAL_I2C_MemTxCpltCallback+0x1c>
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <HAL_I2C_MemTxCpltCallback+0x28>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <HAL_I2C_MemTxCpltCallback+0x1c>
        ks_continue();
 8001294:	f7ff fe1e 	bl	8000ed4 <ks_continue>
    }
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000dd0 	.word	0x20000dd0
 80012a4:	20000cec 	.word	0x20000cec

080012a8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
    if (hi2c == &hi2c1 && ks_state) {
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a06      	ldr	r2, [pc, #24]	; (80012cc <HAL_I2C_MemRxCpltCallback+0x24>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d105      	bne.n	80012c4 <HAL_I2C_MemRxCpltCallback+0x1c>
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <HAL_I2C_MemRxCpltCallback+0x28>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_I2C_MemRxCpltCallback+0x1c>
        ks_continue();
 80012c0:	f7ff fe08 	bl	8000ed4 <ks_continue>
    }
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000dd0 	.word	0x20000dd0
 80012d0:	20000cec 	.word	0x20000cec

080012d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6) {
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_TIM_PeriodElapsedCallback+0x16>
        keyboard_read();
 80012e6:	f7ff ff55 	bl	8001194 <keyboard_read>
    }
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40001000 	.word	0x40001000

080012f8 <sendMessage>:
}

char errorMessage[] = "\n\rERROR\n\r";
char errorMessageDiv[] = "\n\rCant divide by zero\n\r";

void sendMessage(char *message) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
    int size = strlen(message);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7fe ff65 	bl	80001d0 <strlen>
 8001306:	4603      	mov	r3, r0
 8001308:	60fb      	str	r3, [r7, #12]
//    if (mode)
    HAL_UART_Transmit(&huart6, (uint8_t *) message, size, 100);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	b29a      	uxth	r2, r3
 800130e:	2364      	movs	r3, #100	; 0x64
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	4803      	ldr	r0, [pc, #12]	; (8001320 <sendMessage+0x28>)
 8001314:	f004 ff0d 	bl	8006132 <HAL_UART_Transmit>
//            isReaded1 = HAL_UART_Transmit_IT(&huart6, (uint8_t *) message, size);
//            curtime = getCurrentTime();
//            counter++;
//        }
//    }
}
 8001318:	bf00      	nop
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000fd8 	.word	0x20000fd8

08001324 <wholeNote>:

int TEMPO = 144;

//int wholenote = (60000 * 4) / TEMPO;

int wholeNote(int tempo) {
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
    return (60000 * 4) / tempo;
 800132c:	4a04      	ldr	r2, [pc, #16]	; (8001340 <wholeNote+0x1c>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	0003a980 	.word	0x0003a980

08001344 <moveToNextMelodyPosition>:
int currentTempo = 0;
int currentMelodySize = 0;
int *currentMelody;
int currentMelodyPosition = 0;

void moveToNextMelodyPosition() {
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
    currentMelodyPosition++;
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <moveToNextMelodyPosition+0x2c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	3301      	adds	r3, #1
 800134e:	4a08      	ldr	r2, [pc, #32]	; (8001370 <moveToNextMelodyPosition+0x2c>)
 8001350:	6013      	str	r3, [r2, #0]
    if (currentMelodyPosition > currentMelodySize)
 8001352:	4b07      	ldr	r3, [pc, #28]	; (8001370 <moveToNextMelodyPosition+0x2c>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <moveToNextMelodyPosition+0x30>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	429a      	cmp	r2, r3
 800135c:	dd02      	ble.n	8001364 <moveToNextMelodyPosition+0x20>
        currentMelodyPosition = 0;
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <moveToNextMelodyPosition+0x2c>)
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000dac 	.word	0x20000dac
 8001374:	20000da8 	.word	0x20000da8

08001378 <handleInputEditingNote>:

void handleInputEditingNote(int pressed_key) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	2b0b      	cmp	r3, #11
 8001386:	d87f      	bhi.n	8001488 <handleInputEditingNote+0x110>
 8001388:	a201      	add	r2, pc, #4	; (adr r2, 8001390 <handleInputEditingNote+0x18>)
 800138a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138e:	bf00      	nop
 8001390:	080013c1 	.word	0x080013c1
 8001394:	080013d1 	.word	0x080013d1
 8001398:	080013e1 	.word	0x080013e1
 800139c:	080013f1 	.word	0x080013f1
 80013a0:	08001401 	.word	0x08001401
 80013a4:	08001411 	.word	0x08001411
 80013a8:	08001421 	.word	0x08001421
 80013ac:	08001431 	.word	0x08001431
 80013b0:	08001441 	.word	0x08001441
 80013b4:	08001489 	.word	0x08001489
 80013b8:	08001489 	.word	0x08001489
 80013bc:	0800145d 	.word	0x0800145d
    switch (pressed_key) {
        case 1:
            custom_melody[custom_melody_size] = NOTE_A4;
 80013c0:	4b33      	ldr	r3, [pc, #204]	; (8001490 <handleInputEditingNote+0x118>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a33      	ldr	r2, [pc, #204]	; (8001494 <handleInputEditingNote+0x11c>)
 80013c6:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80013ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 80013ce:	e05b      	b.n	8001488 <handleInputEditingNote+0x110>
        case 2:
            custom_melody[custom_melody_size] = NOTE_D4;
 80013d0:	4b2f      	ldr	r3, [pc, #188]	; (8001490 <handleInputEditingNote+0x118>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a2f      	ldr	r2, [pc, #188]	; (8001494 <handleInputEditingNote+0x11c>)
 80013d6:	f44f 7193 	mov.w	r1, #294	; 0x126
 80013da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 80013de:	e053      	b.n	8001488 <handleInputEditingNote+0x110>
        case 3:
            custom_melody[custom_melody_size] = NOTE_G4;
 80013e0:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <handleInputEditingNote+0x118>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a2b      	ldr	r2, [pc, #172]	; (8001494 <handleInputEditingNote+0x11c>)
 80013e6:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80013ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 80013ee:	e04b      	b.n	8001488 <handleInputEditingNote+0x110>
        case 4:
            custom_melody[custom_melody_size] = NOTE_E5;
 80013f0:	4b27      	ldr	r3, [pc, #156]	; (8001490 <handleInputEditingNote+0x118>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a27      	ldr	r2, [pc, #156]	; (8001494 <handleInputEditingNote+0x11c>)
 80013f6:	f240 2193 	movw	r1, #659	; 0x293
 80013fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 80013fe:	e043      	b.n	8001488 <handleInputEditingNote+0x110>
        case 5:
            custom_melody[custom_melody_size] = NOTE_CS5;
 8001400:	4b23      	ldr	r3, [pc, #140]	; (8001490 <handleInputEditingNote+0x118>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a23      	ldr	r2, [pc, #140]	; (8001494 <handleInputEditingNote+0x11c>)
 8001406:	f240 212a 	movw	r1, #554	; 0x22a
 800140a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 800140e:	e03b      	b.n	8001488 <handleInputEditingNote+0x110>
        case 6:
            custom_melody[custom_melody_size] = NOTE_D7;
 8001410:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <handleInputEditingNote+0x118>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a1f      	ldr	r2, [pc, #124]	; (8001494 <handleInputEditingNote+0x11c>)
 8001416:	f640 112d 	movw	r1, #2349	; 0x92d
 800141a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 800141e:	e033      	b.n	8001488 <handleInputEditingNote+0x110>
        case 7:
            custom_melody[custom_melody_size] = NOTE_G7;
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <handleInputEditingNote+0x118>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a1b      	ldr	r2, [pc, #108]	; (8001494 <handleInputEditingNote+0x11c>)
 8001426:	f44f 6144 	mov.w	r1, #3136	; 0xc40
 800142a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 800142e:	e02b      	b.n	8001488 <handleInputEditingNote+0x110>
        case 8:
            custom_melody[custom_melody_size] = NOTE_C8;
 8001430:	4b17      	ldr	r3, [pc, #92]	; (8001490 <handleInputEditingNote+0x118>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a17      	ldr	r2, [pc, #92]	; (8001494 <handleInputEditingNote+0x11c>)
 8001436:	f241 015a 	movw	r1, #4186	; 0x105a
 800143a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 800143e:	e023      	b.n	8001488 <handleInputEditingNote+0x110>
        case 9:
            snprintf(message, sizeof(message),
 8001440:	4b13      	ldr	r3, [pc, #76]	; (8001490 <handleInputEditingNote+0x118>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a13      	ldr	r2, [pc, #76]	; (8001494 <handleInputEditingNote+0x11c>)
 8001446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144a:	4a13      	ldr	r2, [pc, #76]	; (8001498 <handleInputEditingNote+0x120>)
 800144c:	2196      	movs	r1, #150	; 0x96
 800144e:	4813      	ldr	r0, [pc, #76]	; (800149c <handleInputEditingNote+0x124>)
 8001450:	f005 fdbc 	bl	8006fcc <sniprintf>
                     "Current melody to add %d\r\n", custom_melody[custom_melody_size]);
            sendMessage(message);
 8001454:	4811      	ldr	r0, [pc, #68]	; (800149c <handleInputEditingNote+0x124>)
 8001456:	f7ff ff4f 	bl	80012f8 <sendMessage>
            break;
 800145a:	e015      	b.n	8001488 <handleInputEditingNote+0x110>
        case 12:
            snprintf(message, sizeof(message),
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <handleInputEditingNote+0x118>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0c      	ldr	r2, [pc, #48]	; (8001494 <handleInputEditingNote+0x11c>)
 8001462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001466:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <handleInputEditingNote+0x128>)
 8001468:	2196      	movs	r1, #150	; 0x96
 800146a:	480c      	ldr	r0, [pc, #48]	; (800149c <handleInputEditingNote+0x124>)
 800146c:	f005 fdae 	bl	8006fcc <sniprintf>
                     "Added melody %d\r\n", custom_melody[custom_melody_size]);
            sendMessage(message);
 8001470:	480a      	ldr	r0, [pc, #40]	; (800149c <handleInputEditingNote+0x124>)
 8001472:	f7ff ff41 	bl	80012f8 <sendMessage>
            custom_melody_size++;
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <handleInputEditingNote+0x118>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	3301      	adds	r3, #1
 800147c:	4a04      	ldr	r2, [pc, #16]	; (8001490 <handleInputEditingNote+0x118>)
 800147e:	6013      	str	r3, [r2, #0]
            currentMusicBoxStatus = MUSIC_BOX_EDITING_DELAY;
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <handleInputEditingNote+0x12c>)
 8001482:	2204      	movs	r2, #4
 8001484:	701a      	strb	r2, [r3, #0]
            break;
 8001486:	bf00      	nop
    }
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000d9c 	.word	0x20000d9c
 8001494:	20000e24 	.word	0x20000e24
 8001498:	08007970 	.word	0x08007970
 800149c:	20000cf8 	.word	0x20000cf8
 80014a0:	0800798c 	.word	0x0800798c
 80014a4:	20000d98 	.word	0x20000d98

080014a8 <handleInputEditingDelay>:

void handleInputEditingDelay(int pressed_key) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	2b0b      	cmp	r3, #11
 80014b6:	d87b      	bhi.n	80015b0 <handleInputEditingDelay+0x108>
 80014b8:	a201      	add	r2, pc, #4	; (adr r2, 80014c0 <handleInputEditingDelay+0x18>)
 80014ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014be:	bf00      	nop
 80014c0:	080014f1 	.word	0x080014f1
 80014c4:	08001501 	.word	0x08001501
 80014c8:	08001511 	.word	0x08001511
 80014cc:	08001521 	.word	0x08001521
 80014d0:	08001531 	.word	0x08001531
 80014d4:	0800153f 	.word	0x0800153f
 80014d8:	0800154d 	.word	0x0800154d
 80014dc:	0800155b 	.word	0x0800155b
 80014e0:	08001569 	.word	0x08001569
 80014e4:	080015b1 	.word	0x080015b1
 80014e8:	080015b1 	.word	0x080015b1
 80014ec:	08001585 	.word	0x08001585
    switch (pressed_key) {
        case 1:
            custom_melody[custom_melody_size] = -16;
 80014f0:	4b31      	ldr	r3, [pc, #196]	; (80015b8 <handleInputEditingDelay+0x110>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a31      	ldr	r2, [pc, #196]	; (80015bc <handleInputEditingDelay+0x114>)
 80014f6:	f06f 010f 	mvn.w	r1, #15
 80014fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 80014fe:	e057      	b.n	80015b0 <handleInputEditingDelay+0x108>
        case 2:
            custom_melody[custom_melody_size] = -8;
 8001500:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <handleInputEditingDelay+0x110>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a2d      	ldr	r2, [pc, #180]	; (80015bc <handleInputEditingDelay+0x114>)
 8001506:	f06f 0107 	mvn.w	r1, #7
 800150a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 800150e:	e04f      	b.n	80015b0 <handleInputEditingDelay+0x108>
        case 3:
            custom_melody[custom_melody_size] = -4;
 8001510:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <handleInputEditingDelay+0x110>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a29      	ldr	r2, [pc, #164]	; (80015bc <handleInputEditingDelay+0x114>)
 8001516:	f06f 0103 	mvn.w	r1, #3
 800151a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 800151e:	e047      	b.n	80015b0 <handleInputEditingDelay+0x108>
        case 4:
            custom_melody[custom_melody_size] = -2;
 8001520:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <handleInputEditingDelay+0x110>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a25      	ldr	r2, [pc, #148]	; (80015bc <handleInputEditingDelay+0x114>)
 8001526:	f06f 0101 	mvn.w	r1, #1
 800152a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 800152e:	e03f      	b.n	80015b0 <handleInputEditingDelay+0x108>
        case 5:
            custom_melody[custom_melody_size] = 2;
 8001530:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <handleInputEditingDelay+0x110>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a21      	ldr	r2, [pc, #132]	; (80015bc <handleInputEditingDelay+0x114>)
 8001536:	2102      	movs	r1, #2
 8001538:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 800153c:	e038      	b.n	80015b0 <handleInputEditingDelay+0x108>
        case 6:
            custom_melody[custom_melody_size] = 4;
 800153e:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <handleInputEditingDelay+0x110>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a1e      	ldr	r2, [pc, #120]	; (80015bc <handleInputEditingDelay+0x114>)
 8001544:	2104      	movs	r1, #4
 8001546:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 800154a:	e031      	b.n	80015b0 <handleInputEditingDelay+0x108>
        case 7:
            custom_melody[custom_melody_size] = 8;
 800154c:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <handleInputEditingDelay+0x110>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a1a      	ldr	r2, [pc, #104]	; (80015bc <handleInputEditingDelay+0x114>)
 8001552:	2108      	movs	r1, #8
 8001554:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 8001558:	e02a      	b.n	80015b0 <handleInputEditingDelay+0x108>
        case 8:
            custom_melody[custom_melody_size] = 16;
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <handleInputEditingDelay+0x110>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a17      	ldr	r2, [pc, #92]	; (80015bc <handleInputEditingDelay+0x114>)
 8001560:	2110      	movs	r1, #16
 8001562:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 8001566:	e023      	b.n	80015b0 <handleInputEditingDelay+0x108>
        case 9:
            snprintf(message, sizeof(message),
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <handleInputEditingDelay+0x110>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a13      	ldr	r2, [pc, #76]	; (80015bc <handleInputEditingDelay+0x114>)
 800156e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001572:	4a13      	ldr	r2, [pc, #76]	; (80015c0 <handleInputEditingDelay+0x118>)
 8001574:	2196      	movs	r1, #150	; 0x96
 8001576:	4813      	ldr	r0, [pc, #76]	; (80015c4 <handleInputEditingDelay+0x11c>)
 8001578:	f005 fd28 	bl	8006fcc <sniprintf>
                     "Current delay to add: %d\r\n", custom_melody[custom_melody_size]);
            sendMessage(message);
 800157c:	4811      	ldr	r0, [pc, #68]	; (80015c4 <handleInputEditingDelay+0x11c>)
 800157e:	f7ff febb 	bl	80012f8 <sendMessage>
            break;
 8001582:	e015      	b.n	80015b0 <handleInputEditingDelay+0x108>
        case 12:
            snprintf(message, sizeof(message),
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <handleInputEditingDelay+0x110>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0c      	ldr	r2, [pc, #48]	; (80015bc <handleInputEditingDelay+0x114>)
 800158a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158e:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <handleInputEditingDelay+0x120>)
 8001590:	2196      	movs	r1, #150	; 0x96
 8001592:	480c      	ldr	r0, [pc, #48]	; (80015c4 <handleInputEditingDelay+0x11c>)
 8001594:	f005 fd1a 	bl	8006fcc <sniprintf>
                     "Added delay: %d\r\n", custom_melody[custom_melody_size]);
            sendMessage(message);
 8001598:	480a      	ldr	r0, [pc, #40]	; (80015c4 <handleInputEditingDelay+0x11c>)
 800159a:	f7ff fead 	bl	80012f8 <sendMessage>
            custom_melody_size++;
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <handleInputEditingDelay+0x110>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	3301      	adds	r3, #1
 80015a4:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <handleInputEditingDelay+0x110>)
 80015a6:	6013      	str	r3, [r2, #0]
            currentMusicBoxStatus = MUSIC_BOX_EDITING;
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <handleInputEditingDelay+0x124>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	701a      	strb	r2, [r3, #0]
            break;
 80015ae:	bf00      	nop
    }
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000d9c 	.word	0x20000d9c
 80015bc:	20000e24 	.word	0x20000e24
 80015c0:	080079a0 	.word	0x080079a0
 80015c4:	20000cf8 	.word	0x20000cf8
 80015c8:	080079bc 	.word	0x080079bc
 80015cc:	20000d98 	.word	0x20000d98

080015d0 <handleInputEditingTempo>:

void handleInputEditingTempo(int pressed_key) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	2b0b      	cmp	r3, #11
 80015de:	d854      	bhi.n	800168a <handleInputEditingTempo+0xba>
 80015e0:	a201      	add	r2, pc, #4	; (adr r2, 80015e8 <handleInputEditingTempo+0x18>)
 80015e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e6:	bf00      	nop
 80015e8:	08001619 	.word	0x08001619
 80015ec:	08001621 	.word	0x08001621
 80015f0:	08001629 	.word	0x08001629
 80015f4:	08001631 	.word	0x08001631
 80015f8:	08001639 	.word	0x08001639
 80015fc:	08001641 	.word	0x08001641
 8001600:	08001649 	.word	0x08001649
 8001604:	08001651 	.word	0x08001651
 8001608:	08001659 	.word	0x08001659
 800160c:	0800168b 	.word	0x0800168b
 8001610:	0800168b 	.word	0x0800168b
 8001614:	0800166f 	.word	0x0800166f
    switch (pressed_key) {
        case 1:
            custom_tempo = 100;
 8001618:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <handleInputEditingTempo+0xc4>)
 800161a:	2264      	movs	r2, #100	; 0x64
 800161c:	601a      	str	r2, [r3, #0]
            break;
 800161e:	e034      	b.n	800168a <handleInputEditingTempo+0xba>
        case 2:
            custom_tempo = 110;
 8001620:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <handleInputEditingTempo+0xc4>)
 8001622:	226e      	movs	r2, #110	; 0x6e
 8001624:	601a      	str	r2, [r3, #0]
            break;
 8001626:	e030      	b.n	800168a <handleInputEditingTempo+0xba>
        case 3:
            custom_tempo = 115;
 8001628:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <handleInputEditingTempo+0xc4>)
 800162a:	2273      	movs	r2, #115	; 0x73
 800162c:	601a      	str	r2, [r3, #0]
            break;
 800162e:	e02c      	b.n	800168a <handleInputEditingTempo+0xba>
        case 4:
            custom_tempo = 120;
 8001630:	4b18      	ldr	r3, [pc, #96]	; (8001694 <handleInputEditingTempo+0xc4>)
 8001632:	2278      	movs	r2, #120	; 0x78
 8001634:	601a      	str	r2, [r3, #0]
            break;
 8001636:	e028      	b.n	800168a <handleInputEditingTempo+0xba>
        case 5:
            custom_tempo = 125;
 8001638:	4b16      	ldr	r3, [pc, #88]	; (8001694 <handleInputEditingTempo+0xc4>)
 800163a:	227d      	movs	r2, #125	; 0x7d
 800163c:	601a      	str	r2, [r3, #0]
            break;
 800163e:	e024      	b.n	800168a <handleInputEditingTempo+0xba>
        case 6:
            custom_tempo = 130;
 8001640:	4b14      	ldr	r3, [pc, #80]	; (8001694 <handleInputEditingTempo+0xc4>)
 8001642:	2282      	movs	r2, #130	; 0x82
 8001644:	601a      	str	r2, [r3, #0]
            break;
 8001646:	e020      	b.n	800168a <handleInputEditingTempo+0xba>
        case 7:
            custom_tempo = 135;
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <handleInputEditingTempo+0xc4>)
 800164a:	2287      	movs	r2, #135	; 0x87
 800164c:	601a      	str	r2, [r3, #0]
            break;
 800164e:	e01c      	b.n	800168a <handleInputEditingTempo+0xba>
        case 8:
            custom_tempo = 140;
 8001650:	4b10      	ldr	r3, [pc, #64]	; (8001694 <handleInputEditingTempo+0xc4>)
 8001652:	228c      	movs	r2, #140	; 0x8c
 8001654:	601a      	str	r2, [r3, #0]
            break;
 8001656:	e018      	b.n	800168a <handleInputEditingTempo+0xba>
        case 9:
            snprintf(message, sizeof(message),
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <handleInputEditingTempo+0xc4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <handleInputEditingTempo+0xc8>)
 800165e:	2196      	movs	r1, #150	; 0x96
 8001660:	480e      	ldr	r0, [pc, #56]	; (800169c <handleInputEditingTempo+0xcc>)
 8001662:	f005 fcb3 	bl	8006fcc <sniprintf>
                     "The Custom tempo: %d\r\n", custom_tempo);
            sendMessage(message);
 8001666:	480d      	ldr	r0, [pc, #52]	; (800169c <handleInputEditingTempo+0xcc>)
 8001668:	f7ff fe46 	bl	80012f8 <sendMessage>
            break;
 800166c:	e00d      	b.n	800168a <handleInputEditingTempo+0xba>
        case 12:
            currentMusicBoxStatus = MUSIC_BOX_EDITING;
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <handleInputEditingTempo+0xd0>)
 8001670:	2201      	movs	r2, #1
 8001672:	701a      	strb	r2, [r3, #0]
            snprintf(message, sizeof(message),
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <handleInputEditingTempo+0xc4>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <handleInputEditingTempo+0xd4>)
 800167a:	2196      	movs	r1, #150	; 0x96
 800167c:	4807      	ldr	r0, [pc, #28]	; (800169c <handleInputEditingTempo+0xcc>)
 800167e:	f005 fca5 	bl	8006fcc <sniprintf>
                     "Applied tempo: %d\r\n", custom_tempo);
            sendMessage(message);
 8001682:	4806      	ldr	r0, [pc, #24]	; (800169c <handleInputEditingTempo+0xcc>)
 8001684:	f7ff fe38 	bl	80012f8 <sendMessage>
            break;
 8001688:	bf00      	nop
    }
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000da0 	.word	0x20000da0
 8001698:	080079d0 	.word	0x080079d0
 800169c:	20000cf8 	.word	0x20000cf8
 80016a0:	20000d98 	.word	0x20000d98
 80016a4:	080079e8 	.word	0x080079e8

080016a8 <handleInputPlaying>:

void handleInputPlaying(int pressed_key) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	2b05      	cmp	r3, #5
 80016b6:	f200 808b 	bhi.w	80017d0 <handleInputPlaying+0x128>
 80016ba:	a201      	add	r2, pc, #4	; (adr r2, 80016c0 <handleInputPlaying+0x18>)
 80016bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c0:	080016d9 	.word	0x080016d9
 80016c4:	08001705 	.word	0x08001705
 80016c8:	08001731 	.word	0x08001731
 80016cc:	0800175d 	.word	0x0800175d
 80016d0:	0800178b 	.word	0x0800178b
 80016d4:	080017b9 	.word	0x080017b9
    switch (pressed_key) {
        case 1:
            currentMelody = melody_AHA;
 80016d8:	4b3f      	ldr	r3, [pc, #252]	; (80017d8 <handleInputPlaying+0x130>)
 80016da:	4a40      	ldr	r2, [pc, #256]	; (80017dc <handleInputPlaying+0x134>)
 80016dc:	601a      	str	r2, [r3, #0]
            currentMelodySize = sizeof(melody_AHA) / sizeof(melody_AHA[0]);
 80016de:	4b40      	ldr	r3, [pc, #256]	; (80017e0 <handleInputPlaying+0x138>)
 80016e0:	22c0      	movs	r2, #192	; 0xc0
 80016e2:	601a      	str	r2, [r3, #0]
            currentTempo = TEMPO_AHA;
 80016e4:	4b3f      	ldr	r3, [pc, #252]	; (80017e4 <handleInputPlaying+0x13c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a3f      	ldr	r2, [pc, #252]	; (80017e8 <handleInputPlaying+0x140>)
 80016ea:	6013      	str	r3, [r2, #0]
            currentMelodyPosition = 0;
 80016ec:	4b3f      	ldr	r3, [pc, #252]	; (80017ec <handleInputPlaying+0x144>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
            snprintf(message, sizeof(message),
 80016f2:	4a3f      	ldr	r2, [pc, #252]	; (80017f0 <handleInputPlaying+0x148>)
 80016f4:	2196      	movs	r1, #150	; 0x96
 80016f6:	483f      	ldr	r0, [pc, #252]	; (80017f4 <handleInputPlaying+0x14c>)
 80016f8:	f005 fc68 	bl	8006fcc <sniprintf>
                     "Playing AHHA - Take on me\r\n");
            sendMessage(message);
 80016fc:	483d      	ldr	r0, [pc, #244]	; (80017f4 <handleInputPlaying+0x14c>)
 80016fe:	f7ff fdfb 	bl	80012f8 <sendMessage>
            break;
 8001702:	e065      	b.n	80017d0 <handleInputPlaying+0x128>
        case 2:
            currentMelody = melody_Potter;
 8001704:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <handleInputPlaying+0x130>)
 8001706:	4a3c      	ldr	r2, [pc, #240]	; (80017f8 <handleInputPlaying+0x150>)
 8001708:	601a      	str	r2, [r3, #0]
            currentMelodySize = sizeof(melody_Potter) / sizeof(melody_Potter[0]);
 800170a:	4b35      	ldr	r3, [pc, #212]	; (80017e0 <handleInputPlaying+0x138>)
 800170c:	227c      	movs	r2, #124	; 0x7c
 800170e:	601a      	str	r2, [r3, #0]
            currentTempo = TEMPO_POTTER;
 8001710:	4b3a      	ldr	r3, [pc, #232]	; (80017fc <handleInputPlaying+0x154>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a34      	ldr	r2, [pc, #208]	; (80017e8 <handleInputPlaying+0x140>)
 8001716:	6013      	str	r3, [r2, #0]
            currentMelodyPosition = 0;
 8001718:	4b34      	ldr	r3, [pc, #208]	; (80017ec <handleInputPlaying+0x144>)
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
            snprintf(message, sizeof(message),
 800171e:	4a38      	ldr	r2, [pc, #224]	; (8001800 <handleInputPlaying+0x158>)
 8001720:	2196      	movs	r1, #150	; 0x96
 8001722:	4834      	ldr	r0, [pc, #208]	; (80017f4 <handleInputPlaying+0x14c>)
 8001724:	f005 fc52 	bl	8006fcc <sniprintf>
                     "Playing  Harry Potter - Hedwig's theme\r\n");
            sendMessage(message);
 8001728:	4832      	ldr	r0, [pc, #200]	; (80017f4 <handleInputPlaying+0x14c>)
 800172a:	f7ff fde5 	bl	80012f8 <sendMessage>
            break;
 800172e:	e04f      	b.n	80017d0 <handleInputPlaying+0x128>
        case 3:
            currentMelody = melody_STARWARS;
 8001730:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <handleInputPlaying+0x130>)
 8001732:	4a34      	ldr	r2, [pc, #208]	; (8001804 <handleInputPlaying+0x15c>)
 8001734:	601a      	str	r2, [r3, #0]
            currentMelodySize = sizeof(melody_STARWARS) / sizeof(melody_STARWARS[0]);
 8001736:	4b2a      	ldr	r3, [pc, #168]	; (80017e0 <handleInputPlaying+0x138>)
 8001738:	22b0      	movs	r2, #176	; 0xb0
 800173a:	601a      	str	r2, [r3, #0]
            currentTempo = TEMPO_STARWARS;
 800173c:	4b32      	ldr	r3, [pc, #200]	; (8001808 <handleInputPlaying+0x160>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a29      	ldr	r2, [pc, #164]	; (80017e8 <handleInputPlaying+0x140>)
 8001742:	6013      	str	r3, [r2, #0]
            currentMelodyPosition = 0;
 8001744:	4b29      	ldr	r3, [pc, #164]	; (80017ec <handleInputPlaying+0x144>)
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
            snprintf(message, sizeof(message),
 800174a:	4a30      	ldr	r2, [pc, #192]	; (800180c <handleInputPlaying+0x164>)
 800174c:	2196      	movs	r1, #150	; 0x96
 800174e:	4829      	ldr	r0, [pc, #164]	; (80017f4 <handleInputPlaying+0x14c>)
 8001750:	f005 fc3c 	bl	8006fcc <sniprintf>
                     "Playing Star Wars - Imperial March\r\n");
            sendMessage(message);
 8001754:	4827      	ldr	r0, [pc, #156]	; (80017f4 <handleInputPlaying+0x14c>)
 8001756:	f7ff fdcf 	bl	80012f8 <sendMessage>
            break;
 800175a:	e039      	b.n	80017d0 <handleInputPlaying+0x128>
        case 4:
            currentMelody = melody_MII;
 800175c:	4b1e      	ldr	r3, [pc, #120]	; (80017d8 <handleInputPlaying+0x130>)
 800175e:	4a2c      	ldr	r2, [pc, #176]	; (8001810 <handleInputPlaying+0x168>)
 8001760:	601a      	str	r2, [r3, #0]
            currentMelodySize = sizeof(melody_MII) / sizeof(melody_MII[0]);
 8001762:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <handleInputPlaying+0x138>)
 8001764:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8001768:	601a      	str	r2, [r3, #0]
            currentTempo = TEMPO_MII;
 800176a:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <handleInputPlaying+0x16c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a1e      	ldr	r2, [pc, #120]	; (80017e8 <handleInputPlaying+0x140>)
 8001770:	6013      	str	r3, [r2, #0]
            currentMelodyPosition = 0;
 8001772:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <handleInputPlaying+0x144>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
            snprintf(message, sizeof(message),
 8001778:	4a27      	ldr	r2, [pc, #156]	; (8001818 <handleInputPlaying+0x170>)
 800177a:	2196      	movs	r1, #150	; 0x96
 800177c:	481d      	ldr	r0, [pc, #116]	; (80017f4 <handleInputPlaying+0x14c>)
 800177e:	f005 fc25 	bl	8006fcc <sniprintf>
                     "Playing  Mii channel theme\r\n");
            sendMessage(message);
 8001782:	481c      	ldr	r0, [pc, #112]	; (80017f4 <handleInputPlaying+0x14c>)
 8001784:	f7ff fdb8 	bl	80012f8 <sendMessage>
            break;
 8001788:	e022      	b.n	80017d0 <handleInputPlaying+0x128>
        case 5:
            currentMelody = custom_melody;
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <handleInputPlaying+0x130>)
 800178c:	4a23      	ldr	r2, [pc, #140]	; (800181c <handleInputPlaying+0x174>)
 800178e:	601a      	str	r2, [r3, #0]
            currentMelodySize = custom_melody_size;
 8001790:	4b23      	ldr	r3, [pc, #140]	; (8001820 <handleInputPlaying+0x178>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <handleInputPlaying+0x138>)
 8001796:	6013      	str	r3, [r2, #0]
            currentTempo = custom_tempo;
 8001798:	4b22      	ldr	r3, [pc, #136]	; (8001824 <handleInputPlaying+0x17c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <handleInputPlaying+0x140>)
 800179e:	6013      	str	r3, [r2, #0]
            currentMelodyPosition = 0;
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <handleInputPlaying+0x144>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
            snprintf(message, sizeof(message),
 80017a6:	4a20      	ldr	r2, [pc, #128]	; (8001828 <handleInputPlaying+0x180>)
 80017a8:	2196      	movs	r1, #150	; 0x96
 80017aa:	4812      	ldr	r0, [pc, #72]	; (80017f4 <handleInputPlaying+0x14c>)
 80017ac:	f005 fc0e 	bl	8006fcc <sniprintf>
                     "Playing  Custom Melody\r\n");
            sendMessage(message);
 80017b0:	4810      	ldr	r0, [pc, #64]	; (80017f4 <handleInputPlaying+0x14c>)
 80017b2:	f7ff fda1 	bl	80012f8 <sendMessage>
            break;
 80017b6:	e00b      	b.n	80017d0 <handleInputPlaying+0x128>
        case 6:
            currentMusicBoxStatus = MUSIC_BOX_EDITING;
 80017b8:	4b1c      	ldr	r3, [pc, #112]	; (800182c <handleInputPlaying+0x184>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	701a      	strb	r2, [r3, #0]
            snprintf(message, sizeof(message),
 80017be:	4a1c      	ldr	r2, [pc, #112]	; (8001830 <handleInputPlaying+0x188>)
 80017c0:	2196      	movs	r1, #150	; 0x96
 80017c2:	480c      	ldr	r0, [pc, #48]	; (80017f4 <handleInputPlaying+0x14c>)
 80017c4:	f005 fc02 	bl	8006fcc <sniprintf>
                     "Editing Mode On\r\n");
            sendMessage(message);
 80017c8:	480a      	ldr	r0, [pc, #40]	; (80017f4 <handleInputPlaying+0x14c>)
 80017ca:	f7ff fd95 	bl	80012f8 <sendMessage>
            break;
 80017ce:	bf00      	nop
    }
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000f44 	.word	0x20000f44
 80017dc:	2000002c 	.word	0x2000002c
 80017e0:	20000da8 	.word	0x20000da8
 80017e4:	20000028 	.word	0x20000028
 80017e8:	20000da4 	.word	0x20000da4
 80017ec:	20000dac 	.word	0x20000dac
 80017f0:	080079fc 	.word	0x080079fc
 80017f4:	20000cf8 	.word	0x20000cf8
 80017f8:	200005f0 	.word	0x200005f0
 80017fc:	200007e0 	.word	0x200007e0
 8001800:	08007a18 	.word	0x08007a18
 8001804:	20000330 	.word	0x20000330
 8001808:	2000032c 	.word	0x2000032c
 800180c:	08007a44 	.word	0x08007a44
 8001810:	200007e8 	.word	0x200007e8
 8001814:	200007e4 	.word	0x200007e4
 8001818:	08007a6c 	.word	0x08007a6c
 800181c:	20000e24 	.word	0x20000e24
 8001820:	20000d9c 	.word	0x20000d9c
 8001824:	20000da0 	.word	0x20000da0
 8001828:	08007a8c 	.word	0x08007a8c
 800182c:	20000d98 	.word	0x20000d98
 8001830:	08007aa8 	.word	0x08007aa8

08001834 <handleInputEditing>:

void handleInputEditing(int pressed_key) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af02      	add	r7, sp, #8
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b07      	subs	r3, #7
 8001840:	2b04      	cmp	r3, #4
 8001842:	f200 8088 	bhi.w	8001956 <handleInputEditing+0x122>
 8001846:	a201      	add	r2, pc, #4	; (adr r2, 800184c <handleInputEditing+0x18>)
 8001848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184c:	08001861 	.word	0x08001861
 8001850:	08001879 	.word	0x08001879
 8001854:	080018e9 	.word	0x080018e9
 8001858:	08001915 	.word	0x08001915
 800185c:	0800192d 	.word	0x0800192d
    switch (pressed_key) {
        case 7:
            snprintf(message, sizeof(message),
 8001860:	4a3f      	ldr	r2, [pc, #252]	; (8001960 <handleInputEditing+0x12c>)
 8001862:	2196      	movs	r1, #150	; 0x96
 8001864:	483f      	ldr	r0, [pc, #252]	; (8001964 <handleInputEditing+0x130>)
 8001866:	f005 fbb1 	bl	8006fcc <sniprintf>
                     "Playing Music\r\n");
            sendMessage(message);
 800186a:	483e      	ldr	r0, [pc, #248]	; (8001964 <handleInputEditing+0x130>)
 800186c:	f7ff fd44 	bl	80012f8 <sendMessage>
            currentMusicBoxStatus = MUSIC_BOX_PLAYING;
 8001870:	4b3d      	ldr	r3, [pc, #244]	; (8001968 <handleInputEditing+0x134>)
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
            break;
 8001876:	e06e      	b.n	8001956 <handleInputEditing+0x122>
        case 8:
            snprintf(message, sizeof(message),
 8001878:	4b3c      	ldr	r3, [pc, #240]	; (800196c <handleInputEditing+0x138>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b3c      	ldr	r3, [pc, #240]	; (8001970 <handleInputEditing+0x13c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2140      	movs	r1, #64	; 0x40
 8001882:	9101      	str	r1, [sp, #4]
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	4613      	mov	r3, r2
 8001888:	4a3a      	ldr	r2, [pc, #232]	; (8001974 <handleInputEditing+0x140>)
 800188a:	2196      	movs	r1, #150	; 0x96
 800188c:	4835      	ldr	r0, [pc, #212]	; (8001964 <handleInputEditing+0x130>)
 800188e:	f005 fb9d 	bl	8006fcc <sniprintf>
                     "Printing User Melody\r\n"
                     "Tempo: %d\r\n"
                     "Size: %d\r\n"
                     "Max_Size: %d\r\n"
                     "Notes: \r\n", custom_tempo, custom_melody_size, CUSTOM_MELODY_LENGTH);
            sendMessage(message);
 8001892:	4834      	ldr	r0, [pc, #208]	; (8001964 <handleInputEditing+0x130>)
 8001894:	f7ff fd30 	bl	80012f8 <sendMessage>

            for (size_t i = 0; i < custom_melody_size; i = i + 2) {
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	e015      	b.n	80018ca <handleInputEditing+0x96>
                snprintf(message, sizeof(message), "%d %d | ",
 800189e:	4a36      	ldr	r2, [pc, #216]	; (8001978 <handleInputEditing+0x144>)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                         custom_melody[i], custom_melody[i + 1]);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	3301      	adds	r3, #1
                snprintf(message, sizeof(message), "%d %d | ",
 80018aa:	4933      	ldr	r1, [pc, #204]	; (8001978 <handleInputEditing+0x144>)
 80018ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	4613      	mov	r3, r2
 80018b4:	4a31      	ldr	r2, [pc, #196]	; (800197c <handleInputEditing+0x148>)
 80018b6:	2196      	movs	r1, #150	; 0x96
 80018b8:	482a      	ldr	r0, [pc, #168]	; (8001964 <handleInputEditing+0x130>)
 80018ba:	f005 fb87 	bl	8006fcc <sniprintf>
                sendMessage(message);
 80018be:	4829      	ldr	r0, [pc, #164]	; (8001964 <handleInputEditing+0x130>)
 80018c0:	f7ff fd1a 	bl	80012f8 <sendMessage>
            for (size_t i = 0; i < custom_melody_size; i = i + 2) {
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3302      	adds	r3, #2
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b29      	ldr	r3, [pc, #164]	; (8001970 <handleInputEditing+0x13c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d3e3      	bcc.n	800189e <handleInputEditing+0x6a>
            }
            snprintf(message, sizeof(message), "\r\n");
 80018d6:	4a2a      	ldr	r2, [pc, #168]	; (8001980 <handleInputEditing+0x14c>)
 80018d8:	2196      	movs	r1, #150	; 0x96
 80018da:	4822      	ldr	r0, [pc, #136]	; (8001964 <handleInputEditing+0x130>)
 80018dc:	f005 fb76 	bl	8006fcc <sniprintf>
            sendMessage(message);
 80018e0:	4820      	ldr	r0, [pc, #128]	; (8001964 <handleInputEditing+0x130>)
 80018e2:	f7ff fd09 	bl	80012f8 <sendMessage>
            break;
 80018e6:	e036      	b.n	8001956 <handleInputEditing+0x122>
        case 9:
            if (custom_melody_size + 2 <= CUSTOM_MELODY_LENGTH) {
 80018e8:	4b21      	ldr	r3, [pc, #132]	; (8001970 <handleInputEditing+0x13c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b3e      	cmp	r3, #62	; 0x3e
 80018ee:	dc08      	bgt.n	8001902 <handleInputEditing+0xce>
                snprintf(message, sizeof(message),
 80018f0:	4a24      	ldr	r2, [pc, #144]	; (8001984 <handleInputEditing+0x150>)
 80018f2:	2196      	movs	r1, #150	; 0x96
 80018f4:	481b      	ldr	r0, [pc, #108]	; (8001964 <handleInputEditing+0x130>)
 80018f6:	f005 fb69 	bl	8006fcc <sniprintf>
                         "Adding Note\r\n");
                currentMusicBoxStatus = MUSIC_BOX_EDITING_NOTE;
 80018fa:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <handleInputEditing+0x134>)
 80018fc:	2203      	movs	r2, #3
 80018fe:	701a      	strb	r2, [r3, #0]
 8001900:	e004      	b.n	800190c <handleInputEditing+0xd8>
            } else {
                snprintf(message, sizeof(message),
 8001902:	4a21      	ldr	r2, [pc, #132]	; (8001988 <handleInputEditing+0x154>)
 8001904:	2196      	movs	r1, #150	; 0x96
 8001906:	4817      	ldr	r0, [pc, #92]	; (8001964 <handleInputEditing+0x130>)
 8001908:	f005 fb60 	bl	8006fcc <sniprintf>
                         "Cannot add note, cut one by pressing 11\r\n");
            }
            sendMessage(message);
 800190c:	4815      	ldr	r0, [pc, #84]	; (8001964 <handleInputEditing+0x130>)
 800190e:	f7ff fcf3 	bl	80012f8 <sendMessage>
            break;
 8001912:	e020      	b.n	8001956 <handleInputEditing+0x122>
        case 10:
            snprintf(message, sizeof(message),
 8001914:	4a1d      	ldr	r2, [pc, #116]	; (800198c <handleInputEditing+0x158>)
 8001916:	2196      	movs	r1, #150	; 0x96
 8001918:	4812      	ldr	r0, [pc, #72]	; (8001964 <handleInputEditing+0x130>)
 800191a:	f005 fb57 	bl	8006fcc <sniprintf>
                     "Editing TEMPO\r\n");
            currentMusicBoxStatus = MUSIC_BOX_EDITING_TEMPO;
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <handleInputEditing+0x134>)
 8001920:	2202      	movs	r2, #2
 8001922:	701a      	strb	r2, [r3, #0]
            sendMessage(message);
 8001924:	480f      	ldr	r0, [pc, #60]	; (8001964 <handleInputEditing+0x130>)
 8001926:	f7ff fce7 	bl	80012f8 <sendMessage>
            break;
 800192a:	e014      	b.n	8001956 <handleInputEditing+0x122>
        case 11:
            snprintf(message, sizeof(message),
 800192c:	4a18      	ldr	r2, [pc, #96]	; (8001990 <handleInputEditing+0x15c>)
 800192e:	2196      	movs	r1, #150	; 0x96
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <handleInputEditing+0x130>)
 8001932:	f005 fb4b 	bl	8006fcc <sniprintf>
                     "Сutting one Note and Delay\r\n");
            custom_melody_size = custom_melody_size - 2;
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <handleInputEditing+0x13c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	3b02      	subs	r3, #2
 800193c:	4a0c      	ldr	r2, [pc, #48]	; (8001970 <handleInputEditing+0x13c>)
 800193e:	6013      	str	r3, [r2, #0]
            if (custom_melody_size < 0)
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <handleInputEditing+0x13c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	da02      	bge.n	800194e <handleInputEditing+0x11a>
                custom_melody_size = 0;
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <handleInputEditing+0x13c>)
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
            sendMessage(message);
 800194e:	4805      	ldr	r0, [pc, #20]	; (8001964 <handleInputEditing+0x130>)
 8001950:	f7ff fcd2 	bl	80012f8 <sendMessage>
            break;
 8001954:	bf00      	nop
    }
}
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	08007abc 	.word	0x08007abc
 8001964:	20000cf8 	.word	0x20000cf8
 8001968:	20000d98 	.word	0x20000d98
 800196c:	20000da0 	.word	0x20000da0
 8001970:	20000d9c 	.word	0x20000d9c
 8001974:	08007acc 	.word	0x08007acc
 8001978:	20000e24 	.word	0x20000e24
 800197c:	08007b10 	.word	0x08007b10
 8001980:	08007b1c 	.word	0x08007b1c
 8001984:	08007b20 	.word	0x08007b20
 8001988:	08007b30 	.word	0x08007b30
 800198c:	08007b5c 	.word	0x08007b5c
 8001990:	08007b6c 	.word	0x08007b6c

08001994 <handleInput>:

void handleInput(int pressed_key) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
    if (pressed_key < 1 || pressed_key > 12)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	dd28      	ble.n	80019f4 <handleInput+0x60>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b0c      	cmp	r3, #12
 80019a6:	dc25      	bgt.n	80019f4 <handleInput+0x60>
        return;
    switch (currentMusicBoxStatus) {
 80019a8:	4b14      	ldr	r3, [pc, #80]	; (80019fc <handleInput+0x68>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d822      	bhi.n	80019f6 <handleInput+0x62>
 80019b0:	a201      	add	r2, pc, #4	; (adr r2, 80019b8 <handleInput+0x24>)
 80019b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b6:	bf00      	nop
 80019b8:	080019cd 	.word	0x080019cd
 80019bc:	080019d5 	.word	0x080019d5
 80019c0:	080019e5 	.word	0x080019e5
 80019c4:	080019dd 	.word	0x080019dd
 80019c8:	080019ed 	.word	0x080019ed
        case MUSIC_BOX_PLAYING:
            handleInputPlaying(pressed_key);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff fe6b 	bl	80016a8 <handleInputPlaying>
            break;
 80019d2:	e010      	b.n	80019f6 <handleInput+0x62>
        case MUSIC_BOX_EDITING:
            handleInputEditing(pressed_key);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ff2d 	bl	8001834 <handleInputEditing>
            break;
 80019da:	e00c      	b.n	80019f6 <handleInput+0x62>
        case MUSIC_BOX_EDITING_NOTE:
            handleInputEditingNote(pressed_key);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff fccb 	bl	8001378 <handleInputEditingNote>
            break;
 80019e2:	e008      	b.n	80019f6 <handleInput+0x62>
        case MUSIC_BOX_EDITING_TEMPO:
            handleInputEditingTempo(pressed_key);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff fdf3 	bl	80015d0 <handleInputEditingTempo>
            break;
 80019ea:	e004      	b.n	80019f6 <handleInput+0x62>
        case MUSIC_BOX_EDITING_DELAY:
            handleInputEditingDelay(pressed_key);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff fd5b 	bl	80014a8 <handleInputEditingDelay>
            break;
 80019f2:	e000      	b.n	80019f6 <handleInput+0x62>
        return;
 80019f4:	bf00      	nop
    }
}
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000d98 	.word	0x20000d98

08001a00 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8001a00:	b5b0      	push	{r4, r5, r7, lr}
 8001a02:	b08e      	sub	sp, #56	; 0x38
 8001a04:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */
    HAL_StatusTypeDef isReaded;
    int shortPressTime = 200;
 8001a06:	23c8      	movs	r3, #200	; 0xc8
 8001a08:	61fb      	str	r3, [r7, #28]
    int isBeingProceed = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	637b      	str	r3, [r7, #52]	; 0x34
    long startTimePressedButton = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	633b      	str	r3, [r7, #48]	; 0x30
    char chtest[] = "F\n\r";
 8001a12:	4b8b      	ldr	r3, [pc, #556]	; (8001c40 <main+0x240>)
 8001a14:	603b      	str	r3, [r7, #0]
    int melody_tick = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    int new = 1;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    int played = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]

    currentMelody = melody_AHA;
 8001a22:	4b88      	ldr	r3, [pc, #544]	; (8001c44 <main+0x244>)
 8001a24:	4a88      	ldr	r2, [pc, #544]	; (8001c48 <main+0x248>)
 8001a26:	601a      	str	r2, [r3, #0]
    currentMelodySize = sizeof(melody_AHA) / sizeof(melody_AHA[0]);
 8001a28:	4b88      	ldr	r3, [pc, #544]	; (8001c4c <main+0x24c>)
 8001a2a:	22c0      	movs	r2, #192	; 0xc0
 8001a2c:	601a      	str	r2, [r3, #0]
    currentTempo = TEMPO_AHA;
 8001a2e:	4b88      	ldr	r3, [pc, #544]	; (8001c50 <main+0x250>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a88      	ldr	r2, [pc, #544]	; (8001c54 <main+0x254>)
 8001a34:	6013      	str	r3, [r2, #0]
    currentMelodyPosition = 0;
 8001a36:	4b88      	ldr	r3, [pc, #544]	; (8001c58 <main+0x258>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
    int cur_melody = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
    int cur_pause = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
    int tempo = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	613b      	str	r3, [r7, #16]
    int noteDuration = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001a4c:	f000 fca8 	bl	80023a0 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001a50:	f000 f916 	bl	8001c80 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001a54:	f7ff f926 	bl	8000ca4 <MX_GPIO_Init>
    MX_USART6_UART_Init();
 8001a58:	f000 fbfe 	bl	8002258 <MX_USART6_UART_Init>
    MX_I2C1_Init();
 8001a5c:	f7ff f9b4 	bl	8000dc8 <MX_I2C1_Init>
    MX_TIM2_Init();
 8001a60:	f000 faec 	bl	800203c <MX_TIM2_Init>
    MX_TIM6_Init();
 8001a64:	f000 fb42 	bl	80020ec <MX_TIM6_Init>
    /* USER CODE BEGIN 2 */
    sound_driver_init();
 8001a68:	f000 f9ea 	bl	8001e40 <sound_driver_init>
    HAL_TIM_Base_Start_IT(&htim6);
 8001a6c:	487b      	ldr	r0, [pc, #492]	; (8001c5c <main+0x25c>)
 8001a6e:	f003 fc93 	bl	8005398 <HAL_TIM_Base_Start_IT>

        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
//        blinkGreenDiode();
        if (!getButtonState()) {
 8001a72:	f7ff f995 	bl	8000da0 <getButtonState>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d108      	bne.n	8001a8e <main+0x8e>
            if (!isBeingProceed) {
 8001a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d125      	bne.n	8001ace <main+0xce>
                startTimePressedButton = getCurrentTime();
 8001a82:	f7ff f999 	bl	8000db8 <getCurrentTime>
 8001a86:	6338      	str	r0, [r7, #48]	; 0x30
                isBeingProceed = 1;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a8c:	e01f      	b.n	8001ace <main+0xce>
            }
        } else {
            if (isBeingProceed && getCurrentTime() - startTimePressedButton > shortPressTime) {
 8001a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d01a      	beq.n	8001aca <main+0xca>
 8001a94:	f7ff f990 	bl	8000db8 <getCurrentTime>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	da12      	bge.n	8001aca <main+0xca>
                if (mode == 1) {
 8001aa4:	4b6e      	ldr	r3, [pc, #440]	; (8001c60 <main+0x260>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d106      	bne.n	8001aba <main+0xba>
                    mode = 0;
 8001aac:	4b6c      	ldr	r3, [pc, #432]	; (8001c60 <main+0x260>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
                    sendMessage(mode0);
 8001ab2:	486c      	ldr	r0, [pc, #432]	; (8001c64 <main+0x264>)
 8001ab4:	f7ff fc20 	bl	80012f8 <sendMessage>
 8001ab8:	e005      	b.n	8001ac6 <main+0xc6>
                } else {
                    mode = 1;
 8001aba:	4b69      	ldr	r3, [pc, #420]	; (8001c60 <main+0x260>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
                    sendMessage(mode1);
 8001ac0:	4869      	ldr	r0, [pc, #420]	; (8001c68 <main+0x268>)
 8001ac2:	f7ff fc19 	bl	80012f8 <sendMessage>
                }
                sound_driver_volume_mute();
 8001ac6:	f000 f9ec 	bl	8001ea2 <sound_driver_volume_mute>
            }
            isBeingProceed = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        int key_pressed = buffer_read();
 8001ace:	f7ff fb3b 	bl	8001148 <buffer_read>
 8001ad2:	60f8      	str	r0, [r7, #12]

        if (mode) {
 8001ad4:	4b62      	ldr	r3, [pc, #392]	; (8001c60 <main+0x260>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d011      	beq.n	8001b00 <main+0x100>
            if (key_pressed > 0 && key_pressed < 13) {
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f340 80a6 	ble.w	8001c30 <main+0x230>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2b0c      	cmp	r3, #12
 8001ae8:	f300 80a2 	bgt.w	8001c30 <main+0x230>
                snprintf(message, sizeof(message),
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4a5f      	ldr	r2, [pc, #380]	; (8001c6c <main+0x26c>)
 8001af0:	2196      	movs	r1, #150	; 0x96
 8001af2:	485f      	ldr	r0, [pc, #380]	; (8001c70 <main+0x270>)
 8001af4:	f005 fa6a 	bl	8006fcc <sniprintf>
                         "Key pressed is %d\r\n", key_pressed);
                sendMessage(message);
 8001af8:	485d      	ldr	r0, [pc, #372]	; (8001c70 <main+0x270>)
 8001afa:	f7ff fbfd 	bl	80012f8 <sendMessage>
            }
            continue;
 8001afe:	e097      	b.n	8001c30 <main+0x230>
        }

        handleInput(key_pressed);
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f7ff ff47 	bl	8001994 <handleInput>

        int note, delay;
        uint32_t tick = HAL_GetTick();
 8001b06:	f000 fcb1 	bl	800246c <HAL_GetTick>
 8001b0a:	60b8      	str	r0, [r7, #8]
        int length = custom_melody_size;
 8001b0c:	4b59      	ldr	r3, [pc, #356]	; (8001c74 <main+0x274>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	607b      	str	r3, [r7, #4]
        switch (currentMusicBoxStatus) {
 8001b12:	4b59      	ldr	r3, [pc, #356]	; (8001c78 <main+0x278>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <main+0x12a>
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	dba9      	blt.n	8001a72 <main+0x72>
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d8a6      	bhi.n	8001a72 <main+0x72>
            case MUSIC_BOX_EDITING_DELAY:
            case MUSIC_BOX_EDITING_TEMPO:
            case MUSIC_BOX_EDITING_NOTE:
            case MUSIC_BOX_EDITING:
                sound_driver_volume_mute();
 8001b24:	f000 f9bd 	bl	8001ea2 <sound_driver_volume_mute>
                break;
 8001b28:	e083      	b.n	8001c32 <main+0x232>
            case MUSIC_BOX_PLAYING:
//                sound_driver_play(currentMelody[currentMelodyPosition], currentMelody[currentMelodyPosition + 1],
//                                  currentTempo);
//                moveToNextMelodyPosition();
                if (new) {
 8001b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d046      	beq.n	8001bbe <main+0x1be>
                cur_melody = currentMelody[currentMelodyPosition];
 8001b30:	4b44      	ldr	r3, [pc, #272]	; (8001c44 <main+0x244>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b48      	ldr	r3, [pc, #288]	; (8001c58 <main+0x258>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
                cur_pause = currentMelody[currentMelodyPosition + 1];
 8001b40:	4b40      	ldr	r3, [pc, #256]	; (8001c44 <main+0x244>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b44      	ldr	r3, [pc, #272]	; (8001c58 <main+0x258>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	617b      	str	r3, [r7, #20]
                tempo = currentTempo;
 8001b52:	4b40      	ldr	r3, [pc, #256]	; (8001c54 <main+0x254>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	613b      	str	r3, [r7, #16]
                noteDuration = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	623b      	str	r3, [r7, #32]

                if (cur_pause > 0)
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	dd08      	ble.n	8001b74 <main+0x174>
                    noteDuration = wholeNote(tempo) / cur_pause;
 8001b62:	6938      	ldr	r0, [r7, #16]
 8001b64:	f7ff fbde 	bl	8001324 <wholeNote>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b70:	623b      	str	r3, [r7, #32]
 8001b72:	e01d      	b.n	8001bb0 <main+0x1b0>
                else if (cur_pause < 0) {
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	da1a      	bge.n	8001bb0 <main+0x1b0>
                    noteDuration = wholeNote(tempo) / abs(cur_pause);
 8001b7a:	6938      	ldr	r0, [r7, #16]
 8001b7c:	f7ff fbd2 	bl	8001324 <wholeNote>
 8001b80:	4602      	mov	r2, r0
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bfb8      	it	lt
 8001b88:	425b      	neglt	r3, r3
 8001b8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b8e:	623b      	str	r3, [r7, #32]
                    noteDuration *= 1.5;
 8001b90:	6a38      	ldr	r0, [r7, #32]
 8001b92:	f7fe fdf1 	bl	8000778 <__aeabi_i2d>
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	4b38      	ldr	r3, [pc, #224]	; (8001c7c <main+0x27c>)
 8001b9c:	f7fe fb70 	bl	8000280 <__aeabi_dmul>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f7fe fed8 	bl	800095c <__aeabi_d2iz>
 8001bac:	4603      	mov	r3, r0
 8001bae:	623b      	str	r3, [r7, #32]
                }
                    new = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
                    melody_tick = HAL_GetTick();
 8001bb4:	f000 fc5a 	bl	800246c <HAL_GetTick>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	62fb      	str	r3, [r7, #44]	; 0x2c
                        sound_driver_volume_mute();
                        moveToNextMelodyPosition();
                    }
                }
//
                break;
 8001bbc:	e039      	b.n	8001c32 <main+0x232>
                    if (getCurrentTime() - melody_tick < noteDuration) {
 8001bbe:	f7ff f8fb 	bl	8000db8 <getCurrentTime>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	6a3a      	ldr	r2, [r7, #32]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	dd27      	ble.n	8001c1e <main+0x21e>
                        if (getCurrentTime() - melody_tick < noteDuration * 0.9) {
 8001bce:	f7ff f8f3 	bl	8000db8 <getCurrentTime>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fdcd 	bl	8000778 <__aeabi_i2d>
 8001bde:	4604      	mov	r4, r0
 8001be0:	460d      	mov	r5, r1
 8001be2:	6a38      	ldr	r0, [r7, #32]
 8001be4:	f7fe fdc8 	bl	8000778 <__aeabi_i2d>
 8001be8:	a313      	add	r3, pc, #76	; (adr r3, 8001c38 <main+0x238>)
 8001bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bee:	f7fe fb47 	bl	8000280 <__aeabi_dmul>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	4629      	mov	r1, r5
 8001bfa:	f7fe fe87 	bl	800090c <__aeabi_dcmplt>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d009      	beq.n	8001c18 <main+0x218>
                            sound_driver_set_frequency(cur_melody);
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f000 f927 	bl	8001e5c <sound_driver_set_frequency>
                            sound_driver_volume_on();
 8001c0e:	f000 f93d 	bl	8001e8c <sound_driver_volume_on>
                            played = 1;
 8001c12:	2301      	movs	r3, #1
 8001c14:	61bb      	str	r3, [r7, #24]
                break;
 8001c16:	e00c      	b.n	8001c32 <main+0x232>
                            sound_driver_volume_mute();
 8001c18:	f000 f943 	bl	8001ea2 <sound_driver_volume_mute>
                break;
 8001c1c:	e009      	b.n	8001c32 <main+0x232>
                        new = 1;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
                        played = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61bb      	str	r3, [r7, #24]
                        sound_driver_volume_mute();
 8001c26:	f000 f93c 	bl	8001ea2 <sound_driver_volume_mute>
                        moveToNextMelodyPosition();
 8001c2a:	f7ff fb8b 	bl	8001344 <moveToNextMelodyPosition>
                break;
 8001c2e:	e000      	b.n	8001c32 <main+0x232>
            continue;
 8001c30:	bf00      	nop
    while (1) {
 8001c32:	e71e      	b.n	8001a72 <main+0x72>
 8001c34:	f3af 8000 	nop.w
 8001c38:	cccccccd 	.word	0xcccccccd
 8001c3c:	3feccccc 	.word	0x3feccccc
 8001c40:	000d0a46 	.word	0x000d0a46
 8001c44:	20000f44 	.word	0x20000f44
 8001c48:	2000002c 	.word	0x2000002c
 8001c4c:	20000da8 	.word	0x20000da8
 8001c50:	20000028 	.word	0x20000028
 8001c54:	20000da4 	.word	0x20000da4
 8001c58:	20000dac 	.word	0x20000dac
 8001c5c:	20000f48 	.word	0x20000f48
 8001c60:	20000000 	.word	0x20000000
 8001c64:	20000004 	.word	0x20000004
 8001c68:	20000014 	.word	0x20000014
 8001c6c:	08007b8c 	.word	0x08007b8c
 8001c70:	20000cf8 	.word	0x20000cf8
 8001c74:	20000d9c 	.word	0x20000d9c
 8001c78:	20000d98 	.word	0x20000d98
 8001c7c:	3ff80000 	.word	0x3ff80000

08001c80 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b094      	sub	sp, #80	; 0x50
 8001c84:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c86:	f107 0320 	add.w	r3, r7, #32
 8001c8a:	2230      	movs	r2, #48	; 0x30
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f005 f994 	bl	8006fbc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c94:	f107 030c 	add.w	r3, r7, #12
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <SystemClock_Config+0xcc>)
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	4a27      	ldr	r2, [pc, #156]	; (8001d4c <SystemClock_Config+0xcc>)
 8001cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb4:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <SystemClock_Config+0xcc>)
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	4b22      	ldr	r3, [pc, #136]	; (8001d50 <SystemClock_Config+0xd0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a21      	ldr	r2, [pc, #132]	; (8001d50 <SystemClock_Config+0xd0>)
 8001cca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	4b1f      	ldr	r3, [pc, #124]	; (8001d50 <SystemClock_Config+0xd0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ce0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cee:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 25;
 8001cf0:	2319      	movs	r3, #25
 8001cf2:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 336;
 8001cf4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001cf8:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cfe:	2304      	movs	r3, #4
 8001d00:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001d02:	f107 0320 	add.w	r3, r7, #32
 8001d06:	4618      	mov	r0, r3
 8001d08:	f002 feae 	bl	8004a68 <HAL_RCC_OscConfig>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <SystemClock_Config+0x96>
        Error_Handler();
 8001d12:	f000 f81f 	bl	8001d54 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001d16:	230f      	movs	r3, #15
 8001d18:	60fb      	str	r3, [r7, #12]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d22:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d26:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d2c:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001d2e:	f107 030c 	add.w	r3, r7, #12
 8001d32:	2105      	movs	r1, #5
 8001d34:	4618      	mov	r0, r3
 8001d36:	f003 f90f 	bl	8004f58 <HAL_RCC_ClockConfig>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <SystemClock_Config+0xc4>
        Error_Handler();
 8001d40:	f000 f808 	bl	8001d54 <Error_Handler>
    }
}
 8001d44:	bf00      	nop
 8001d46:	3750      	adds	r7, #80	; 0x50
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40007000 	.word	0x40007000

08001d54 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d58:	b672      	cpsid	i
}
 8001d5a:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8001d5c:	e7fe      	b.n	8001d5c <Error_Handler+0x8>
	...

08001d60 <PCA9538_Read_Register>:
#include "sdk_uart.h"
#include "pca9538.h"
#include "utils.h"

HAL_StatusTypeDef PCA9538_Read_Register(uint16_t addr, pca9538_regs_t reg,
		uint8_t *buf) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af02      	add	r7, sp, #8
 8001d66:	4603      	mov	r3, r0
 8001d68:	603a      	str	r2, [r7, #0]
 8001d6a:	80fb      	strh	r3, [r7, #6]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef retcode;
	while ((retcode = HAL_I2C_Mem_Read_IT(&hi2c1, addr | 1, reg, 1, buf, 1))
 8001d70:	bf00      	nop
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	b299      	uxth	r1, r3
 8001d7a:	797b      	ldrb	r3, [r7, #5]
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	2301      	movs	r3, #1
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	2301      	movs	r3, #1
 8001d88:	4806      	ldr	r0, [pc, #24]	; (8001da4 <PCA9538_Read_Register+0x44>)
 8001d8a:	f001 f8f1 	bl	8002f70 <HAL_I2C_Mem_Read_IT>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	73fb      	strb	r3, [r7, #15]
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d0ec      	beq.n	8001d72 <PCA9538_Read_Register+0x12>
			== HAL_BUSY)
		;
	return retcode;
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000dd0 	.word	0x20000dd0

08001da8 <PCA9538_Write_Register>:

HAL_StatusTypeDef PCA9538_Write_Register(uint16_t addr, pca9538_regs_t reg,
		uint8_t *buf) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	4603      	mov	r3, r0
 8001db0:	603a      	str	r2, [r7, #0]
 8001db2:	80fb      	strh	r3, [r7, #6]
 8001db4:	460b      	mov	r3, r1
 8001db6:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef retcode;
	while ((retcode = HAL_I2C_Mem_Write_IT(&hi2c1, addr & 0xFFFE, reg, 1, buf,
 8001db8:	bf00      	nop
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	f023 0301 	bic.w	r3, r3, #1
 8001dc0:	b299      	uxth	r1, r3
 8001dc2:	797b      	ldrb	r3, [r7, #5]
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	9301      	str	r3, [sp, #4]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	2301      	movs	r3, #1
 8001dd0:	4806      	ldr	r0, [pc, #24]	; (8001dec <PCA9538_Write_Register+0x44>)
 8001dd2:	f001 f81b 	bl	8002e0c <HAL_I2C_Mem_Write_IT>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	73fb      	strb	r3, [r7, #15]
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d0ec      	beq.n	8001dba <PCA9538_Write_Register+0x12>
			1)) == HAL_BUSY)
		;
	return retcode;
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000dd0 	.word	0x20000dd0

08001df0 <PCA9538_Read_Inputs>:
	}

	return ret;
}

HAL_StatusTypeDef PCA9538_Read_Inputs(uint16_t addr, uint8_t *buf) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	80fb      	strh	r3, [r7, #6]
	return PCA9538_Read_Register(addr, INPUT_PORT, buf);
 8001dfc:	88fb      	ldrh	r3, [r7, #6]
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	2100      	movs	r1, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ffac 	bl	8001d60 <PCA9538_Read_Register>
 8001e08:	4603      	mov	r3, r0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <UART_Transmit>:
#include "sdk_uart.h"
#include "usart.h"
#include <string.h>


void UART_Transmit(uint8_t data[]){
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, data, strlen((const char*)data), 1000);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7fe f9d7 	bl	80001d0 <strlen>
 8001e22:	4603      	mov	r3, r0
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4803      	ldr	r0, [pc, #12]	; (8001e3c <UART_Transmit+0x28>)
 8001e2e:	f004 f980 	bl	8006132 <HAL_UART_Transmit>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000fd8 	.word	0x20000fd8

08001e40 <sound_driver_init>:

#include "sound_driver.h"
#include "tim.h"
#include "hal_driver.h"

void sound_driver_init(void) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
    HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8001e44:	2100      	movs	r1, #0
 8001e46:	4804      	ldr	r0, [pc, #16]	; (8001e58 <sound_driver_init+0x18>)
 8001e48:	f003 fb16 	bl	8005478 <HAL_TIM_OC_Start>
    HAL_TIM_PWM_Init(&htim2);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <sound_driver_init+0x18>)
 8001e4e:	f003 fbdb 	bl	8005608 <HAL_TIM_PWM_Init>
};
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000f90 	.word	0x20000f90

08001e5c <sound_driver_set_frequency>:


void sound_driver_set_frequency(uint16_t freq) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	80fb      	strh	r3, [r7, #6]
    TIM2->PSC = ((2 * HAL_RCC_GetPCLK1Freq()) / (2 * 10 * freq)) - 1;
 8001e66:	f003 fa1f 	bl	80052a8 <HAL_RCC_GetPCLK1Freq>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	0059      	lsls	r1, r3, #1
 8001e6e:	88fa      	ldrh	r2, [r7, #6]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e80:	3b01      	subs	r3, #1
 8001e82:	6293      	str	r3, [r2, #40]	; 0x28
};
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <sound_driver_volume_on>:

void sound_driver_volume_on() {
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
    TIM2->CCR1 = 10;
 8001e90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e94:	220a      	movs	r2, #10
 8001e96:	635a      	str	r2, [r3, #52]	; 0x34
};
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <sound_driver_volume_mute>:

void sound_driver_volume_mute() {
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
    TIM2->CCR1 = 0;
 8001ea6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eaa:	2200      	movs	r2, #0
 8001eac:	635a      	str	r2, [r3, #52]	; 0x34
};
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <HAL_MspInit+0x4c>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	4a0f      	ldr	r2, [pc, #60]	; (8001f04 <HAL_MspInit+0x4c>)
 8001ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ece:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <HAL_MspInit+0x4c>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed6:	607b      	str	r3, [r7, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	603b      	str	r3, [r7, #0]
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_MspInit+0x4c>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a08      	ldr	r2, [pc, #32]	; (8001f04 <HAL_MspInit+0x4c>)
 8001ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_MspInit+0x4c>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800

08001f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f0c:	e7fe      	b.n	8001f0c <NMI_Handler+0x4>

08001f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f12:	e7fe      	b.n	8001f12 <HardFault_Handler+0x4>

08001f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <MemManage_Handler+0x4>

08001f1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f1e:	e7fe      	b.n	8001f1e <BusFault_Handler+0x4>

08001f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <UsageFault_Handler+0x4>

08001f26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f54:	f000 fa76 	bl	8002444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f60:	4802      	ldr	r0, [pc, #8]	; (8001f6c <I2C1_EV_IRQHandler+0x10>)
 8001f62:	f001 f8c3 	bl	80030ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000dd0 	.word	0x20000dd0

08001f70 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <I2C1_ER_IRQHandler+0x10>)
 8001f76:	f001 fa2a 	bl	80033ce <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000dd0 	.word	0x20000dd0

08001f84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f88:	4802      	ldr	r0, [pc, #8]	; (8001f94 <TIM6_DAC_IRQHandler+0x10>)
 8001f8a:	f003 fb8c 	bl	80056a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000f48 	.word	0x20000f48

08001f98 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001f9c:	4802      	ldr	r0, [pc, #8]	; (8001fa8 <USART6_IRQHandler+0x10>)
 8001f9e:	f004 f95b 	bl	8006258 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000fd8 	.word	0x20000fd8

08001fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fb4:	4a14      	ldr	r2, [pc, #80]	; (8002008 <_sbrk+0x5c>)
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <_sbrk+0x60>)
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fc0:	4b13      	ldr	r3, [pc, #76]	; (8002010 <_sbrk+0x64>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d102      	bne.n	8001fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <_sbrk+0x64>)
 8001fca:	4a12      	ldr	r2, [pc, #72]	; (8002014 <_sbrk+0x68>)
 8001fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <_sbrk+0x64>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d207      	bcs.n	8001fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fdc:	f004 ffc4 	bl	8006f68 <__errno>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fea:	e009      	b.n	8002000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <_sbrk+0x64>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ff2:	4b07      	ldr	r3, [pc, #28]	; (8002010 <_sbrk+0x64>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	4a05      	ldr	r2, [pc, #20]	; (8002010 <_sbrk+0x64>)
 8001ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20020000 	.word	0x20020000
 800200c:	00000400 	.word	0x00000400
 8002010:	20000dc4 	.word	0x20000dc4
 8002014:	20001030 	.word	0x20001030

08002018 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <SystemInit+0x20>)
 800201e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002022:	4a05      	ldr	r2, [pc, #20]	; (8002038 <SystemInit+0x20>)
 8002024:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002028:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	; 0x28
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002042:	f107 0320 	add.w	r3, r7, #32
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
 8002058:	611a      	str	r2, [r3, #16]
 800205a:	615a      	str	r2, [r3, #20]
 800205c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800205e:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <MX_TIM2_Init+0xac>)
 8002060:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002064:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002066:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <MX_TIM2_Init+0xac>)
 8002068:	2200      	movs	r2, #0
 800206a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206c:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <MX_TIM2_Init+0xac>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8002072:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <MX_TIM2_Init+0xac>)
 8002074:	220a      	movs	r2, #10
 8002076:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002078:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <MX_TIM2_Init+0xac>)
 800207a:	2200      	movs	r2, #0
 800207c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800207e:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <MX_TIM2_Init+0xac>)
 8002080:	2200      	movs	r2, #0
 8002082:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002084:	4818      	ldr	r0, [pc, #96]	; (80020e8 <MX_TIM2_Init+0xac>)
 8002086:	f003 fabf 	bl	8005608 <HAL_TIM_PWM_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002090:	f7ff fe60 	bl	8001d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002094:	2300      	movs	r3, #0
 8002096:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002098:	2300      	movs	r3, #0
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800209c:	f107 0320 	add.w	r3, r7, #32
 80020a0:	4619      	mov	r1, r3
 80020a2:	4811      	ldr	r0, [pc, #68]	; (80020e8 <MX_TIM2_Init+0xac>)
 80020a4:	f003 ff68 	bl	8005f78 <HAL_TIMEx_MasterConfigSynchronization>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80020ae:	f7ff fe51 	bl	8001d54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020b2:	2360      	movs	r3, #96	; 0x60
 80020b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	2200      	movs	r2, #0
 80020c6:	4619      	mov	r1, r3
 80020c8:	4807      	ldr	r0, [pc, #28]	; (80020e8 <MX_TIM2_Init+0xac>)
 80020ca:	f003 fbf5 	bl	80058b8 <HAL_TIM_PWM_ConfigChannel>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80020d4:	f7ff fe3e 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80020d8:	4803      	ldr	r0, [pc, #12]	; (80020e8 <MX_TIM2_Init+0xac>)
 80020da:	f000 f885 	bl	80021e8 <HAL_TIM_MspPostInit>

}
 80020de:	bf00      	nop
 80020e0:	3728      	adds	r7, #40	; 0x28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000f90 	.word	0x20000f90

080020ec <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f2:	463b      	mov	r3, r7
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <MX_TIM6_Init+0x64>)
 80020fc:	4a15      	ldr	r2, [pc, #84]	; (8002154 <MX_TIM6_Init+0x68>)
 80020fe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000;
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <MX_TIM6_Init+0x64>)
 8002102:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8002106:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <MX_TIM6_Init+0x64>)
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <MX_TIM6_Init+0x64>)
 8002110:	2264      	movs	r2, #100	; 0x64
 8002112:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002114:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <MX_TIM6_Init+0x64>)
 8002116:	2200      	movs	r2, #0
 8002118:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800211a:	480d      	ldr	r0, [pc, #52]	; (8002150 <MX_TIM6_Init+0x64>)
 800211c:	f003 f8ec 	bl	80052f8 <HAL_TIM_Base_Init>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002126:	f7ff fe15 	bl	8001d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800212e:	2300      	movs	r3, #0
 8002130:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002132:	463b      	mov	r3, r7
 8002134:	4619      	mov	r1, r3
 8002136:	4806      	ldr	r0, [pc, #24]	; (8002150 <MX_TIM6_Init+0x64>)
 8002138:	f003 ff1e 	bl	8005f78 <HAL_TIMEx_MasterConfigSynchronization>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002142:	f7ff fe07 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000f48 	.word	0x20000f48
 8002154:	40001000 	.word	0x40001000

08002158 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002168:	d10d      	bne.n	8002186 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <HAL_TIM_PWM_MspInit+0x3c>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	4a08      	ldr	r2, [pc, #32]	; (8002194 <HAL_TIM_PWM_MspInit+0x3c>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6413      	str	r3, [r2, #64]	; 0x40
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_TIM_PWM_MspInit+0x3c>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800

08002198 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0e      	ldr	r2, [pc, #56]	; (80021e0 <HAL_TIM_Base_MspInit+0x48>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d115      	bne.n	80021d6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <HAL_TIM_Base_MspInit+0x4c>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	4a0c      	ldr	r2, [pc, #48]	; (80021e4 <HAL_TIM_Base_MspInit+0x4c>)
 80021b4:	f043 0310 	orr.w	r3, r3, #16
 80021b8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ba:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <HAL_TIM_Base_MspInit+0x4c>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2100      	movs	r1, #0
 80021ca:	2036      	movs	r0, #54	; 0x36
 80021cc:	f000 fa35 	bl	800263a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021d0:	2036      	movs	r0, #54	; 0x36
 80021d2:	f000 fa4e 	bl	8002672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40001000 	.word	0x40001000
 80021e4:	40023800 	.word	0x40023800

080021e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 030c 	add.w	r3, r7, #12
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002208:	d11d      	bne.n	8002246 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <HAL_TIM_MspPostInit+0x68>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	4a0f      	ldr	r2, [pc, #60]	; (8002250 <HAL_TIM_MspPostInit+0x68>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6313      	str	r3, [r2, #48]	; 0x30
 800221a:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <HAL_TIM_MspPostInit+0x68>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002226:	2320      	movs	r3, #32
 8002228:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	2302      	movs	r3, #2
 800222c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002236:	2301      	movs	r3, #1
 8002238:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223a:	f107 030c 	add.w	r3, r7, #12
 800223e:	4619      	mov	r1, r3
 8002240:	4804      	ldr	r0, [pc, #16]	; (8002254 <HAL_TIM_MspPostInit+0x6c>)
 8002242:	f000 fad1 	bl	80027e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002246:	bf00      	nop
 8002248:	3720      	adds	r7, #32
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800
 8002254:	40020000 	.word	0x40020000

08002258 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <MX_USART6_UART_Init+0x4c>)
 800225e:	4a12      	ldr	r2, [pc, #72]	; (80022a8 <MX_USART6_UART_Init+0x50>)
 8002260:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002262:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <MX_USART6_UART_Init+0x4c>)
 8002264:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002268:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800226a:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <MX_USART6_UART_Init+0x4c>)
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <MX_USART6_UART_Init+0x4c>)
 8002272:	2200      	movs	r2, #0
 8002274:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002276:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <MX_USART6_UART_Init+0x4c>)
 8002278:	2200      	movs	r2, #0
 800227a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800227c:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <MX_USART6_UART_Init+0x4c>)
 800227e:	220c      	movs	r2, #12
 8002280:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002282:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <MX_USART6_UART_Init+0x4c>)
 8002284:	2200      	movs	r2, #0
 8002286:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <MX_USART6_UART_Init+0x4c>)
 800228a:	2200      	movs	r2, #0
 800228c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800228e:	4805      	ldr	r0, [pc, #20]	; (80022a4 <MX_USART6_UART_Init+0x4c>)
 8002290:	f003 ff02 	bl	8006098 <HAL_UART_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800229a:	f7ff fd5b 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000fd8 	.word	0x20000fd8
 80022a8:	40011400 	.word	0x40011400

080022ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08a      	sub	sp, #40	; 0x28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a1d      	ldr	r2, [pc, #116]	; (8002340 <HAL_UART_MspInit+0x94>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d133      	bne.n	8002336 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <HAL_UART_MspInit+0x98>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	4a1b      	ldr	r2, [pc, #108]	; (8002344 <HAL_UART_MspInit+0x98>)
 80022d8:	f043 0320 	orr.w	r3, r3, #32
 80022dc:	6453      	str	r3, [r2, #68]	; 0x44
 80022de:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_UART_MspInit+0x98>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	f003 0320 	and.w	r3, r3, #32
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <HAL_UART_MspInit+0x98>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	4a14      	ldr	r2, [pc, #80]	; (8002344 <HAL_UART_MspInit+0x98>)
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
 80022fa:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_UART_MspInit+0x98>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002306:	23c0      	movs	r3, #192	; 0xc0
 8002308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230a:	2302      	movs	r3, #2
 800230c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002312:	2303      	movs	r3, #3
 8002314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002316:	2308      	movs	r3, #8
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800231a:	f107 0314 	add.w	r3, r7, #20
 800231e:	4619      	mov	r1, r3
 8002320:	4809      	ldr	r0, [pc, #36]	; (8002348 <HAL_UART_MspInit+0x9c>)
 8002322:	f000 fa61 	bl	80027e8 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	2100      	movs	r1, #0
 800232a:	2047      	movs	r0, #71	; 0x47
 800232c:	f000 f985 	bl	800263a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002330:	2047      	movs	r0, #71	; 0x47
 8002332:	f000 f99e 	bl	8002672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002336:	bf00      	nop
 8002338:	3728      	adds	r7, #40	; 0x28
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40011400 	.word	0x40011400
 8002344:	40023800 	.word	0x40023800
 8002348:	40020800 	.word	0x40020800

0800234c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800234c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002384 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002350:	480d      	ldr	r0, [pc, #52]	; (8002388 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002352:	490e      	ldr	r1, [pc, #56]	; (800238c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002354:	4a0e      	ldr	r2, [pc, #56]	; (8002390 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002358:	e002      	b.n	8002360 <LoopCopyDataInit>

0800235a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800235a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800235c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800235e:	3304      	adds	r3, #4

08002360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002364:	d3f9      	bcc.n	800235a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002366:	4a0b      	ldr	r2, [pc, #44]	; (8002394 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002368:	4c0b      	ldr	r4, [pc, #44]	; (8002398 <LoopFillZerobss+0x26>)
  movs r3, #0
 800236a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800236c:	e001      	b.n	8002372 <LoopFillZerobss>

0800236e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800236e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002370:	3204      	adds	r2, #4

08002372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002374:	d3fb      	bcc.n	800236e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002376:	f7ff fe4f 	bl	8002018 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800237a:	f004 fdfb 	bl	8006f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800237e:	f7ff fb3f 	bl	8001a00 <main>
  bx  lr    
 8002382:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002384:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800238c:	20000cd0 	.word	0x20000cd0
  ldr r2, =_sidata
 8002390:	08007c00 	.word	0x08007c00
  ldr r2, =_sbss
 8002394:	20000cd0 	.word	0x20000cd0
  ldr r4, =_ebss
 8002398:	20001030 	.word	0x20001030

0800239c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800239c:	e7fe      	b.n	800239c <ADC_IRQHandler>
	...

080023a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023a4:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <HAL_Init+0x40>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0d      	ldr	r2, [pc, #52]	; (80023e0 <HAL_Init+0x40>)
 80023aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_Init+0x40>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a0a      	ldr	r2, [pc, #40]	; (80023e0 <HAL_Init+0x40>)
 80023b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <HAL_Init+0x40>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a07      	ldr	r2, [pc, #28]	; (80023e0 <HAL_Init+0x40>)
 80023c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c8:	2003      	movs	r0, #3
 80023ca:	f000 f92b 	bl	8002624 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ce:	200f      	movs	r0, #15
 80023d0:	f000 f808 	bl	80023e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023d4:	f7ff fd70 	bl	8001eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40023c00 	.word	0x40023c00

080023e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <HAL_InitTick+0x54>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_InitTick+0x58>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4619      	mov	r1, r3
 80023f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80023fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002402:	4618      	mov	r0, r3
 8002404:	f000 f943 	bl	800268e <HAL_SYSTICK_Config>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e00e      	b.n	8002430 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b0f      	cmp	r3, #15
 8002416:	d80a      	bhi.n	800242e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002418:	2200      	movs	r2, #0
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	f04f 30ff 	mov.w	r0, #4294967295
 8002420:	f000 f90b 	bl	800263a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002424:	4a06      	ldr	r2, [pc, #24]	; (8002440 <HAL_InitTick+0x5c>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	e000      	b.n	8002430 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000c60 	.word	0x20000c60
 800243c:	20000c68 	.word	0x20000c68
 8002440:	20000c64 	.word	0x20000c64

08002444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_IncTick+0x20>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_IncTick+0x24>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4413      	add	r3, r2
 8002454:	4a04      	ldr	r2, [pc, #16]	; (8002468 <HAL_IncTick+0x24>)
 8002456:	6013      	str	r3, [r2, #0]
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000c68 	.word	0x20000c68
 8002468:	2000101c 	.word	0x2000101c

0800246c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return uwTick;
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <HAL_GetTick+0x14>)
 8002472:	681b      	ldr	r3, [r3, #0]
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	2000101c 	.word	0x2000101c

08002484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a0:	4013      	ands	r3, r2
 80024a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024b6:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <__NVIC_SetPriorityGrouping+0x44>)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	60d3      	str	r3, [r2, #12]
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <__NVIC_GetPriorityGrouping+0x18>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	0a1b      	lsrs	r3, r3, #8
 80024d6:	f003 0307 	and.w	r3, r3, #7
}
 80024da:	4618      	mov	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	db0b      	blt.n	8002512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	f003 021f 	and.w	r2, r3, #31
 8002500:	4907      	ldr	r1, [pc, #28]	; (8002520 <__NVIC_EnableIRQ+0x38>)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	2001      	movs	r0, #1
 800250a:	fa00 f202 	lsl.w	r2, r0, r2
 800250e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000e100 	.word	0xe000e100

08002524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	6039      	str	r1, [r7, #0]
 800252e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002534:	2b00      	cmp	r3, #0
 8002536:	db0a      	blt.n	800254e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	b2da      	uxtb	r2, r3
 800253c:	490c      	ldr	r1, [pc, #48]	; (8002570 <__NVIC_SetPriority+0x4c>)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	0112      	lsls	r2, r2, #4
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	440b      	add	r3, r1
 8002548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800254c:	e00a      	b.n	8002564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4908      	ldr	r1, [pc, #32]	; (8002574 <__NVIC_SetPriority+0x50>)
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	3b04      	subs	r3, #4
 800255c:	0112      	lsls	r2, r2, #4
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	440b      	add	r3, r1
 8002562:	761a      	strb	r2, [r3, #24]
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000e100 	.word	0xe000e100
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002578:	b480      	push	{r7}
 800257a:	b089      	sub	sp, #36	; 0x24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f1c3 0307 	rsb	r3, r3, #7
 8002592:	2b04      	cmp	r3, #4
 8002594:	bf28      	it	cs
 8002596:	2304      	movcs	r3, #4
 8002598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3304      	adds	r3, #4
 800259e:	2b06      	cmp	r3, #6
 80025a0:	d902      	bls.n	80025a8 <NVIC_EncodePriority+0x30>
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3b03      	subs	r3, #3
 80025a6:	e000      	b.n	80025aa <NVIC_EncodePriority+0x32>
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ac:	f04f 32ff 	mov.w	r2, #4294967295
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43da      	mvns	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	401a      	ands	r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c0:	f04f 31ff 	mov.w	r1, #4294967295
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ca:	43d9      	mvns	r1, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d0:	4313      	orrs	r3, r2
         );
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3724      	adds	r7, #36	; 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f0:	d301      	bcc.n	80025f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025f2:	2301      	movs	r3, #1
 80025f4:	e00f      	b.n	8002616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f6:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <SysTick_Config+0x40>)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025fe:	210f      	movs	r1, #15
 8002600:	f04f 30ff 	mov.w	r0, #4294967295
 8002604:	f7ff ff8e 	bl	8002524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <SysTick_Config+0x40>)
 800260a:	2200      	movs	r2, #0
 800260c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800260e:	4b04      	ldr	r3, [pc, #16]	; (8002620 <SysTick_Config+0x40>)
 8002610:	2207      	movs	r2, #7
 8002612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	e000e010 	.word	0xe000e010

08002624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff ff29 	bl	8002484 <__NVIC_SetPriorityGrouping>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800263a:	b580      	push	{r7, lr}
 800263c:	b086      	sub	sp, #24
 800263e:	af00      	add	r7, sp, #0
 8002640:	4603      	mov	r3, r0
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	607a      	str	r2, [r7, #4]
 8002646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800264c:	f7ff ff3e 	bl	80024cc <__NVIC_GetPriorityGrouping>
 8002650:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68b9      	ldr	r1, [r7, #8]
 8002656:	6978      	ldr	r0, [r7, #20]
 8002658:	f7ff ff8e 	bl	8002578 <NVIC_EncodePriority>
 800265c:	4602      	mov	r2, r0
 800265e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002662:	4611      	mov	r1, r2
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ff5d 	bl	8002524 <__NVIC_SetPriority>
}
 800266a:	bf00      	nop
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	4603      	mov	r3, r0
 800267a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff ff31 	bl	80024e8 <__NVIC_EnableIRQ>
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff ffa2 	bl	80025e0 <SysTick_Config>
 800269c:	4603      	mov	r3, r0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026b4:	f7ff feda 	bl	800246c <HAL_GetTick>
 80026b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d008      	beq.n	80026d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2280      	movs	r2, #128	; 0x80
 80026ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e052      	b.n	800277e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0216 	bic.w	r2, r2, #22
 80026e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695a      	ldr	r2, [r3, #20]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d103      	bne.n	8002708 <HAL_DMA_Abort+0x62>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002704:	2b00      	cmp	r3, #0
 8002706:	d007      	beq.n	8002718 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0208 	bic.w	r2, r2, #8
 8002716:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0201 	bic.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002728:	e013      	b.n	8002752 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800272a:	f7ff fe9f 	bl	800246c <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b05      	cmp	r3, #5
 8002736:	d90c      	bls.n	8002752 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2220      	movs	r2, #32
 800273c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2203      	movs	r2, #3
 8002742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e015      	b.n	800277e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1e4      	bne.n	800272a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002764:	223f      	movs	r2, #63	; 0x3f
 8002766:	409a      	lsls	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d004      	beq.n	80027a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2280      	movs	r2, #128	; 0x80
 800279e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e00c      	b.n	80027be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2205      	movs	r2, #5
 80027a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0201 	bic.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027d8:	b2db      	uxtb	r3, r3
}
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
	...

080027e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b089      	sub	sp, #36	; 0x24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
 8002802:	e16b      	b.n	8002adc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002804:	2201      	movs	r2, #1
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	4013      	ands	r3, r2
 8002816:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	429a      	cmp	r2, r3
 800281e:	f040 815a 	bne.w	8002ad6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	2b01      	cmp	r3, #1
 800282c:	d005      	beq.n	800283a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002836:	2b02      	cmp	r3, #2
 8002838:	d130      	bne.n	800289c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	2203      	movs	r2, #3
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4013      	ands	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002870:	2201      	movs	r2, #1
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	f003 0201 	and.w	r2, r3, #1
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d017      	beq.n	80028d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	2203      	movs	r2, #3
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 0303 	and.w	r3, r3, #3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d123      	bne.n	800292c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	08da      	lsrs	r2, r3, #3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3208      	adds	r2, #8
 80028ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	220f      	movs	r2, #15
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	08da      	lsrs	r2, r3, #3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3208      	adds	r2, #8
 8002926:	69b9      	ldr	r1, [r7, #24]
 8002928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	2203      	movs	r2, #3
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 0203 	and.w	r2, r3, #3
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 80b4 	beq.w	8002ad6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	4b60      	ldr	r3, [pc, #384]	; (8002af4 <HAL_GPIO_Init+0x30c>)
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	4a5f      	ldr	r2, [pc, #380]	; (8002af4 <HAL_GPIO_Init+0x30c>)
 8002978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800297c:	6453      	str	r3, [r2, #68]	; 0x44
 800297e:	4b5d      	ldr	r3, [pc, #372]	; (8002af4 <HAL_GPIO_Init+0x30c>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800298a:	4a5b      	ldr	r2, [pc, #364]	; (8002af8 <HAL_GPIO_Init+0x310>)
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	089b      	lsrs	r3, r3, #2
 8002990:	3302      	adds	r3, #2
 8002992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	220f      	movs	r2, #15
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a52      	ldr	r2, [pc, #328]	; (8002afc <HAL_GPIO_Init+0x314>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d02b      	beq.n	8002a0e <HAL_GPIO_Init+0x226>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a51      	ldr	r2, [pc, #324]	; (8002b00 <HAL_GPIO_Init+0x318>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d025      	beq.n	8002a0a <HAL_GPIO_Init+0x222>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a50      	ldr	r2, [pc, #320]	; (8002b04 <HAL_GPIO_Init+0x31c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d01f      	beq.n	8002a06 <HAL_GPIO_Init+0x21e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a4f      	ldr	r2, [pc, #316]	; (8002b08 <HAL_GPIO_Init+0x320>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d019      	beq.n	8002a02 <HAL_GPIO_Init+0x21a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a4e      	ldr	r2, [pc, #312]	; (8002b0c <HAL_GPIO_Init+0x324>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d013      	beq.n	80029fe <HAL_GPIO_Init+0x216>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a4d      	ldr	r2, [pc, #308]	; (8002b10 <HAL_GPIO_Init+0x328>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00d      	beq.n	80029fa <HAL_GPIO_Init+0x212>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a4c      	ldr	r2, [pc, #304]	; (8002b14 <HAL_GPIO_Init+0x32c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d007      	beq.n	80029f6 <HAL_GPIO_Init+0x20e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a4b      	ldr	r2, [pc, #300]	; (8002b18 <HAL_GPIO_Init+0x330>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d101      	bne.n	80029f2 <HAL_GPIO_Init+0x20a>
 80029ee:	2307      	movs	r3, #7
 80029f0:	e00e      	b.n	8002a10 <HAL_GPIO_Init+0x228>
 80029f2:	2308      	movs	r3, #8
 80029f4:	e00c      	b.n	8002a10 <HAL_GPIO_Init+0x228>
 80029f6:	2306      	movs	r3, #6
 80029f8:	e00a      	b.n	8002a10 <HAL_GPIO_Init+0x228>
 80029fa:	2305      	movs	r3, #5
 80029fc:	e008      	b.n	8002a10 <HAL_GPIO_Init+0x228>
 80029fe:	2304      	movs	r3, #4
 8002a00:	e006      	b.n	8002a10 <HAL_GPIO_Init+0x228>
 8002a02:	2303      	movs	r3, #3
 8002a04:	e004      	b.n	8002a10 <HAL_GPIO_Init+0x228>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e002      	b.n	8002a10 <HAL_GPIO_Init+0x228>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <HAL_GPIO_Init+0x228>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	69fa      	ldr	r2, [r7, #28]
 8002a12:	f002 0203 	and.w	r2, r2, #3
 8002a16:	0092      	lsls	r2, r2, #2
 8002a18:	4093      	lsls	r3, r2
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a20:	4935      	ldr	r1, [pc, #212]	; (8002af8 <HAL_GPIO_Init+0x310>)
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	089b      	lsrs	r3, r3, #2
 8002a26:	3302      	adds	r3, #2
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a2e:	4b3b      	ldr	r3, [pc, #236]	; (8002b1c <HAL_GPIO_Init+0x334>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a52:	4a32      	ldr	r2, [pc, #200]	; (8002b1c <HAL_GPIO_Init+0x334>)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a58:	4b30      	ldr	r3, [pc, #192]	; (8002b1c <HAL_GPIO_Init+0x334>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a7c:	4a27      	ldr	r2, [pc, #156]	; (8002b1c <HAL_GPIO_Init+0x334>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a82:	4b26      	ldr	r3, [pc, #152]	; (8002b1c <HAL_GPIO_Init+0x334>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aa6:	4a1d      	ldr	r2, [pc, #116]	; (8002b1c <HAL_GPIO_Init+0x334>)
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aac:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <HAL_GPIO_Init+0x334>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ad0:	4a12      	ldr	r2, [pc, #72]	; (8002b1c <HAL_GPIO_Init+0x334>)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	61fb      	str	r3, [r7, #28]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b0f      	cmp	r3, #15
 8002ae0:	f67f ae90 	bls.w	8002804 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	3724      	adds	r7, #36	; 0x24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40013800 	.word	0x40013800
 8002afc:	40020000 	.word	0x40020000
 8002b00:	40020400 	.word	0x40020400
 8002b04:	40020800 	.word	0x40020800
 8002b08:	40020c00 	.word	0x40020c00
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40021400 	.word	0x40021400
 8002b14:	40021800 	.word	0x40021800
 8002b18:	40021c00 	.word	0x40021c00
 8002b1c:	40013c00 	.word	0x40013c00

08002b20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691a      	ldr	r2, [r3, #16]
 8002b30:	887b      	ldrh	r3, [r7, #2]
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d002      	beq.n	8002b3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
 8002b3c:	e001      	b.n	8002b42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	807b      	strh	r3, [r7, #2]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b60:	787b      	ldrb	r3, [r7, #1]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b66:	887a      	ldrh	r2, [r7, #2]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b6c:	e003      	b.n	8002b76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b6e:	887b      	ldrh	r3, [r7, #2]
 8002b70:	041a      	lsls	r2, r3, #16
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	619a      	str	r2, [r3, #24]
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
	...

08002b84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e12b      	b.n	8002dee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d106      	bne.n	8002bb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7fe f93a 	bl	8000e24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2224      	movs	r2, #36	; 0x24
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0201 	bic.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002be6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002be8:	f002 fb5e 	bl	80052a8 <HAL_RCC_GetPCLK1Freq>
 8002bec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4a81      	ldr	r2, [pc, #516]	; (8002df8 <HAL_I2C_Init+0x274>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d807      	bhi.n	8002c08 <HAL_I2C_Init+0x84>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4a80      	ldr	r2, [pc, #512]	; (8002dfc <HAL_I2C_Init+0x278>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	bf94      	ite	ls
 8002c00:	2301      	movls	r3, #1
 8002c02:	2300      	movhi	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	e006      	b.n	8002c16 <HAL_I2C_Init+0x92>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4a7d      	ldr	r2, [pc, #500]	; (8002e00 <HAL_I2C_Init+0x27c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	bf94      	ite	ls
 8002c10:	2301      	movls	r3, #1
 8002c12:	2300      	movhi	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e0e7      	b.n	8002dee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4a78      	ldr	r2, [pc, #480]	; (8002e04 <HAL_I2C_Init+0x280>)
 8002c22:	fba2 2303 	umull	r2, r3, r2, r3
 8002c26:	0c9b      	lsrs	r3, r3, #18
 8002c28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	4a6a      	ldr	r2, [pc, #424]	; (8002df8 <HAL_I2C_Init+0x274>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d802      	bhi.n	8002c58 <HAL_I2C_Init+0xd4>
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	3301      	adds	r3, #1
 8002c56:	e009      	b.n	8002c6c <HAL_I2C_Init+0xe8>
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c5e:	fb02 f303 	mul.w	r3, r2, r3
 8002c62:	4a69      	ldr	r2, [pc, #420]	; (8002e08 <HAL_I2C_Init+0x284>)
 8002c64:	fba2 2303 	umull	r2, r3, r2, r3
 8002c68:	099b      	lsrs	r3, r3, #6
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6812      	ldr	r2, [r2, #0]
 8002c70:	430b      	orrs	r3, r1
 8002c72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	495c      	ldr	r1, [pc, #368]	; (8002df8 <HAL_I2C_Init+0x274>)
 8002c88:	428b      	cmp	r3, r1
 8002c8a:	d819      	bhi.n	8002cc0 <HAL_I2C_Init+0x13c>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	1e59      	subs	r1, r3, #1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c9a:	1c59      	adds	r1, r3, #1
 8002c9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ca0:	400b      	ands	r3, r1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HAL_I2C_Init+0x138>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1e59      	subs	r1, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cba:	e051      	b.n	8002d60 <HAL_I2C_Init+0x1dc>
 8002cbc:	2304      	movs	r3, #4
 8002cbe:	e04f      	b.n	8002d60 <HAL_I2C_Init+0x1dc>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d111      	bne.n	8002cec <HAL_I2C_Init+0x168>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	1e58      	subs	r0, r3, #1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6859      	ldr	r1, [r3, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	440b      	add	r3, r1
 8002cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cda:	3301      	adds	r3, #1
 8002cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	bf0c      	ite	eq
 8002ce4:	2301      	moveq	r3, #1
 8002ce6:	2300      	movne	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	e012      	b.n	8002d12 <HAL_I2C_Init+0x18e>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1e58      	subs	r0, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6859      	ldr	r1, [r3, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	0099      	lsls	r1, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d02:	3301      	adds	r3, #1
 8002d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	bf0c      	ite	eq
 8002d0c:	2301      	moveq	r3, #1
 8002d0e:	2300      	movne	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_I2C_Init+0x196>
 8002d16:	2301      	movs	r3, #1
 8002d18:	e022      	b.n	8002d60 <HAL_I2C_Init+0x1dc>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10e      	bne.n	8002d40 <HAL_I2C_Init+0x1bc>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	1e58      	subs	r0, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6859      	ldr	r1, [r3, #4]
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	440b      	add	r3, r1
 8002d30:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d34:	3301      	adds	r3, #1
 8002d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d3e:	e00f      	b.n	8002d60 <HAL_I2C_Init+0x1dc>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	1e58      	subs	r0, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6859      	ldr	r1, [r3, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	0099      	lsls	r1, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d56:	3301      	adds	r3, #1
 8002d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	6809      	ldr	r1, [r1, #0]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69da      	ldr	r2, [r3, #28]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6911      	ldr	r1, [r2, #16]
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	68d2      	ldr	r2, [r2, #12]
 8002d9a:	4311      	orrs	r1, r2
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	430b      	orrs	r3, r1
 8002da2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	695a      	ldr	r2, [r3, #20]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	000186a0 	.word	0x000186a0
 8002dfc:	001e847f 	.word	0x001e847f
 8002e00:	003d08ff 	.word	0x003d08ff
 8002e04:	431bde83 	.word	0x431bde83
 8002e08:	10624dd3 	.word	0x10624dd3

08002e0c <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	4608      	mov	r0, r1
 8002e16:	4611      	mov	r1, r2
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	817b      	strh	r3, [r7, #10]
 8002e1e:	460b      	mov	r3, r1
 8002e20:	813b      	strh	r3, [r7, #8]
 8002e22:	4613      	mov	r3, r2
 8002e24:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	f040 808e 	bne.w	8002f54 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e38:	4b4a      	ldr	r3, [pc, #296]	; (8002f64 <HAL_I2C_Mem_Write_IT+0x158>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	08db      	lsrs	r3, r3, #3
 8002e3e:	4a4a      	ldr	r2, [pc, #296]	; (8002f68 <HAL_I2C_Mem_Write_IT+0x15c>)
 8002e40:	fba2 2303 	umull	r2, r3, r2, r3
 8002e44:	0a1a      	lsrs	r2, r3, #8
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	009a      	lsls	r2, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d116      	bne.n	8002e8c <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	f043 0220 	orr.w	r2, r3, #32
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e064      	b.n	8002f56 <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d0db      	beq.n	8002e52 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_I2C_Mem_Write_IT+0x9c>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e056      	b.n	8002f56 <HAL_I2C_Mem_Write_IT+0x14a>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d007      	beq.n	8002ece <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 0201 	orr.w	r2, r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002edc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2221      	movs	r2, #33	; 0x21
 8002ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2240      	movs	r2, #64	; 0x40
 8002eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a3a      	ldr	r2, [r7, #32]
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002efe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4a17      	ldr	r2, [pc, #92]	; (8002f6c <HAL_I2C_Mem_Write_IT+0x160>)
 8002f0e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002f10:	897a      	ldrh	r2, [r7, #10]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8002f16:	893a      	ldrh	r2, [r7, #8]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f36:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002f4e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	e000      	b.n	8002f56 <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002f54:	2302      	movs	r3, #2
  }
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	371c      	adds	r7, #28
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	20000c60 	.word	0x20000c60
 8002f68:	14f8b589 	.word	0x14f8b589
 8002f6c:	ffff0000 	.word	0xffff0000

08002f70 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b087      	sub	sp, #28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	4608      	mov	r0, r1
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4603      	mov	r3, r0
 8002f80:	817b      	strh	r3, [r7, #10]
 8002f82:	460b      	mov	r3, r1
 8002f84:	813b      	strh	r3, [r7, #8]
 8002f86:	4613      	mov	r3, r2
 8002f88:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b20      	cmp	r3, #32
 8002f98:	f040 809a 	bne.w	80030d0 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f9c:	4b50      	ldr	r3, [pc, #320]	; (80030e0 <HAL_I2C_Mem_Read_IT+0x170>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	08db      	lsrs	r3, r3, #3
 8002fa2:	4a50      	ldr	r2, [pc, #320]	; (80030e4 <HAL_I2C_Mem_Read_IT+0x174>)
 8002fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa8:	0a1a      	lsrs	r2, r3, #8
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	009a      	lsls	r2, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d116      	bne.n	8002ff0 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	f043 0220 	orr.w	r2, r3, #32
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e070      	b.n	80030d2 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d0db      	beq.n	8002fb6 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_I2C_Mem_Read_IT+0x9c>
 8003008:	2302      	movs	r3, #2
 800300a:	e062      	b.n	80030d2 <HAL_I2C_Mem_Read_IT+0x162>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b01      	cmp	r3, #1
 8003020:	d007      	beq.n	8003032 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0201 	orr.w	r2, r2, #1
 8003030:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003040:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2222      	movs	r2, #34	; 0x22
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2240      	movs	r2, #64	; 0x40
 800304e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a3a      	ldr	r2, [r7, #32]
 800305c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003062:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4a1d      	ldr	r2, [pc, #116]	; (80030e8 <HAL_I2C_Mem_Read_IT+0x178>)
 8003072:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003074:	897a      	ldrh	r2, [r7, #10]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800307a:	893a      	ldrh	r2, [r7, #8]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003080:	88fa      	ldrh	r2, [r7, #6]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800309a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030aa:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d007      	beq.n	80030cc <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80030ca:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80030cc:	2300      	movs	r3, #0
 80030ce:	e000      	b.n	80030d2 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 80030d0:	2302      	movs	r3, #2
  }
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	371c      	adds	r7, #28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	20000c60 	.word	0x20000c60
 80030e4:	14f8b589 	.word	0x14f8b589
 80030e8:	ffff0000 	.word	0xffff0000

080030ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003104:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800310c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003114:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	2b10      	cmp	r3, #16
 800311a:	d003      	beq.n	8003124 <HAL_I2C_EV_IRQHandler+0x38>
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	2b40      	cmp	r3, #64	; 0x40
 8003120:	f040 80c1 	bne.w	80032a6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10d      	bne.n	800315a <HAL_I2C_EV_IRQHandler+0x6e>
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003144:	d003      	beq.n	800314e <HAL_I2C_EV_IRQHandler+0x62>
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800314c:	d101      	bne.n	8003152 <HAL_I2C_EV_IRQHandler+0x66>
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <HAL_I2C_EV_IRQHandler+0x68>
 8003152:	2300      	movs	r3, #0
 8003154:	2b01      	cmp	r3, #1
 8003156:	f000 8132 	beq.w	80033be <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00c      	beq.n	800317e <HAL_I2C_EV_IRQHandler+0x92>
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	0a5b      	lsrs	r3, r3, #9
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d006      	beq.n	800317e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f001 fc5d 	bl	8004a30 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fd65 	bl	8003c46 <I2C_Master_SB>
 800317c:	e092      	b.n	80032a4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	08db      	lsrs	r3, r3, #3
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d009      	beq.n	800319e <HAL_I2C_EV_IRQHandler+0xb2>
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	0a5b      	lsrs	r3, r3, #9
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fddb 	bl	8003d52 <I2C_Master_ADD10>
 800319c:	e082      	b.n	80032a4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	085b      	lsrs	r3, r3, #1
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d009      	beq.n	80031be <HAL_I2C_EV_IRQHandler+0xd2>
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	0a5b      	lsrs	r3, r3, #9
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fdf5 	bl	8003da6 <I2C_Master_ADDR>
 80031bc:	e072      	b.n	80032a4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	089b      	lsrs	r3, r3, #2
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d03b      	beq.n	8003242 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031d8:	f000 80f3 	beq.w	80033c2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	09db      	lsrs	r3, r3, #7
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00f      	beq.n	8003208 <HAL_I2C_EV_IRQHandler+0x11c>
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	0a9b      	lsrs	r3, r3, #10
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d009      	beq.n	8003208 <HAL_I2C_EV_IRQHandler+0x11c>
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	089b      	lsrs	r3, r3, #2
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d103      	bne.n	8003208 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f9df 	bl	80035c4 <I2C_MasterTransmit_TXE>
 8003206:	e04d      	b.n	80032a4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	089b      	lsrs	r3, r3, #2
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80d6 	beq.w	80033c2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	0a5b      	lsrs	r3, r3, #9
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 80cf 	beq.w	80033c2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003224:	7bbb      	ldrb	r3, [r7, #14]
 8003226:	2b21      	cmp	r3, #33	; 0x21
 8003228:	d103      	bne.n	8003232 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 fa66 	bl	80036fc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003230:	e0c7      	b.n	80033c2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003232:	7bfb      	ldrb	r3, [r7, #15]
 8003234:	2b40      	cmp	r3, #64	; 0x40
 8003236:	f040 80c4 	bne.w	80033c2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fad4 	bl	80037e8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003240:	e0bf      	b.n	80033c2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800324c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003250:	f000 80b7 	beq.w	80033c2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	099b      	lsrs	r3, r3, #6
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00f      	beq.n	8003280 <HAL_I2C_EV_IRQHandler+0x194>
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	0a9b      	lsrs	r3, r3, #10
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d009      	beq.n	8003280 <HAL_I2C_EV_IRQHandler+0x194>
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	089b      	lsrs	r3, r3, #2
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d103      	bne.n	8003280 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 fb49 	bl	8003910 <I2C_MasterReceive_RXNE>
 800327e:	e011      	b.n	80032a4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	089b      	lsrs	r3, r3, #2
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 809a 	beq.w	80033c2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	0a5b      	lsrs	r3, r3, #9
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 8093 	beq.w	80033c2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 fbe8 	bl	8003a72 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032a2:	e08e      	b.n	80033c2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80032a4:	e08d      	b.n	80033c2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d004      	beq.n	80032b8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	61fb      	str	r3, [r7, #28]
 80032b6:	e007      	b.n	80032c8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	085b      	lsrs	r3, r3, #1
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d012      	beq.n	80032fa <HAL_I2C_EV_IRQHandler+0x20e>
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	0a5b      	lsrs	r3, r3, #9
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00c      	beq.n	80032fa <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80032f0:	69b9      	ldr	r1, [r7, #24]
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 ffa6 	bl	8004244 <I2C_Slave_ADDR>
 80032f8:	e066      	b.n	80033c8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	091b      	lsrs	r3, r3, #4
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <HAL_I2C_EV_IRQHandler+0x22e>
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	0a5b      	lsrs	r3, r3, #9
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 ffe0 	bl	80042d8 <I2C_Slave_STOPF>
 8003318:	e056      	b.n	80033c8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800331a:	7bbb      	ldrb	r3, [r7, #14]
 800331c:	2b21      	cmp	r3, #33	; 0x21
 800331e:	d002      	beq.n	8003326 <HAL_I2C_EV_IRQHandler+0x23a>
 8003320:	7bbb      	ldrb	r3, [r7, #14]
 8003322:	2b29      	cmp	r3, #41	; 0x29
 8003324:	d125      	bne.n	8003372 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	09db      	lsrs	r3, r3, #7
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00f      	beq.n	8003352 <HAL_I2C_EV_IRQHandler+0x266>
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	0a9b      	lsrs	r3, r3, #10
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d009      	beq.n	8003352 <HAL_I2C_EV_IRQHandler+0x266>
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	089b      	lsrs	r3, r3, #2
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d103      	bne.n	8003352 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 febc 	bl	80040c8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003350:	e039      	b.n	80033c6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	089b      	lsrs	r3, r3, #2
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d033      	beq.n	80033c6 <HAL_I2C_EV_IRQHandler+0x2da>
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	0a5b      	lsrs	r3, r3, #9
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d02d      	beq.n	80033c6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fee9 	bl	8004142 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003370:	e029      	b.n	80033c6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	099b      	lsrs	r3, r3, #6
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00f      	beq.n	800339e <HAL_I2C_EV_IRQHandler+0x2b2>
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	0a9b      	lsrs	r3, r3, #10
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d009      	beq.n	800339e <HAL_I2C_EV_IRQHandler+0x2b2>
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	089b      	lsrs	r3, r3, #2
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d103      	bne.n	800339e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 fef4 	bl	8004184 <I2C_SlaveReceive_RXNE>
 800339c:	e014      	b.n	80033c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	089b      	lsrs	r3, r3, #2
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00e      	beq.n	80033c8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	0a5b      	lsrs	r3, r3, #9
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d008      	beq.n	80033c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 ff22 	bl	8004200 <I2C_SlaveReceive_BTF>
 80033bc:	e004      	b.n	80033c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80033be:	bf00      	nop
 80033c0:	e002      	b.n	80033c8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033c2:	bf00      	nop
 80033c4:	e000      	b.n	80033c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033c6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80033c8:	3720      	adds	r7, #32
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b08a      	sub	sp, #40	; 0x28
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80033e6:	2300      	movs	r3, #0
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033f0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	0a1b      	lsrs	r3, r3, #8
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00e      	beq.n	800341c <HAL_I2C_ER_IRQHandler+0x4e>
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	0a1b      	lsrs	r3, r3, #8
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d008      	beq.n	800341c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800341a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	0a5b      	lsrs	r3, r3, #9
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00e      	beq.n	8003446 <HAL_I2C_ER_IRQHandler+0x78>
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	0a1b      	lsrs	r3, r3, #8
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d008      	beq.n	8003446 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	f043 0302 	orr.w	r3, r3, #2
 800343a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003444:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	0a9b      	lsrs	r3, r3, #10
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d03f      	beq.n	80034d2 <HAL_I2C_ER_IRQHandler+0x104>
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	0a1b      	lsrs	r3, r3, #8
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d039      	beq.n	80034d2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800345e:	7efb      	ldrb	r3, [r7, #27]
 8003460:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003466:	b29b      	uxth	r3, r3
 8003468:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003470:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003478:	7ebb      	ldrb	r3, [r7, #26]
 800347a:	2b20      	cmp	r3, #32
 800347c:	d112      	bne.n	80034a4 <HAL_I2C_ER_IRQHandler+0xd6>
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10f      	bne.n	80034a4 <HAL_I2C_ER_IRQHandler+0xd6>
 8003484:	7cfb      	ldrb	r3, [r7, #19]
 8003486:	2b21      	cmp	r3, #33	; 0x21
 8003488:	d008      	beq.n	800349c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800348a:	7cfb      	ldrb	r3, [r7, #19]
 800348c:	2b29      	cmp	r3, #41	; 0x29
 800348e:	d005      	beq.n	800349c <HAL_I2C_ER_IRQHandler+0xce>
 8003490:	7cfb      	ldrb	r3, [r7, #19]
 8003492:	2b28      	cmp	r3, #40	; 0x28
 8003494:	d106      	bne.n	80034a4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2b21      	cmp	r3, #33	; 0x21
 800349a:	d103      	bne.n	80034a4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f001 f84b 	bl	8004538 <I2C_Slave_AF>
 80034a2:	e016      	b.n	80034d2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034ac:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	f043 0304 	orr.w	r3, r3, #4
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80034b6:	7efb      	ldrb	r3, [r7, #27]
 80034b8:	2b10      	cmp	r3, #16
 80034ba:	d002      	beq.n	80034c2 <HAL_I2C_ER_IRQHandler+0xf4>
 80034bc:	7efb      	ldrb	r3, [r7, #27]
 80034be:	2b40      	cmp	r3, #64	; 0x40
 80034c0:	d107      	bne.n	80034d2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	0adb      	lsrs	r3, r3, #11
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00e      	beq.n	80034fc <HAL_I2C_ER_IRQHandler+0x12e>
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	0a1b      	lsrs	r3, r3, #8
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d008      	beq.n	80034fc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	f043 0308 	orr.w	r3, r3, #8
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80034fa:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d008      	beq.n	8003514 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f001 f882 	bl	8004618 <I2C_ITError>
  }
}
 8003514:	bf00      	nop
 8003516:	3728      	adds	r7, #40	; 0x28
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	460b      	mov	r3, r1
 8003576:	70fb      	strb	r3, [r7, #3]
 8003578:	4613      	mov	r3, r2
 800357a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035da:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d150      	bne.n	800368c <I2C_MasterTransmit_TXE+0xc8>
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	2b21      	cmp	r3, #33	; 0x21
 80035ee:	d14d      	bne.n	800368c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d01d      	beq.n	8003632 <I2C_MasterTransmit_TXE+0x6e>
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2b20      	cmp	r3, #32
 80035fa:	d01a      	beq.n	8003632 <I2C_MasterTransmit_TXE+0x6e>
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003602:	d016      	beq.n	8003632 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003612:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2211      	movs	r2, #17
 8003618:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2220      	movs	r2, #32
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff ff76 	bl	800351c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003630:	e060      	b.n	80036f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003640:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003650:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b40      	cmp	r3, #64	; 0x40
 800366a:	d107      	bne.n	800367c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7fd fe01 	bl	800127c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800367a:	e03b      	b.n	80036f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff ff49 	bl	800351c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800368a:	e033      	b.n	80036f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	2b21      	cmp	r3, #33	; 0x21
 8003690:	d005      	beq.n	800369e <I2C_MasterTransmit_TXE+0xda>
 8003692:	7bbb      	ldrb	r3, [r7, #14]
 8003694:	2b40      	cmp	r3, #64	; 0x40
 8003696:	d12d      	bne.n	80036f4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003698:	7bfb      	ldrb	r3, [r7, #15]
 800369a:	2b22      	cmp	r3, #34	; 0x22
 800369c:	d12a      	bne.n	80036f4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d108      	bne.n	80036ba <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80036b8:	e01c      	b.n	80036f4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b40      	cmp	r3, #64	; 0x40
 80036c4:	d103      	bne.n	80036ce <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f88e 	bl	80037e8 <I2C_MemoryTransmit_TXE_BTF>
}
 80036cc:	e012      	b.n	80036f4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	781a      	ldrb	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	1c5a      	adds	r2, r3, #1
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80036f2:	e7ff      	b.n	80036f4 <I2C_MasterTransmit_TXE+0x130>
 80036f4:	bf00      	nop
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b21      	cmp	r3, #33	; 0x21
 8003714:	d164      	bne.n	80037e0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371a:	b29b      	uxth	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d012      	beq.n	8003746 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	781a      	ldrb	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003744:	e04c      	b.n	80037e0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2b08      	cmp	r3, #8
 800374a:	d01d      	beq.n	8003788 <I2C_MasterTransmit_BTF+0x8c>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b20      	cmp	r3, #32
 8003750:	d01a      	beq.n	8003788 <I2C_MasterTransmit_BTF+0x8c>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003758:	d016      	beq.n	8003788 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003768:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2211      	movs	r2, #17
 800376e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7ff fecb 	bl	800351c <HAL_I2C_MasterTxCpltCallback>
}
 8003786:	e02b      	b.n	80037e0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003796:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b40      	cmp	r3, #64	; 0x40
 80037c0:	d107      	bne.n	80037d2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fd fd56 	bl	800127c <HAL_I2C_MemTxCpltCallback>
}
 80037d0:	e006      	b.n	80037e0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff fe9e 	bl	800351c <HAL_I2C_MasterTxCpltCallback>
}
 80037e0:	bf00      	nop
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d11d      	bne.n	800383c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003804:	2b01      	cmp	r3, #1
 8003806:	d10b      	bne.n	8003820 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800380c:	b2da      	uxtb	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003818:	1c9a      	adds	r2, r3, #2
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800381e:	e073      	b.n	8003908 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003824:	b29b      	uxth	r3, r3
 8003826:	121b      	asrs	r3, r3, #8
 8003828:	b2da      	uxtb	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	651a      	str	r2, [r3, #80]	; 0x50
}
 800383a:	e065      	b.n	8003908 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003840:	2b01      	cmp	r3, #1
 8003842:	d10b      	bne.n	800385c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003848:	b2da      	uxtb	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	651a      	str	r2, [r3, #80]	; 0x50
}
 800385a:	e055      	b.n	8003908 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003860:	2b02      	cmp	r3, #2
 8003862:	d151      	bne.n	8003908 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	2b22      	cmp	r3, #34	; 0x22
 8003868:	d10d      	bne.n	8003886 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003878:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003884:	e040      	b.n	8003908 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388a:	b29b      	uxth	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d015      	beq.n	80038bc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	2b21      	cmp	r3, #33	; 0x21
 8003894:	d112      	bne.n	80038bc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	781a      	ldrb	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038ba:	e025      	b.n	8003908 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d120      	bne.n	8003908 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	2b21      	cmp	r3, #33	; 0x21
 80038ca:	d11d      	bne.n	8003908 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038da:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7fd fcba 	bl	800127c <HAL_I2C_MemTxCpltCallback>
}
 8003908:	bf00      	nop
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b22      	cmp	r3, #34	; 0x22
 8003922:	f040 80a2 	bne.w	8003a6a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392a:	b29b      	uxth	r3, r3
 800392c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2b03      	cmp	r3, #3
 8003932:	d921      	bls.n	8003978 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691a      	ldr	r2, [r3, #16]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b03      	cmp	r3, #3
 8003962:	f040 8082 	bne.w	8003a6a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003974:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003976:	e078      	b.n	8003a6a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	2b02      	cmp	r3, #2
 800397e:	d074      	beq.n	8003a6a <I2C_MasterReceive_RXNE+0x15a>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d002      	beq.n	800398c <I2C_MasterReceive_RXNE+0x7c>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d16e      	bne.n	8003a6a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f001 f81d 	bl	80049cc <I2C_WaitOnSTOPRequestThroughIT>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d142      	bne.n	8003a1e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039a6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039b6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691a      	ldr	r2, [r3, #16]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b29a      	uxth	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b40      	cmp	r3, #64	; 0x40
 80039f0:	d10a      	bne.n	8003a08 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7fd fc51 	bl	80012a8 <HAL_I2C_MemRxCpltCallback>
}
 8003a06:	e030      	b.n	8003a6a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2212      	movs	r2, #18
 8003a14:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7ff fd8a 	bl	8003530 <HAL_I2C_MasterRxCpltCallback>
}
 8003a1c:	e025      	b.n	8003a6a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a2c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff fd99 	bl	800359c <HAL_I2C_ErrorCallback>
}
 8003a6a:	bf00      	nop
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d11b      	bne.n	8003ac2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a98:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003ac0:	e0bd      	b.n	8003c3e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d129      	bne.n	8003b20 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ada:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d00a      	beq.n	8003af8 <I2C_MasterReceive_BTF+0x86>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d007      	beq.n	8003af8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b1e:	e08e      	b.n	8003c3e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d176      	bne.n	8003c18 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d002      	beq.n	8003b36 <I2C_MasterReceive_BTF+0xc4>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b10      	cmp	r3, #16
 8003b34:	d108      	bne.n	8003b48 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	e019      	b.n	8003b7c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d002      	beq.n	8003b54 <I2C_MasterReceive_BTF+0xe2>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d108      	bne.n	8003b66 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	e00a      	b.n	8003b7c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b10      	cmp	r3, #16
 8003b6a:	d007      	beq.n	8003b7c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691a      	ldr	r2, [r3, #16]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	691a      	ldr	r2, [r3, #16]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003bd6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b40      	cmp	r3, #64	; 0x40
 8003bea:	d10a      	bne.n	8003c02 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fd fb54 	bl	80012a8 <HAL_I2C_MemRxCpltCallback>
}
 8003c00:	e01d      	b.n	8003c3e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2212      	movs	r2, #18
 8003c0e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff fc8d 	bl	8003530 <HAL_I2C_MasterRxCpltCallback>
}
 8003c16:	e012      	b.n	8003c3e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691a      	ldr	r2, [r3, #16]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c3e:	bf00      	nop
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b40      	cmp	r3, #64	; 0x40
 8003c58:	d117      	bne.n	8003c8a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d109      	bne.n	8003c76 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	461a      	mov	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c72:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003c74:	e067      	b.n	8003d46 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	611a      	str	r2, [r3, #16]
}
 8003c88:	e05d      	b.n	8003d46 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c92:	d133      	bne.n	8003cfc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b21      	cmp	r3, #33	; 0x21
 8003c9e:	d109      	bne.n	8003cb4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cb0:	611a      	str	r2, [r3, #16]
 8003cb2:	e008      	b.n	8003cc6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	f043 0301 	orr.w	r3, r3, #1
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d004      	beq.n	8003cd8 <I2C_Master_SB+0x92>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d108      	bne.n	8003cea <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d032      	beq.n	8003d46 <I2C_Master_SB+0x100>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d02d      	beq.n	8003d46 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cf8:	605a      	str	r2, [r3, #4]
}
 8003cfa:	e024      	b.n	8003d46 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10e      	bne.n	8003d22 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	11db      	asrs	r3, r3, #7
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	f003 0306 	and.w	r3, r3, #6
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	f063 030f 	orn	r3, r3, #15
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	611a      	str	r2, [r3, #16]
}
 8003d20:	e011      	b.n	8003d46 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d10d      	bne.n	8003d46 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	11db      	asrs	r3, r3, #7
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	f003 0306 	and.w	r3, r3, #6
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	f063 030e 	orn	r3, r3, #14
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	611a      	str	r2, [r3, #16]
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d004      	beq.n	8003d78 <I2C_Master_ADD10+0x26>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d108      	bne.n	8003d8a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00c      	beq.n	8003d9a <I2C_Master_ADD10+0x48>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d007      	beq.n	8003d9a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d98:	605a      	str	r2, [r3, #4]
  }
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b091      	sub	sp, #68	; 0x44
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003db4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b22      	cmp	r3, #34	; 0x22
 8003dce:	f040 8169 	bne.w	80040a4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10f      	bne.n	8003dfa <I2C_Master_ADDR+0x54>
 8003dda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003dde:	2b40      	cmp	r3, #64	; 0x40
 8003de0:	d10b      	bne.n	8003dfa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de2:	2300      	movs	r3, #0
 8003de4:	633b      	str	r3, [r7, #48]	; 0x30
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	633b      	str	r3, [r7, #48]	; 0x30
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	633b      	str	r3, [r7, #48]	; 0x30
 8003df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df8:	e160      	b.n	80040bc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d11d      	bne.n	8003e3e <I2C_Master_ADDR+0x98>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e0a:	d118      	bne.n	8003e3e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e30:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	651a      	str	r2, [r3, #80]	; 0x50
 8003e3c:	e13e      	b.n	80040bc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d113      	bne.n	8003e70 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e48:	2300      	movs	r3, #0
 8003e4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	e115      	b.n	800409c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	f040 808a 	bne.w	8003f90 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e82:	d137      	bne.n	8003ef4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e92:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ea2:	d113      	bne.n	8003ecc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	e0e7      	b.n	800409c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ecc:	2300      	movs	r3, #0
 8003ece:	623b      	str	r3, [r7, #32]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	623b      	str	r3, [r7, #32]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	623b      	str	r3, [r7, #32]
 8003ee0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	e0d3      	b.n	800409c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d02e      	beq.n	8003f58 <I2C_Master_ADDR+0x1b2>
 8003efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	d02b      	beq.n	8003f58 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f02:	2b12      	cmp	r3, #18
 8003f04:	d102      	bne.n	8003f0c <I2C_Master_ADDR+0x166>
 8003f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d125      	bne.n	8003f58 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d00e      	beq.n	8003f30 <I2C_Master_ADDR+0x18a>
 8003f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d00b      	beq.n	8003f30 <I2C_Master_ADDR+0x18a>
 8003f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1a:	2b10      	cmp	r3, #16
 8003f1c:	d008      	beq.n	8003f30 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	e007      	b.n	8003f40 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f3e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f40:	2300      	movs	r3, #0
 8003f42:	61fb      	str	r3, [r7, #28]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	61fb      	str	r3, [r7, #28]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	61fb      	str	r3, [r7, #28]
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	e0a1      	b.n	800409c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f66:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f68:	2300      	movs	r3, #0
 8003f6a:	61bb      	str	r3, [r7, #24]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	61bb      	str	r3, [r7, #24]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	61bb      	str	r3, [r7, #24]
 8003f7c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	e085      	b.n	800409c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d14d      	bne.n	8004036 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d016      	beq.n	8003fce <I2C_Master_ADDR+0x228>
 8003fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d013      	beq.n	8003fce <I2C_Master_ADDR+0x228>
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa8:	2b10      	cmp	r3, #16
 8003faa:	d010      	beq.n	8003fce <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fba:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	e007      	b.n	8003fde <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fdc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fe8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fec:	d117      	bne.n	800401e <I2C_Master_ADDR+0x278>
 8003fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ff4:	d00b      	beq.n	800400e <I2C_Master_ADDR+0x268>
 8003ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d008      	beq.n	800400e <I2C_Master_ADDR+0x268>
 8003ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d005      	beq.n	800400e <I2C_Master_ADDR+0x268>
 8004002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004004:	2b10      	cmp	r3, #16
 8004006:	d002      	beq.n	800400e <I2C_Master_ADDR+0x268>
 8004008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400a:	2b20      	cmp	r3, #32
 800400c:	d107      	bne.n	800401e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800401c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	e032      	b.n	800409c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004044:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004050:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004054:	d117      	bne.n	8004086 <I2C_Master_ADDR+0x2e0>
 8004056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004058:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800405c:	d00b      	beq.n	8004076 <I2C_Master_ADDR+0x2d0>
 800405e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004060:	2b01      	cmp	r3, #1
 8004062:	d008      	beq.n	8004076 <I2C_Master_ADDR+0x2d0>
 8004064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004066:	2b08      	cmp	r3, #8
 8004068:	d005      	beq.n	8004076 <I2C_Master_ADDR+0x2d0>
 800406a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406c:	2b10      	cmp	r3, #16
 800406e:	d002      	beq.n	8004076 <I2C_Master_ADDR+0x2d0>
 8004070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004072:	2b20      	cmp	r3, #32
 8004074:	d107      	bne.n	8004086 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004084:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004086:	2300      	movs	r3, #0
 8004088:	613b      	str	r3, [r7, #16]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	613b      	str	r3, [r7, #16]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80040a2:	e00b      	b.n	80040bc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040a4:	2300      	movs	r3, #0
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	68fb      	ldr	r3, [r7, #12]
}
 80040ba:	e7ff      	b.n	80040bc <I2C_Master_ADDR+0x316>
 80040bc:	bf00      	nop
 80040be:	3744      	adds	r7, #68	; 0x44
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d02b      	beq.n	800413a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	781a      	ldrb	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d114      	bne.n	800413a <I2C_SlaveTransmit_TXE+0x72>
 8004110:	7bfb      	ldrb	r3, [r7, #15]
 8004112:	2b29      	cmp	r3, #41	; 0x29
 8004114:	d111      	bne.n	800413a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004124:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2221      	movs	r2, #33	; 0x21
 800412a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2228      	movs	r2, #40	; 0x28
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff fa05 	bl	8003544 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800413a:	bf00      	nop
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d011      	beq.n	8004178 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	781a      	ldrb	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416e:	b29b      	uxth	r3, r3
 8004170:	3b01      	subs	r3, #1
 8004172:	b29a      	uxth	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004192:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d02c      	beq.n	80041f8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	691a      	ldr	r2, [r3, #16]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	1c5a      	adds	r2, r3, #1
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d114      	bne.n	80041f8 <I2C_SlaveReceive_RXNE+0x74>
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	2b2a      	cmp	r3, #42	; 0x2a
 80041d2:	d111      	bne.n	80041f8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2222      	movs	r2, #34	; 0x22
 80041e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2228      	movs	r2, #40	; 0x28
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7ff f9b0 	bl	8003558 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80041f8:	bf00      	nop
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d012      	beq.n	8004238 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800424e:	2300      	movs	r3, #0
 8004250:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004258:	b2db      	uxtb	r3, r3
 800425a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800425e:	2b28      	cmp	r3, #40	; 0x28
 8004260:	d127      	bne.n	80042b2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004270:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	089b      	lsrs	r3, r3, #2
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800427e:	2301      	movs	r3, #1
 8004280:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	09db      	lsrs	r3, r3, #7
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d103      	bne.n	8004296 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	81bb      	strh	r3, [r7, #12]
 8004294:	e002      	b.n	800429c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80042a4:	89ba      	ldrh	r2, [r7, #12]
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
 80042a8:	4619      	mov	r1, r3
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7ff f95e 	bl	800356c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80042b0:	e00e      	b.n	80042d0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042b2:	2300      	movs	r3, #0
 80042b4:	60bb      	str	r3, [r7, #8]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	60bb      	str	r3, [r7, #8]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80042d0:	bf00      	nop
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042f6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80042f8:	2300      	movs	r3, #0
 80042fa:	60bb      	str	r3, [r7, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	60bb      	str	r3, [r7, #8]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004324:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004334:	d172      	bne.n	800441c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004336:	7bfb      	ldrb	r3, [r7, #15]
 8004338:	2b22      	cmp	r3, #34	; 0x22
 800433a:	d002      	beq.n	8004342 <I2C_Slave_STOPF+0x6a>
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	2b2a      	cmp	r3, #42	; 0x2a
 8004340:	d135      	bne.n	80043ae <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	b29a      	uxth	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d005      	beq.n	8004366 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	f043 0204 	orr.w	r2, r3, #4
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004374:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	4618      	mov	r0, r3
 800437c:	f7fe fa25 	bl	80027ca <HAL_DMA_GetState>
 8004380:	4603      	mov	r3, r0
 8004382:	2b01      	cmp	r3, #1
 8004384:	d049      	beq.n	800441a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438a:	4a69      	ldr	r2, [pc, #420]	; (8004530 <I2C_Slave_STOPF+0x258>)
 800438c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004392:	4618      	mov	r0, r3
 8004394:	f7fe f9f7 	bl	8002786 <HAL_DMA_Abort_IT>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d03d      	beq.n	800441a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043a8:	4610      	mov	r0, r2
 80043aa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043ac:	e035      	b.n	800441a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d005      	beq.n	80043d2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	f043 0204 	orr.w	r2, r3, #4
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fe f9ef 	bl	80027ca <HAL_DMA_GetState>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d014      	beq.n	800441c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f6:	4a4e      	ldr	r2, [pc, #312]	; (8004530 <I2C_Slave_STOPF+0x258>)
 80043f8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fe f9c1 	bl	8002786 <HAL_DMA_Abort_IT>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d008      	beq.n	800441c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004414:	4610      	mov	r0, r2
 8004416:	4798      	blx	r3
 8004418:	e000      	b.n	800441c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800441a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d03e      	beq.n	80044a4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b04      	cmp	r3, #4
 8004432:	d112      	bne.n	800445a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691a      	ldr	r2, [r3, #16]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004450:	b29b      	uxth	r3, r3
 8004452:	3b01      	subs	r3, #1
 8004454:	b29a      	uxth	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004464:	2b40      	cmp	r3, #64	; 0x40
 8004466:	d112      	bne.n	800448e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691a      	ldr	r2, [r3, #16]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	f043 0204 	orr.w	r2, r3, #4
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f8b3 	bl	8004618 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80044b2:	e039      	b.n	8004528 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	2b2a      	cmp	r3, #42	; 0x2a
 80044b8:	d109      	bne.n	80044ce <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2228      	movs	r2, #40	; 0x28
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7ff f845 	bl	8003558 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b28      	cmp	r3, #40	; 0x28
 80044d8:	d111      	bne.n	80044fe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a15      	ldr	r2, [pc, #84]	; (8004534 <I2C_Slave_STOPF+0x25c>)
 80044de:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7ff f846 	bl	8003588 <HAL_I2C_ListenCpltCallback>
}
 80044fc:	e014      	b.n	8004528 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	2b22      	cmp	r3, #34	; 0x22
 8004504:	d002      	beq.n	800450c <I2C_Slave_STOPF+0x234>
 8004506:	7bfb      	ldrb	r3, [r7, #15]
 8004508:	2b22      	cmp	r3, #34	; 0x22
 800450a:	d10d      	bne.n	8004528 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2220      	movs	r2, #32
 8004516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff f818 	bl	8003558 <HAL_I2C_SlaveRxCpltCallback>
}
 8004528:	bf00      	nop
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	0800487d 	.word	0x0800487d
 8004534:	ffff0000 	.word	0xffff0000

08004538 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004546:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b08      	cmp	r3, #8
 8004552:	d002      	beq.n	800455a <I2C_Slave_AF+0x22>
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b20      	cmp	r3, #32
 8004558:	d129      	bne.n	80045ae <I2C_Slave_AF+0x76>
 800455a:	7bfb      	ldrb	r3, [r7, #15]
 800455c:	2b28      	cmp	r3, #40	; 0x28
 800455e:	d126      	bne.n	80045ae <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a2c      	ldr	r2, [pc, #176]	; (8004614 <I2C_Slave_AF+0xdc>)
 8004564:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004574:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800457e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800458e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2220      	movs	r2, #32
 800459a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fe ffee 	bl	8003588 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80045ac:	e02e      	b.n	800460c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
 80045b0:	2b21      	cmp	r3, #33	; 0x21
 80045b2:	d126      	bne.n	8004602 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a17      	ldr	r2, [pc, #92]	; (8004614 <I2C_Slave_AF+0xdc>)
 80045b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2221      	movs	r2, #33	; 0x21
 80045be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045de:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045e8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fe ffa2 	bl	8003544 <HAL_I2C_SlaveTxCpltCallback>
}
 8004600:	e004      	b.n	800460c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800460a:	615a      	str	r2, [r3, #20]
}
 800460c:	bf00      	nop
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	ffff0000 	.word	0xffff0000

08004618 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004626:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800462e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004630:	7bbb      	ldrb	r3, [r7, #14]
 8004632:	2b10      	cmp	r3, #16
 8004634:	d002      	beq.n	800463c <I2C_ITError+0x24>
 8004636:	7bbb      	ldrb	r3, [r7, #14]
 8004638:	2b40      	cmp	r3, #64	; 0x40
 800463a:	d10a      	bne.n	8004652 <I2C_ITError+0x3a>
 800463c:	7bfb      	ldrb	r3, [r7, #15]
 800463e:	2b22      	cmp	r3, #34	; 0x22
 8004640:	d107      	bne.n	8004652 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004650:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004652:	7bfb      	ldrb	r3, [r7, #15]
 8004654:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004658:	2b28      	cmp	r3, #40	; 0x28
 800465a:	d107      	bne.n	800466c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2228      	movs	r2, #40	; 0x28
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800466a:	e015      	b.n	8004698 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800467a:	d00a      	beq.n	8004692 <I2C_ITError+0x7a>
 800467c:	7bfb      	ldrb	r3, [r7, #15]
 800467e:	2b60      	cmp	r3, #96	; 0x60
 8004680:	d007      	beq.n	8004692 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2220      	movs	r2, #32
 8004686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046a6:	d162      	bne.n	800476e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046b6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d020      	beq.n	8004708 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ca:	4a6a      	ldr	r2, [pc, #424]	; (8004874 <I2C_ITError+0x25c>)
 80046cc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fe f857 	bl	8002786 <HAL_DMA_Abort_IT>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 8089 	beq.w	80047f2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0201 	bic.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004702:	4610      	mov	r0, r2
 8004704:	4798      	blx	r3
 8004706:	e074      	b.n	80047f2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	4a59      	ldr	r2, [pc, #356]	; (8004874 <I2C_ITError+0x25c>)
 800470e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	4618      	mov	r0, r3
 8004716:	f7fe f836 	bl	8002786 <HAL_DMA_Abort_IT>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d068      	beq.n	80047f2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472a:	2b40      	cmp	r3, #64	; 0x40
 800472c:	d10b      	bne.n	8004746 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0201 	bic.w	r2, r2, #1
 8004754:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2220      	movs	r2, #32
 800475a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004768:	4610      	mov	r0, r2
 800476a:	4798      	blx	r3
 800476c:	e041      	b.n	80047f2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b60      	cmp	r3, #96	; 0x60
 8004778:	d125      	bne.n	80047c6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004792:	2b40      	cmp	r3, #64	; 0x40
 8004794:	d10b      	bne.n	80047ae <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	691a      	ldr	r2, [r3, #16]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	b2d2      	uxtb	r2, r2
 80047a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0201 	bic.w	r2, r2, #1
 80047bc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fe fef6 	bl	80035b0 <HAL_I2C_AbortCpltCallback>
 80047c4:	e015      	b.n	80047f2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d0:	2b40      	cmp	r3, #64	; 0x40
 80047d2:	d10b      	bne.n	80047ec <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7fe fed5 	bl	800359c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10e      	bne.n	8004820 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004808:	2b00      	cmp	r3, #0
 800480a:	d109      	bne.n	8004820 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004812:	2b00      	cmp	r3, #0
 8004814:	d104      	bne.n	8004820 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800481c:	2b00      	cmp	r3, #0
 800481e:	d007      	beq.n	8004830 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800482e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004836:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b04      	cmp	r3, #4
 8004842:	d113      	bne.n	800486c <I2C_ITError+0x254>
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	2b28      	cmp	r3, #40	; 0x28
 8004848:	d110      	bne.n	800486c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a0a      	ldr	r2, [pc, #40]	; (8004878 <I2C_ITError+0x260>)
 800484e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fe fe8e 	bl	8003588 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800486c:	bf00      	nop
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	0800487d 	.word	0x0800487d
 8004878:	ffff0000 	.word	0xffff0000

0800487c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004894:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004896:	4b4b      	ldr	r3, [pc, #300]	; (80049c4 <I2C_DMAAbort+0x148>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	08db      	lsrs	r3, r3, #3
 800489c:	4a4a      	ldr	r2, [pc, #296]	; (80049c8 <I2C_DMAAbort+0x14c>)
 800489e:	fba2 2303 	umull	r2, r3, r2, r3
 80048a2:	0a1a      	lsrs	r2, r3, #8
 80048a4:	4613      	mov	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	00da      	lsls	r2, r3, #3
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d106      	bne.n	80048c4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	f043 0220 	orr.w	r2, r3, #32
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80048c2:	e00a      	b.n	80048da <I2C_DMAAbort+0x5e>
    }
    count--;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048d8:	d0ea      	beq.n	80048b0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e6:	2200      	movs	r2, #0
 80048e8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f6:	2200      	movs	r2, #0
 80048f8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004908:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2200      	movs	r2, #0
 800490e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491c:	2200      	movs	r2, #0
 800491e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492c:	2200      	movs	r2, #0
 800492e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0201 	bic.w	r2, r2, #1
 800493e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b60      	cmp	r3, #96	; 0x60
 800494a:	d10e      	bne.n	800496a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2200      	movs	r2, #0
 8004960:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004962:	6978      	ldr	r0, [r7, #20]
 8004964:	f7fe fe24 	bl	80035b0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004968:	e027      	b.n	80049ba <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800496a:	7cfb      	ldrb	r3, [r7, #19]
 800496c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004970:	2b28      	cmp	r3, #40	; 0x28
 8004972:	d117      	bne.n	80049a4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0201 	orr.w	r2, r2, #1
 8004982:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004992:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2200      	movs	r2, #0
 8004998:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2228      	movs	r2, #40	; 0x28
 800499e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049a2:	e007      	b.n	80049b4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80049b4:	6978      	ldr	r0, [r7, #20]
 80049b6:	f7fe fdf1 	bl	800359c <HAL_I2C_ErrorCallback>
}
 80049ba:	bf00      	nop
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20000c60 	.word	0x20000c60
 80049c8:	14f8b589 	.word	0x14f8b589

080049cc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80049d8:	4b13      	ldr	r3, [pc, #76]	; (8004a28 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	08db      	lsrs	r3, r3, #3
 80049de:	4a13      	ldr	r2, [pc, #76]	; (8004a2c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80049e0:	fba2 2303 	umull	r2, r3, r2, r3
 80049e4:	0a1a      	lsrs	r2, r3, #8
 80049e6:	4613      	mov	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d107      	bne.n	8004a0a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f043 0220 	orr.w	r2, r3, #32
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e008      	b.n	8004a1c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a18:	d0e9      	beq.n	80049ee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	20000c60 	.word	0x20000c60
 8004a2c:	14f8b589 	.word	0x14f8b589

08004a30 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004a40:	d103      	bne.n	8004a4a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a48:	e007      	b.n	8004a5a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004a52:	d102      	bne.n	8004a5a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2208      	movs	r2, #8
 8004a58:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
	...

08004a68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e264      	b.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d075      	beq.n	8004b72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a86:	4ba3      	ldr	r3, [pc, #652]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 030c 	and.w	r3, r3, #12
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d00c      	beq.n	8004aac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a92:	4ba0      	ldr	r3, [pc, #640]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d112      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a9e:	4b9d      	ldr	r3, [pc, #628]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aaa:	d10b      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aac:	4b99      	ldr	r3, [pc, #612]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d05b      	beq.n	8004b70 <HAL_RCC_OscConfig+0x108>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d157      	bne.n	8004b70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e23f      	b.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004acc:	d106      	bne.n	8004adc <HAL_RCC_OscConfig+0x74>
 8004ace:	4b91      	ldr	r3, [pc, #580]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a90      	ldr	r2, [pc, #576]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	e01d      	b.n	8004b18 <HAL_RCC_OscConfig+0xb0>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ae4:	d10c      	bne.n	8004b00 <HAL_RCC_OscConfig+0x98>
 8004ae6:	4b8b      	ldr	r3, [pc, #556]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a8a      	ldr	r2, [pc, #552]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	4b88      	ldr	r3, [pc, #544]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a87      	ldr	r2, [pc, #540]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	e00b      	b.n	8004b18 <HAL_RCC_OscConfig+0xb0>
 8004b00:	4b84      	ldr	r3, [pc, #528]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a83      	ldr	r2, [pc, #524]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	4b81      	ldr	r3, [pc, #516]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a80      	ldr	r2, [pc, #512]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d013      	beq.n	8004b48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b20:	f7fd fca4 	bl	800246c <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b28:	f7fd fca0 	bl	800246c <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b64      	cmp	r3, #100	; 0x64
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e204      	b.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3a:	4b76      	ldr	r3, [pc, #472]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0f0      	beq.n	8004b28 <HAL_RCC_OscConfig+0xc0>
 8004b46:	e014      	b.n	8004b72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b48:	f7fd fc90 	bl	800246c <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b50:	f7fd fc8c 	bl	800246c <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b64      	cmp	r3, #100	; 0x64
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e1f0      	b.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b62:	4b6c      	ldr	r3, [pc, #432]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <HAL_RCC_OscConfig+0xe8>
 8004b6e:	e000      	b.n	8004b72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d063      	beq.n	8004c46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b7e:	4b65      	ldr	r3, [pc, #404]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 030c 	and.w	r3, r3, #12
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00b      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b8a:	4b62      	ldr	r3, [pc, #392]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d11c      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b96:	4b5f      	ldr	r3, [pc, #380]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d116      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ba2:	4b5c      	ldr	r3, [pc, #368]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d005      	beq.n	8004bba <HAL_RCC_OscConfig+0x152>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d001      	beq.n	8004bba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e1c4      	b.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bba:	4b56      	ldr	r3, [pc, #344]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	4952      	ldr	r1, [pc, #328]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bce:	e03a      	b.n	8004c46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d020      	beq.n	8004c1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bd8:	4b4f      	ldr	r3, [pc, #316]	; (8004d18 <HAL_RCC_OscConfig+0x2b0>)
 8004bda:	2201      	movs	r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bde:	f7fd fc45 	bl	800246c <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be4:	e008      	b.n	8004bf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004be6:	f7fd fc41 	bl	800246c <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e1a5      	b.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf8:	4b46      	ldr	r3, [pc, #280]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0f0      	beq.n	8004be6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c04:	4b43      	ldr	r3, [pc, #268]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	4940      	ldr	r1, [pc, #256]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	600b      	str	r3, [r1, #0]
 8004c18:	e015      	b.n	8004c46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c1a:	4b3f      	ldr	r3, [pc, #252]	; (8004d18 <HAL_RCC_OscConfig+0x2b0>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c20:	f7fd fc24 	bl	800246c <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c28:	f7fd fc20 	bl	800246c <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e184      	b.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c3a:	4b36      	ldr	r3, [pc, #216]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f0      	bne.n	8004c28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d030      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d016      	beq.n	8004c88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c5a:	4b30      	ldr	r3, [pc, #192]	; (8004d1c <HAL_RCC_OscConfig+0x2b4>)
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c60:	f7fd fc04 	bl	800246c <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c68:	f7fd fc00 	bl	800246c <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e164      	b.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c7a:	4b26      	ldr	r3, [pc, #152]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0f0      	beq.n	8004c68 <HAL_RCC_OscConfig+0x200>
 8004c86:	e015      	b.n	8004cb4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c88:	4b24      	ldr	r3, [pc, #144]	; (8004d1c <HAL_RCC_OscConfig+0x2b4>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c8e:	f7fd fbed 	bl	800246c <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c96:	f7fd fbe9 	bl	800246c <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e14d      	b.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ca8:	4b1a      	ldr	r3, [pc, #104]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1f0      	bne.n	8004c96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 80a0 	beq.w	8004e02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cc6:	4b13      	ldr	r3, [pc, #76]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10f      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60bb      	str	r3, [r7, #8]
 8004cd6:	4b0f      	ldr	r3, [pc, #60]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	4a0e      	ldr	r2, [pc, #56]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ce2:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cea:	60bb      	str	r3, [r7, #8]
 8004cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf2:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <HAL_RCC_OscConfig+0x2b8>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d121      	bne.n	8004d42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cfe:	4b08      	ldr	r3, [pc, #32]	; (8004d20 <HAL_RCC_OscConfig+0x2b8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a07      	ldr	r2, [pc, #28]	; (8004d20 <HAL_RCC_OscConfig+0x2b8>)
 8004d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d0a:	f7fd fbaf 	bl	800246c <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d10:	e011      	b.n	8004d36 <HAL_RCC_OscConfig+0x2ce>
 8004d12:	bf00      	nop
 8004d14:	40023800 	.word	0x40023800
 8004d18:	42470000 	.word	0x42470000
 8004d1c:	42470e80 	.word	0x42470e80
 8004d20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d24:	f7fd fba2 	bl	800246c <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e106      	b.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d36:	4b85      	ldr	r3, [pc, #532]	; (8004f4c <HAL_RCC_OscConfig+0x4e4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0f0      	beq.n	8004d24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d106      	bne.n	8004d58 <HAL_RCC_OscConfig+0x2f0>
 8004d4a:	4b81      	ldr	r3, [pc, #516]	; (8004f50 <HAL_RCC_OscConfig+0x4e8>)
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4e:	4a80      	ldr	r2, [pc, #512]	; (8004f50 <HAL_RCC_OscConfig+0x4e8>)
 8004d50:	f043 0301 	orr.w	r3, r3, #1
 8004d54:	6713      	str	r3, [r2, #112]	; 0x70
 8004d56:	e01c      	b.n	8004d92 <HAL_RCC_OscConfig+0x32a>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	2b05      	cmp	r3, #5
 8004d5e:	d10c      	bne.n	8004d7a <HAL_RCC_OscConfig+0x312>
 8004d60:	4b7b      	ldr	r3, [pc, #492]	; (8004f50 <HAL_RCC_OscConfig+0x4e8>)
 8004d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d64:	4a7a      	ldr	r2, [pc, #488]	; (8004f50 <HAL_RCC_OscConfig+0x4e8>)
 8004d66:	f043 0304 	orr.w	r3, r3, #4
 8004d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d6c:	4b78      	ldr	r3, [pc, #480]	; (8004f50 <HAL_RCC_OscConfig+0x4e8>)
 8004d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d70:	4a77      	ldr	r2, [pc, #476]	; (8004f50 <HAL_RCC_OscConfig+0x4e8>)
 8004d72:	f043 0301 	orr.w	r3, r3, #1
 8004d76:	6713      	str	r3, [r2, #112]	; 0x70
 8004d78:	e00b      	b.n	8004d92 <HAL_RCC_OscConfig+0x32a>
 8004d7a:	4b75      	ldr	r3, [pc, #468]	; (8004f50 <HAL_RCC_OscConfig+0x4e8>)
 8004d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7e:	4a74      	ldr	r2, [pc, #464]	; (8004f50 <HAL_RCC_OscConfig+0x4e8>)
 8004d80:	f023 0301 	bic.w	r3, r3, #1
 8004d84:	6713      	str	r3, [r2, #112]	; 0x70
 8004d86:	4b72      	ldr	r3, [pc, #456]	; (8004f50 <HAL_RCC_OscConfig+0x4e8>)
 8004d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8a:	4a71      	ldr	r2, [pc, #452]	; (8004f50 <HAL_RCC_OscConfig+0x4e8>)
 8004d8c:	f023 0304 	bic.w	r3, r3, #4
 8004d90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d015      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9a:	f7fd fb67 	bl	800246c <HAL_GetTick>
 8004d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da0:	e00a      	b.n	8004db8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004da2:	f7fd fb63 	bl	800246c <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e0c5      	b.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db8:	4b65      	ldr	r3, [pc, #404]	; (8004f50 <HAL_RCC_OscConfig+0x4e8>)
 8004dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0ee      	beq.n	8004da2 <HAL_RCC_OscConfig+0x33a>
 8004dc4:	e014      	b.n	8004df0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dc6:	f7fd fb51 	bl	800246c <HAL_GetTick>
 8004dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dcc:	e00a      	b.n	8004de4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dce:	f7fd fb4d 	bl	800246c <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e0af      	b.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004de4:	4b5a      	ldr	r3, [pc, #360]	; (8004f50 <HAL_RCC_OscConfig+0x4e8>)
 8004de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1ee      	bne.n	8004dce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004df0:	7dfb      	ldrb	r3, [r7, #23]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d105      	bne.n	8004e02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004df6:	4b56      	ldr	r3, [pc, #344]	; (8004f50 <HAL_RCC_OscConfig+0x4e8>)
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	4a55      	ldr	r2, [pc, #340]	; (8004f50 <HAL_RCC_OscConfig+0x4e8>)
 8004dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 809b 	beq.w	8004f42 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e0c:	4b50      	ldr	r3, [pc, #320]	; (8004f50 <HAL_RCC_OscConfig+0x4e8>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f003 030c 	and.w	r3, r3, #12
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	d05c      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d141      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e20:	4b4c      	ldr	r3, [pc, #304]	; (8004f54 <HAL_RCC_OscConfig+0x4ec>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e26:	f7fd fb21 	bl	800246c <HAL_GetTick>
 8004e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e2c:	e008      	b.n	8004e40 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e2e:	f7fd fb1d 	bl	800246c <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d901      	bls.n	8004e40 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e081      	b.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e40:	4b43      	ldr	r3, [pc, #268]	; (8004f50 <HAL_RCC_OscConfig+0x4e8>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1f0      	bne.n	8004e2e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	69da      	ldr	r2, [r3, #28]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	431a      	orrs	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	019b      	lsls	r3, r3, #6
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e62:	085b      	lsrs	r3, r3, #1
 8004e64:	3b01      	subs	r3, #1
 8004e66:	041b      	lsls	r3, r3, #16
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6e:	061b      	lsls	r3, r3, #24
 8004e70:	4937      	ldr	r1, [pc, #220]	; (8004f50 <HAL_RCC_OscConfig+0x4e8>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e76:	4b37      	ldr	r3, [pc, #220]	; (8004f54 <HAL_RCC_OscConfig+0x4ec>)
 8004e78:	2201      	movs	r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7c:	f7fd faf6 	bl	800246c <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e84:	f7fd faf2 	bl	800246c <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e056      	b.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e96:	4b2e      	ldr	r3, [pc, #184]	; (8004f50 <HAL_RCC_OscConfig+0x4e8>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0f0      	beq.n	8004e84 <HAL_RCC_OscConfig+0x41c>
 8004ea2:	e04e      	b.n	8004f42 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea4:	4b2b      	ldr	r3, [pc, #172]	; (8004f54 <HAL_RCC_OscConfig+0x4ec>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eaa:	f7fd fadf 	bl	800246c <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eb2:	f7fd fadb 	bl	800246c <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e03f      	b.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ec4:	4b22      	ldr	r3, [pc, #136]	; (8004f50 <HAL_RCC_OscConfig+0x4e8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1f0      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x44a>
 8004ed0:	e037      	b.n	8004f42 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e032      	b.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ede:	4b1c      	ldr	r3, [pc, #112]	; (8004f50 <HAL_RCC_OscConfig+0x4e8>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d028      	beq.n	8004f3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d121      	bne.n	8004f3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d11a      	bne.n	8004f3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f0e:	4013      	ands	r3, r2
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f14:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d111      	bne.n	8004f3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f24:	085b      	lsrs	r3, r3, #1
 8004f26:	3b01      	subs	r3, #1
 8004f28:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d107      	bne.n	8004f3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f38:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d001      	beq.n	8004f42 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e000      	b.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40007000 	.word	0x40007000
 8004f50:	40023800 	.word	0x40023800
 8004f54:	42470060 	.word	0x42470060

08004f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e0cc      	b.n	8005106 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f6c:	4b68      	ldr	r3, [pc, #416]	; (8005110 <HAL_RCC_ClockConfig+0x1b8>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d90c      	bls.n	8004f94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f7a:	4b65      	ldr	r3, [pc, #404]	; (8005110 <HAL_RCC_ClockConfig+0x1b8>)
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	b2d2      	uxtb	r2, r2
 8004f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f82:	4b63      	ldr	r3, [pc, #396]	; (8005110 <HAL_RCC_ClockConfig+0x1b8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d001      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e0b8      	b.n	8005106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d020      	beq.n	8004fe2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d005      	beq.n	8004fb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fac:	4b59      	ldr	r3, [pc, #356]	; (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	4a58      	ldr	r2, [pc, #352]	; (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0308 	and.w	r3, r3, #8
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d005      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fc4:	4b53      	ldr	r3, [pc, #332]	; (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	4a52      	ldr	r2, [pc, #328]	; (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8004fca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fd0:	4b50      	ldr	r3, [pc, #320]	; (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	494d      	ldr	r1, [pc, #308]	; (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d044      	beq.n	8005078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d107      	bne.n	8005006 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ff6:	4b47      	ldr	r3, [pc, #284]	; (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d119      	bne.n	8005036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e07f      	b.n	8005106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2b02      	cmp	r3, #2
 800500c:	d003      	beq.n	8005016 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005012:	2b03      	cmp	r3, #3
 8005014:	d107      	bne.n	8005026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005016:	4b3f      	ldr	r3, [pc, #252]	; (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d109      	bne.n	8005036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e06f      	b.n	8005106 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005026:	4b3b      	ldr	r3, [pc, #236]	; (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e067      	b.n	8005106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005036:	4b37      	ldr	r3, [pc, #220]	; (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f023 0203 	bic.w	r2, r3, #3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	4934      	ldr	r1, [pc, #208]	; (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8005044:	4313      	orrs	r3, r2
 8005046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005048:	f7fd fa10 	bl	800246c <HAL_GetTick>
 800504c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800504e:	e00a      	b.n	8005066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005050:	f7fd fa0c 	bl	800246c <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	f241 3288 	movw	r2, #5000	; 0x1388
 800505e:	4293      	cmp	r3, r2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e04f      	b.n	8005106 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005066:	4b2b      	ldr	r3, [pc, #172]	; (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f003 020c 	and.w	r2, r3, #12
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	429a      	cmp	r2, r3
 8005076:	d1eb      	bne.n	8005050 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005078:	4b25      	ldr	r3, [pc, #148]	; (8005110 <HAL_RCC_ClockConfig+0x1b8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d20c      	bcs.n	80050a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005086:	4b22      	ldr	r3, [pc, #136]	; (8005110 <HAL_RCC_ClockConfig+0x1b8>)
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800508e:	4b20      	ldr	r3, [pc, #128]	; (8005110 <HAL_RCC_ClockConfig+0x1b8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	429a      	cmp	r2, r3
 800509a:	d001      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e032      	b.n	8005106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d008      	beq.n	80050be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050ac:	4b19      	ldr	r3, [pc, #100]	; (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	4916      	ldr	r1, [pc, #88]	; (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0308 	and.w	r3, r3, #8
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d009      	beq.n	80050de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050ca:	4b12      	ldr	r3, [pc, #72]	; (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	490e      	ldr	r1, [pc, #56]	; (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050de:	f000 f821 	bl	8005124 <HAL_RCC_GetSysClockFreq>
 80050e2:	4602      	mov	r2, r0
 80050e4:	4b0b      	ldr	r3, [pc, #44]	; (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	091b      	lsrs	r3, r3, #4
 80050ea:	f003 030f 	and.w	r3, r3, #15
 80050ee:	490a      	ldr	r1, [pc, #40]	; (8005118 <HAL_RCC_ClockConfig+0x1c0>)
 80050f0:	5ccb      	ldrb	r3, [r1, r3]
 80050f2:	fa22 f303 	lsr.w	r3, r2, r3
 80050f6:	4a09      	ldr	r2, [pc, #36]	; (800511c <HAL_RCC_ClockConfig+0x1c4>)
 80050f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050fa:	4b09      	ldr	r3, [pc, #36]	; (8005120 <HAL_RCC_ClockConfig+0x1c8>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fd f970 	bl	80023e4 <HAL_InitTick>

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	40023c00 	.word	0x40023c00
 8005114:	40023800 	.word	0x40023800
 8005118:	08007ba4 	.word	0x08007ba4
 800511c:	20000c60 	.word	0x20000c60
 8005120:	20000c64 	.word	0x20000c64

08005124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005124:	b5b0      	push	{r4, r5, r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800512a:	2100      	movs	r1, #0
 800512c:	6079      	str	r1, [r7, #4]
 800512e:	2100      	movs	r1, #0
 8005130:	60f9      	str	r1, [r7, #12]
 8005132:	2100      	movs	r1, #0
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005136:	2100      	movs	r1, #0
 8005138:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800513a:	4952      	ldr	r1, [pc, #328]	; (8005284 <HAL_RCC_GetSysClockFreq+0x160>)
 800513c:	6889      	ldr	r1, [r1, #8]
 800513e:	f001 010c 	and.w	r1, r1, #12
 8005142:	2908      	cmp	r1, #8
 8005144:	d00d      	beq.n	8005162 <HAL_RCC_GetSysClockFreq+0x3e>
 8005146:	2908      	cmp	r1, #8
 8005148:	f200 8094 	bhi.w	8005274 <HAL_RCC_GetSysClockFreq+0x150>
 800514c:	2900      	cmp	r1, #0
 800514e:	d002      	beq.n	8005156 <HAL_RCC_GetSysClockFreq+0x32>
 8005150:	2904      	cmp	r1, #4
 8005152:	d003      	beq.n	800515c <HAL_RCC_GetSysClockFreq+0x38>
 8005154:	e08e      	b.n	8005274 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005156:	4b4c      	ldr	r3, [pc, #304]	; (8005288 <HAL_RCC_GetSysClockFreq+0x164>)
 8005158:	60bb      	str	r3, [r7, #8]
       break;
 800515a:	e08e      	b.n	800527a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800515c:	4b4b      	ldr	r3, [pc, #300]	; (800528c <HAL_RCC_GetSysClockFreq+0x168>)
 800515e:	60bb      	str	r3, [r7, #8]
      break;
 8005160:	e08b      	b.n	800527a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005162:	4948      	ldr	r1, [pc, #288]	; (8005284 <HAL_RCC_GetSysClockFreq+0x160>)
 8005164:	6849      	ldr	r1, [r1, #4]
 8005166:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800516a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800516c:	4945      	ldr	r1, [pc, #276]	; (8005284 <HAL_RCC_GetSysClockFreq+0x160>)
 800516e:	6849      	ldr	r1, [r1, #4]
 8005170:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005174:	2900      	cmp	r1, #0
 8005176:	d024      	beq.n	80051c2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005178:	4942      	ldr	r1, [pc, #264]	; (8005284 <HAL_RCC_GetSysClockFreq+0x160>)
 800517a:	6849      	ldr	r1, [r1, #4]
 800517c:	0989      	lsrs	r1, r1, #6
 800517e:	4608      	mov	r0, r1
 8005180:	f04f 0100 	mov.w	r1, #0
 8005184:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005188:	f04f 0500 	mov.w	r5, #0
 800518c:	ea00 0204 	and.w	r2, r0, r4
 8005190:	ea01 0305 	and.w	r3, r1, r5
 8005194:	493d      	ldr	r1, [pc, #244]	; (800528c <HAL_RCC_GetSysClockFreq+0x168>)
 8005196:	fb01 f003 	mul.w	r0, r1, r3
 800519a:	2100      	movs	r1, #0
 800519c:	fb01 f102 	mul.w	r1, r1, r2
 80051a0:	1844      	adds	r4, r0, r1
 80051a2:	493a      	ldr	r1, [pc, #232]	; (800528c <HAL_RCC_GetSysClockFreq+0x168>)
 80051a4:	fba2 0101 	umull	r0, r1, r2, r1
 80051a8:	1863      	adds	r3, r4, r1
 80051aa:	4619      	mov	r1, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	461a      	mov	r2, r3
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	f7fb fbfa 	bl	80009ac <__aeabi_uldivmod>
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	4613      	mov	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	e04a      	b.n	8005258 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051c2:	4b30      	ldr	r3, [pc, #192]	; (8005284 <HAL_RCC_GetSysClockFreq+0x160>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	099b      	lsrs	r3, r3, #6
 80051c8:	461a      	mov	r2, r3
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051d2:	f04f 0100 	mov.w	r1, #0
 80051d6:	ea02 0400 	and.w	r4, r2, r0
 80051da:	ea03 0501 	and.w	r5, r3, r1
 80051de:	4620      	mov	r0, r4
 80051e0:	4629      	mov	r1, r5
 80051e2:	f04f 0200 	mov.w	r2, #0
 80051e6:	f04f 0300 	mov.w	r3, #0
 80051ea:	014b      	lsls	r3, r1, #5
 80051ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80051f0:	0142      	lsls	r2, r0, #5
 80051f2:	4610      	mov	r0, r2
 80051f4:	4619      	mov	r1, r3
 80051f6:	1b00      	subs	r0, r0, r4
 80051f8:	eb61 0105 	sbc.w	r1, r1, r5
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	018b      	lsls	r3, r1, #6
 8005206:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800520a:	0182      	lsls	r2, r0, #6
 800520c:	1a12      	subs	r2, r2, r0
 800520e:	eb63 0301 	sbc.w	r3, r3, r1
 8005212:	f04f 0000 	mov.w	r0, #0
 8005216:	f04f 0100 	mov.w	r1, #0
 800521a:	00d9      	lsls	r1, r3, #3
 800521c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005220:	00d0      	lsls	r0, r2, #3
 8005222:	4602      	mov	r2, r0
 8005224:	460b      	mov	r3, r1
 8005226:	1912      	adds	r2, r2, r4
 8005228:	eb45 0303 	adc.w	r3, r5, r3
 800522c:	f04f 0000 	mov.w	r0, #0
 8005230:	f04f 0100 	mov.w	r1, #0
 8005234:	0299      	lsls	r1, r3, #10
 8005236:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800523a:	0290      	lsls	r0, r2, #10
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	4610      	mov	r0, r2
 8005242:	4619      	mov	r1, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	461a      	mov	r2, r3
 8005248:	f04f 0300 	mov.w	r3, #0
 800524c:	f7fb fbae 	bl	80009ac <__aeabi_uldivmod>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	4613      	mov	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005258:	4b0a      	ldr	r3, [pc, #40]	; (8005284 <HAL_RCC_GetSysClockFreq+0x160>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	0c1b      	lsrs	r3, r3, #16
 800525e:	f003 0303 	and.w	r3, r3, #3
 8005262:	3301      	adds	r3, #1
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005270:	60bb      	str	r3, [r7, #8]
      break;
 8005272:	e002      	b.n	800527a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005274:	4b04      	ldr	r3, [pc, #16]	; (8005288 <HAL_RCC_GetSysClockFreq+0x164>)
 8005276:	60bb      	str	r3, [r7, #8]
      break;
 8005278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800527a:	68bb      	ldr	r3, [r7, #8]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bdb0      	pop	{r4, r5, r7, pc}
 8005284:	40023800 	.word	0x40023800
 8005288:	00f42400 	.word	0x00f42400
 800528c:	017d7840 	.word	0x017d7840

08005290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005294:	4b03      	ldr	r3, [pc, #12]	; (80052a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005296:	681b      	ldr	r3, [r3, #0]
}
 8005298:	4618      	mov	r0, r3
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	20000c60 	.word	0x20000c60

080052a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052ac:	f7ff fff0 	bl	8005290 <HAL_RCC_GetHCLKFreq>
 80052b0:	4602      	mov	r2, r0
 80052b2:	4b05      	ldr	r3, [pc, #20]	; (80052c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	0a9b      	lsrs	r3, r3, #10
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	4903      	ldr	r1, [pc, #12]	; (80052cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80052be:	5ccb      	ldrb	r3, [r1, r3]
 80052c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40023800 	.word	0x40023800
 80052cc:	08007bb4 	.word	0x08007bb4

080052d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052d4:	f7ff ffdc 	bl	8005290 <HAL_RCC_GetHCLKFreq>
 80052d8:	4602      	mov	r2, r0
 80052da:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	0b5b      	lsrs	r3, r3, #13
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	4903      	ldr	r1, [pc, #12]	; (80052f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052e6:	5ccb      	ldrb	r3, [r1, r3]
 80052e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40023800 	.word	0x40023800
 80052f4:	08007bb4 	.word	0x08007bb4

080052f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e041      	b.n	800538e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d106      	bne.n	8005324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7fc ff3a 	bl	8002198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3304      	adds	r3, #4
 8005334:	4619      	mov	r1, r3
 8005336:	4610      	mov	r0, r2
 8005338:	f000 fba8 	bl	8005a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
	...

08005398 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d001      	beq.n	80053b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e04e      	b.n	800544e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68da      	ldr	r2, [r3, #12]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0201 	orr.w	r2, r2, #1
 80053c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a23      	ldr	r2, [pc, #140]	; (800545c <HAL_TIM_Base_Start_IT+0xc4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d022      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0x80>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053da:	d01d      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0x80>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a1f      	ldr	r2, [pc, #124]	; (8005460 <HAL_TIM_Base_Start_IT+0xc8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d018      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0x80>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a1e      	ldr	r2, [pc, #120]	; (8005464 <HAL_TIM_Base_Start_IT+0xcc>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d013      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0x80>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a1c      	ldr	r2, [pc, #112]	; (8005468 <HAL_TIM_Base_Start_IT+0xd0>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d00e      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0x80>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a1b      	ldr	r2, [pc, #108]	; (800546c <HAL_TIM_Base_Start_IT+0xd4>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d009      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0x80>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a19      	ldr	r2, [pc, #100]	; (8005470 <HAL_TIM_Base_Start_IT+0xd8>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d004      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0x80>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a18      	ldr	r2, [pc, #96]	; (8005474 <HAL_TIM_Base_Start_IT+0xdc>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d111      	bne.n	800543c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f003 0307 	and.w	r3, r3, #7
 8005422:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b06      	cmp	r3, #6
 8005428:	d010      	beq.n	800544c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f042 0201 	orr.w	r2, r2, #1
 8005438:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800543a:	e007      	b.n	800544c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0201 	orr.w	r2, r2, #1
 800544a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	40010000 	.word	0x40010000
 8005460:	40000400 	.word	0x40000400
 8005464:	40000800 	.word	0x40000800
 8005468:	40000c00 	.word	0x40000c00
 800546c:	40010400 	.word	0x40010400
 8005470:	40014000 	.word	0x40014000
 8005474:	40001800 	.word	0x40001800

08005478 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d109      	bne.n	800549c <HAL_TIM_OC_Start+0x24>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b01      	cmp	r3, #1
 8005492:	bf14      	ite	ne
 8005494:	2301      	movne	r3, #1
 8005496:	2300      	moveq	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	e022      	b.n	80054e2 <HAL_TIM_OC_Start+0x6a>
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d109      	bne.n	80054b6 <HAL_TIM_OC_Start+0x3e>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	bf14      	ite	ne
 80054ae:	2301      	movne	r3, #1
 80054b0:	2300      	moveq	r3, #0
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	e015      	b.n	80054e2 <HAL_TIM_OC_Start+0x6a>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d109      	bne.n	80054d0 <HAL_TIM_OC_Start+0x58>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	bf14      	ite	ne
 80054c8:	2301      	movne	r3, #1
 80054ca:	2300      	moveq	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	e008      	b.n	80054e2 <HAL_TIM_OC_Start+0x6a>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b01      	cmp	r3, #1
 80054da:	bf14      	ite	ne
 80054dc:	2301      	movne	r3, #1
 80054de:	2300      	moveq	r3, #0
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e07c      	b.n	80055e4 <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d104      	bne.n	80054fa <HAL_TIM_OC_Start+0x82>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054f8:	e013      	b.n	8005522 <HAL_TIM_OC_Start+0xaa>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b04      	cmp	r3, #4
 80054fe:	d104      	bne.n	800550a <HAL_TIM_OC_Start+0x92>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005508:	e00b      	b.n	8005522 <HAL_TIM_OC_Start+0xaa>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b08      	cmp	r3, #8
 800550e:	d104      	bne.n	800551a <HAL_TIM_OC_Start+0xa2>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005518:	e003      	b.n	8005522 <HAL_TIM_OC_Start+0xaa>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2202      	movs	r2, #2
 800551e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2201      	movs	r2, #1
 8005528:	6839      	ldr	r1, [r7, #0]
 800552a:	4618      	mov	r0, r3
 800552c:	f000 fcfe 	bl	8005f2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a2d      	ldr	r2, [pc, #180]	; (80055ec <HAL_TIM_OC_Start+0x174>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d004      	beq.n	8005544 <HAL_TIM_OC_Start+0xcc>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a2c      	ldr	r2, [pc, #176]	; (80055f0 <HAL_TIM_OC_Start+0x178>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d101      	bne.n	8005548 <HAL_TIM_OC_Start+0xd0>
 8005544:	2301      	movs	r3, #1
 8005546:	e000      	b.n	800554a <HAL_TIM_OC_Start+0xd2>
 8005548:	2300      	movs	r3, #0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d007      	beq.n	800555e <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800555c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a22      	ldr	r2, [pc, #136]	; (80055ec <HAL_TIM_OC_Start+0x174>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d022      	beq.n	80055ae <HAL_TIM_OC_Start+0x136>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005570:	d01d      	beq.n	80055ae <HAL_TIM_OC_Start+0x136>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a1f      	ldr	r2, [pc, #124]	; (80055f4 <HAL_TIM_OC_Start+0x17c>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d018      	beq.n	80055ae <HAL_TIM_OC_Start+0x136>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a1d      	ldr	r2, [pc, #116]	; (80055f8 <HAL_TIM_OC_Start+0x180>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d013      	beq.n	80055ae <HAL_TIM_OC_Start+0x136>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a1c      	ldr	r2, [pc, #112]	; (80055fc <HAL_TIM_OC_Start+0x184>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d00e      	beq.n	80055ae <HAL_TIM_OC_Start+0x136>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a16      	ldr	r2, [pc, #88]	; (80055f0 <HAL_TIM_OC_Start+0x178>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d009      	beq.n	80055ae <HAL_TIM_OC_Start+0x136>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a18      	ldr	r2, [pc, #96]	; (8005600 <HAL_TIM_OC_Start+0x188>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d004      	beq.n	80055ae <HAL_TIM_OC_Start+0x136>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a16      	ldr	r2, [pc, #88]	; (8005604 <HAL_TIM_OC_Start+0x18c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d111      	bne.n	80055d2 <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 0307 	and.w	r3, r3, #7
 80055b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2b06      	cmp	r3, #6
 80055be:	d010      	beq.n	80055e2 <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0201 	orr.w	r2, r2, #1
 80055ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d0:	e007      	b.n	80055e2 <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f042 0201 	orr.w	r2, r2, #1
 80055e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	40010000 	.word	0x40010000
 80055f0:	40010400 	.word	0x40010400
 80055f4:	40000400 	.word	0x40000400
 80055f8:	40000800 	.word	0x40000800
 80055fc:	40000c00 	.word	0x40000c00
 8005600:	40014000 	.word	0x40014000
 8005604:	40001800 	.word	0x40001800

08005608 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e041      	b.n	800569e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d106      	bne.n	8005634 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7fc fd92 	bl	8002158 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2202      	movs	r2, #2
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3304      	adds	r3, #4
 8005644:	4619      	mov	r1, r3
 8005646:	4610      	mov	r0, r2
 8005648:	f000 fa20 	bl	8005a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b082      	sub	sp, #8
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d122      	bne.n	8005702 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d11b      	bne.n	8005702 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f06f 0202 	mvn.w	r2, #2
 80056d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	f003 0303 	and.w	r3, r3, #3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f9b1 	bl	8005a50 <HAL_TIM_IC_CaptureCallback>
 80056ee:	e005      	b.n	80056fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f9a3 	bl	8005a3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f9b4 	bl	8005a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b04      	cmp	r3, #4
 800570e:	d122      	bne.n	8005756 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	f003 0304 	and.w	r3, r3, #4
 800571a:	2b04      	cmp	r3, #4
 800571c:	d11b      	bne.n	8005756 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f06f 0204 	mvn.w	r2, #4
 8005726:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f987 	bl	8005a50 <HAL_TIM_IC_CaptureCallback>
 8005742:	e005      	b.n	8005750 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f979 	bl	8005a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f98a 	bl	8005a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b08      	cmp	r3, #8
 8005762:	d122      	bne.n	80057aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f003 0308 	and.w	r3, r3, #8
 800576e:	2b08      	cmp	r3, #8
 8005770:	d11b      	bne.n	80057aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f06f 0208 	mvn.w	r2, #8
 800577a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2204      	movs	r2, #4
 8005780:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	f003 0303 	and.w	r3, r3, #3
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f95d 	bl	8005a50 <HAL_TIM_IC_CaptureCallback>
 8005796:	e005      	b.n	80057a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f94f 	bl	8005a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f960 	bl	8005a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	2b10      	cmp	r3, #16
 80057b6:	d122      	bne.n	80057fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	f003 0310 	and.w	r3, r3, #16
 80057c2:	2b10      	cmp	r3, #16
 80057c4:	d11b      	bne.n	80057fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f06f 0210 	mvn.w	r2, #16
 80057ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2208      	movs	r2, #8
 80057d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69db      	ldr	r3, [r3, #28]
 80057dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f933 	bl	8005a50 <HAL_TIM_IC_CaptureCallback>
 80057ea:	e005      	b.n	80057f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f925 	bl	8005a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f936 	bl	8005a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b01      	cmp	r3, #1
 800580a:	d10e      	bne.n	800582a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b01      	cmp	r3, #1
 8005818:	d107      	bne.n	800582a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f06f 0201 	mvn.w	r2, #1
 8005822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f7fb fd55 	bl	80012d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005834:	2b80      	cmp	r3, #128	; 0x80
 8005836:	d10e      	bne.n	8005856 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005842:	2b80      	cmp	r3, #128	; 0x80
 8005844:	d107      	bne.n	8005856 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800584e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fc17 	bl	8006084 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005860:	2b40      	cmp	r3, #64	; 0x40
 8005862:	d10e      	bne.n	8005882 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586e:	2b40      	cmp	r3, #64	; 0x40
 8005870:	d107      	bne.n	8005882 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800587a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f8fb 	bl	8005a78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	f003 0320 	and.w	r3, r3, #32
 800588c:	2b20      	cmp	r3, #32
 800588e:	d10e      	bne.n	80058ae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f003 0320 	and.w	r3, r3, #32
 800589a:	2b20      	cmp	r3, #32
 800589c:	d107      	bne.n	80058ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f06f 0220 	mvn.w	r2, #32
 80058a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 fbe1 	bl	8006070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058ae:	bf00      	nop
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058c4:	2300      	movs	r3, #0
 80058c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d101      	bne.n	80058d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058d2:	2302      	movs	r3, #2
 80058d4:	e0ae      	b.n	8005a34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b0c      	cmp	r3, #12
 80058e2:	f200 809f 	bhi.w	8005a24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80058e6:	a201      	add	r2, pc, #4	; (adr r2, 80058ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ec:	08005921 	.word	0x08005921
 80058f0:	08005a25 	.word	0x08005a25
 80058f4:	08005a25 	.word	0x08005a25
 80058f8:	08005a25 	.word	0x08005a25
 80058fc:	08005961 	.word	0x08005961
 8005900:	08005a25 	.word	0x08005a25
 8005904:	08005a25 	.word	0x08005a25
 8005908:	08005a25 	.word	0x08005a25
 800590c:	080059a3 	.word	0x080059a3
 8005910:	08005a25 	.word	0x08005a25
 8005914:	08005a25 	.word	0x08005a25
 8005918:	08005a25 	.word	0x08005a25
 800591c:	080059e3 	.word	0x080059e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68b9      	ldr	r1, [r7, #8]
 8005926:	4618      	mov	r0, r3
 8005928:	f000 f950 	bl	8005bcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0208 	orr.w	r2, r2, #8
 800593a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0204 	bic.w	r2, r2, #4
 800594a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6999      	ldr	r1, [r3, #24]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	691a      	ldr	r2, [r3, #16]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	619a      	str	r2, [r3, #24]
      break;
 800595e:	e064      	b.n	8005a2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68b9      	ldr	r1, [r7, #8]
 8005966:	4618      	mov	r0, r3
 8005968:	f000 f9a0 	bl	8005cac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800597a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699a      	ldr	r2, [r3, #24]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800598a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6999      	ldr	r1, [r3, #24]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	021a      	lsls	r2, r3, #8
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	619a      	str	r2, [r3, #24]
      break;
 80059a0:	e043      	b.n	8005a2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68b9      	ldr	r1, [r7, #8]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 f9f5 	bl	8005d98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69da      	ldr	r2, [r3, #28]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f042 0208 	orr.w	r2, r2, #8
 80059bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	69da      	ldr	r2, [r3, #28]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0204 	bic.w	r2, r2, #4
 80059cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69d9      	ldr	r1, [r3, #28]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	61da      	str	r2, [r3, #28]
      break;
 80059e0:	e023      	b.n	8005a2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 fa49 	bl	8005e80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69da      	ldr	r2, [r3, #28]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69da      	ldr	r2, [r3, #28]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69d9      	ldr	r1, [r3, #28]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	021a      	lsls	r2, r3, #8
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	61da      	str	r2, [r3, #28]
      break;
 8005a22:	e002      	b.n	8005a2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	75fb      	strb	r3, [r7, #23]
      break;
 8005a28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a40      	ldr	r2, [pc, #256]	; (8005ba0 <TIM_Base_SetConfig+0x114>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d013      	beq.n	8005acc <TIM_Base_SetConfig+0x40>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aaa:	d00f      	beq.n	8005acc <TIM_Base_SetConfig+0x40>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a3d      	ldr	r2, [pc, #244]	; (8005ba4 <TIM_Base_SetConfig+0x118>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d00b      	beq.n	8005acc <TIM_Base_SetConfig+0x40>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a3c      	ldr	r2, [pc, #240]	; (8005ba8 <TIM_Base_SetConfig+0x11c>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d007      	beq.n	8005acc <TIM_Base_SetConfig+0x40>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a3b      	ldr	r2, [pc, #236]	; (8005bac <TIM_Base_SetConfig+0x120>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d003      	beq.n	8005acc <TIM_Base_SetConfig+0x40>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a3a      	ldr	r2, [pc, #232]	; (8005bb0 <TIM_Base_SetConfig+0x124>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d108      	bne.n	8005ade <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a2f      	ldr	r2, [pc, #188]	; (8005ba0 <TIM_Base_SetConfig+0x114>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d02b      	beq.n	8005b3e <TIM_Base_SetConfig+0xb2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aec:	d027      	beq.n	8005b3e <TIM_Base_SetConfig+0xb2>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a2c      	ldr	r2, [pc, #176]	; (8005ba4 <TIM_Base_SetConfig+0x118>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d023      	beq.n	8005b3e <TIM_Base_SetConfig+0xb2>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a2b      	ldr	r2, [pc, #172]	; (8005ba8 <TIM_Base_SetConfig+0x11c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d01f      	beq.n	8005b3e <TIM_Base_SetConfig+0xb2>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a2a      	ldr	r2, [pc, #168]	; (8005bac <TIM_Base_SetConfig+0x120>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d01b      	beq.n	8005b3e <TIM_Base_SetConfig+0xb2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a29      	ldr	r2, [pc, #164]	; (8005bb0 <TIM_Base_SetConfig+0x124>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d017      	beq.n	8005b3e <TIM_Base_SetConfig+0xb2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a28      	ldr	r2, [pc, #160]	; (8005bb4 <TIM_Base_SetConfig+0x128>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d013      	beq.n	8005b3e <TIM_Base_SetConfig+0xb2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a27      	ldr	r2, [pc, #156]	; (8005bb8 <TIM_Base_SetConfig+0x12c>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d00f      	beq.n	8005b3e <TIM_Base_SetConfig+0xb2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a26      	ldr	r2, [pc, #152]	; (8005bbc <TIM_Base_SetConfig+0x130>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d00b      	beq.n	8005b3e <TIM_Base_SetConfig+0xb2>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a25      	ldr	r2, [pc, #148]	; (8005bc0 <TIM_Base_SetConfig+0x134>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d007      	beq.n	8005b3e <TIM_Base_SetConfig+0xb2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a24      	ldr	r2, [pc, #144]	; (8005bc4 <TIM_Base_SetConfig+0x138>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d003      	beq.n	8005b3e <TIM_Base_SetConfig+0xb2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a23      	ldr	r2, [pc, #140]	; (8005bc8 <TIM_Base_SetConfig+0x13c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d108      	bne.n	8005b50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a0a      	ldr	r2, [pc, #40]	; (8005ba0 <TIM_Base_SetConfig+0x114>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d003      	beq.n	8005b84 <TIM_Base_SetConfig+0xf8>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a0c      	ldr	r2, [pc, #48]	; (8005bb0 <TIM_Base_SetConfig+0x124>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d103      	bne.n	8005b8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	691a      	ldr	r2, [r3, #16]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	615a      	str	r2, [r3, #20]
}
 8005b92:	bf00      	nop
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	40010000 	.word	0x40010000
 8005ba4:	40000400 	.word	0x40000400
 8005ba8:	40000800 	.word	0x40000800
 8005bac:	40000c00 	.word	0x40000c00
 8005bb0:	40010400 	.word	0x40010400
 8005bb4:	40014000 	.word	0x40014000
 8005bb8:	40014400 	.word	0x40014400
 8005bbc:	40014800 	.word	0x40014800
 8005bc0:	40001800 	.word	0x40001800
 8005bc4:	40001c00 	.word	0x40001c00
 8005bc8:	40002000 	.word	0x40002000

08005bcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b087      	sub	sp, #28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	f023 0201 	bic.w	r2, r3, #1
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f023 0303 	bic.w	r3, r3, #3
 8005c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f023 0302 	bic.w	r3, r3, #2
 8005c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a20      	ldr	r2, [pc, #128]	; (8005ca4 <TIM_OC1_SetConfig+0xd8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d003      	beq.n	8005c30 <TIM_OC1_SetConfig+0x64>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a1f      	ldr	r2, [pc, #124]	; (8005ca8 <TIM_OC1_SetConfig+0xdc>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d10c      	bne.n	8005c4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f023 0308 	bic.w	r3, r3, #8
 8005c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f023 0304 	bic.w	r3, r3, #4
 8005c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a15      	ldr	r2, [pc, #84]	; (8005ca4 <TIM_OC1_SetConfig+0xd8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d003      	beq.n	8005c5a <TIM_OC1_SetConfig+0x8e>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a14      	ldr	r2, [pc, #80]	; (8005ca8 <TIM_OC1_SetConfig+0xdc>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d111      	bne.n	8005c7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	621a      	str	r2, [r3, #32]
}
 8005c98:	bf00      	nop
 8005c9a:	371c      	adds	r7, #28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	40010000 	.word	0x40010000
 8005ca8:	40010400 	.word	0x40010400

08005cac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	f023 0210 	bic.w	r2, r3, #16
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	021b      	lsls	r3, r3, #8
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f023 0320 	bic.w	r3, r3, #32
 8005cf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	011b      	lsls	r3, r3, #4
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a22      	ldr	r2, [pc, #136]	; (8005d90 <TIM_OC2_SetConfig+0xe4>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d003      	beq.n	8005d14 <TIM_OC2_SetConfig+0x68>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a21      	ldr	r2, [pc, #132]	; (8005d94 <TIM_OC2_SetConfig+0xe8>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d10d      	bne.n	8005d30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a17      	ldr	r2, [pc, #92]	; (8005d90 <TIM_OC2_SetConfig+0xe4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d003      	beq.n	8005d40 <TIM_OC2_SetConfig+0x94>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a16      	ldr	r2, [pc, #88]	; (8005d94 <TIM_OC2_SetConfig+0xe8>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d113      	bne.n	8005d68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	621a      	str	r2, [r3, #32]
}
 8005d82:	bf00      	nop
 8005d84:	371c      	adds	r7, #28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	40010000 	.word	0x40010000
 8005d94:	40010400 	.word	0x40010400

08005d98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f023 0303 	bic.w	r3, r3, #3
 8005dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	021b      	lsls	r3, r3, #8
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a21      	ldr	r2, [pc, #132]	; (8005e78 <TIM_OC3_SetConfig+0xe0>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d003      	beq.n	8005dfe <TIM_OC3_SetConfig+0x66>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a20      	ldr	r2, [pc, #128]	; (8005e7c <TIM_OC3_SetConfig+0xe4>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d10d      	bne.n	8005e1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	021b      	lsls	r3, r3, #8
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a16      	ldr	r2, [pc, #88]	; (8005e78 <TIM_OC3_SetConfig+0xe0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d003      	beq.n	8005e2a <TIM_OC3_SetConfig+0x92>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a15      	ldr	r2, [pc, #84]	; (8005e7c <TIM_OC3_SetConfig+0xe4>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d113      	bne.n	8005e52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	621a      	str	r2, [r3, #32]
}
 8005e6c:	bf00      	nop
 8005e6e:	371c      	adds	r7, #28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	40010000 	.word	0x40010000
 8005e7c:	40010400 	.word	0x40010400

08005e80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	021b      	lsls	r3, r3, #8
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005eca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	031b      	lsls	r3, r3, #12
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a12      	ldr	r2, [pc, #72]	; (8005f24 <TIM_OC4_SetConfig+0xa4>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d003      	beq.n	8005ee8 <TIM_OC4_SetConfig+0x68>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a11      	ldr	r2, [pc, #68]	; (8005f28 <TIM_OC4_SetConfig+0xa8>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d109      	bne.n	8005efc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	019b      	lsls	r3, r3, #6
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	621a      	str	r2, [r3, #32]
}
 8005f16:	bf00      	nop
 8005f18:	371c      	adds	r7, #28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	40010000 	.word	0x40010000
 8005f28:	40010400 	.word	0x40010400

08005f2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b087      	sub	sp, #28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f003 031f 	and.w	r3, r3, #31
 8005f3e:	2201      	movs	r2, #1
 8005f40:	fa02 f303 	lsl.w	r3, r2, r3
 8005f44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6a1a      	ldr	r2, [r3, #32]
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	43db      	mvns	r3, r3
 8005f4e:	401a      	ands	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6a1a      	ldr	r2, [r3, #32]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f003 031f 	and.w	r3, r3, #31
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	fa01 f303 	lsl.w	r3, r1, r3
 8005f64:	431a      	orrs	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	621a      	str	r2, [r3, #32]
}
 8005f6a:	bf00      	nop
 8005f6c:	371c      	adds	r7, #28
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
	...

08005f78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d101      	bne.n	8005f90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	e05a      	b.n	8006046 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a21      	ldr	r2, [pc, #132]	; (8006054 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d022      	beq.n	800601a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fdc:	d01d      	beq.n	800601a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a1d      	ldr	r2, [pc, #116]	; (8006058 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d018      	beq.n	800601a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a1b      	ldr	r2, [pc, #108]	; (800605c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d013      	beq.n	800601a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a1a      	ldr	r2, [pc, #104]	; (8006060 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d00e      	beq.n	800601a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a18      	ldr	r2, [pc, #96]	; (8006064 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d009      	beq.n	800601a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a17      	ldr	r2, [pc, #92]	; (8006068 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d004      	beq.n	800601a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a15      	ldr	r2, [pc, #84]	; (800606c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d10c      	bne.n	8006034 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006020:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	4313      	orrs	r3, r2
 800602a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	40010000 	.word	0x40010000
 8006058:	40000400 	.word	0x40000400
 800605c:	40000800 	.word	0x40000800
 8006060:	40000c00 	.word	0x40000c00
 8006064:	40010400 	.word	0x40010400
 8006068:	40014000 	.word	0x40014000
 800606c:	40001800 	.word	0x40001800

08006070 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e03f      	b.n	800612a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d106      	bne.n	80060c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7fc f8f4 	bl	80022ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2224      	movs	r2, #36	; 0x24
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fd7b 	bl	8006bd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	691a      	ldr	r2, [r3, #16]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	695a      	ldr	r2, [r3, #20]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006100:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006110:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2220      	movs	r2, #32
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2220      	movs	r2, #32
 8006124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b08a      	sub	sp, #40	; 0x28
 8006136:	af02      	add	r7, sp, #8
 8006138:	60f8      	str	r0, [r7, #12]
 800613a:	60b9      	str	r1, [r7, #8]
 800613c:	603b      	str	r3, [r7, #0]
 800613e:	4613      	mov	r3, r2
 8006140:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006142:	2300      	movs	r3, #0
 8006144:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b20      	cmp	r3, #32
 8006150:	d17c      	bne.n	800624c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <HAL_UART_Transmit+0x2c>
 8006158:	88fb      	ldrh	r3, [r7, #6]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e075      	b.n	800624e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006168:	2b01      	cmp	r3, #1
 800616a:	d101      	bne.n	8006170 <HAL_UART_Transmit+0x3e>
 800616c:	2302      	movs	r3, #2
 800616e:	e06e      	b.n	800624e <HAL_UART_Transmit+0x11c>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2221      	movs	r2, #33	; 0x21
 8006182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006186:	f7fc f971 	bl	800246c <HAL_GetTick>
 800618a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	88fa      	ldrh	r2, [r7, #6]
 8006190:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	88fa      	ldrh	r2, [r7, #6]
 8006196:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061a0:	d108      	bne.n	80061b4 <HAL_UART_Transmit+0x82>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d104      	bne.n	80061b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80061aa:	2300      	movs	r3, #0
 80061ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	61bb      	str	r3, [r7, #24]
 80061b2:	e003      	b.n	80061bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061b8:	2300      	movs	r3, #0
 80061ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80061c4:	e02a      	b.n	800621c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2200      	movs	r2, #0
 80061ce:	2180      	movs	r1, #128	; 0x80
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 faf9 	bl	80067c8 <UART_WaitOnFlagUntilTimeout>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e036      	b.n	800624e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10b      	bne.n	80061fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	461a      	mov	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	3302      	adds	r3, #2
 80061fa:	61bb      	str	r3, [r7, #24]
 80061fc:	e007      	b.n	800620e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	781a      	ldrb	r2, [r3, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	3301      	adds	r3, #1
 800620c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006212:	b29b      	uxth	r3, r3
 8006214:	3b01      	subs	r3, #1
 8006216:	b29a      	uxth	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006220:	b29b      	uxth	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1cf      	bne.n	80061c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2200      	movs	r2, #0
 800622e:	2140      	movs	r1, #64	; 0x40
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f000 fac9 	bl	80067c8 <UART_WaitOnFlagUntilTimeout>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e006      	b.n	800624e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2220      	movs	r2, #32
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006248:	2300      	movs	r3, #0
 800624a:	e000      	b.n	800624e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800624c:	2302      	movs	r3, #2
  }
}
 800624e:	4618      	mov	r0, r3
 8006250:	3720      	adds	r7, #32
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
	...

08006258 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b0ba      	sub	sp, #232	; 0xe8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800627e:	2300      	movs	r3, #0
 8006280:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006284:	2300      	movs	r3, #0
 8006286:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800628a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800628e:	f003 030f 	and.w	r3, r3, #15
 8006292:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006296:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10f      	bne.n	80062be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800629e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a2:	f003 0320 	and.w	r3, r3, #32
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d009      	beq.n	80062be <HAL_UART_IRQHandler+0x66>
 80062aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ae:	f003 0320 	and.w	r3, r3, #32
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fbd3 	bl	8006a62 <UART_Receive_IT>
      return;
 80062bc:	e256      	b.n	800676c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80062be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 80de 	beq.w	8006484 <HAL_UART_IRQHandler+0x22c>
 80062c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d106      	bne.n	80062e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 80d1 	beq.w	8006484 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00b      	beq.n	8006306 <HAL_UART_IRQHandler+0xae>
 80062ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d005      	beq.n	8006306 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	f043 0201 	orr.w	r2, r3, #1
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800630a:	f003 0304 	and.w	r3, r3, #4
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00b      	beq.n	800632a <HAL_UART_IRQHandler+0xd2>
 8006312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d005      	beq.n	800632a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006322:	f043 0202 	orr.w	r2, r3, #2
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800632a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800632e:	f003 0302 	and.w	r3, r3, #2
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00b      	beq.n	800634e <HAL_UART_IRQHandler+0xf6>
 8006336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	d005      	beq.n	800634e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006346:	f043 0204 	orr.w	r2, r3, #4
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800634e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006352:	f003 0308 	and.w	r3, r3, #8
 8006356:	2b00      	cmp	r3, #0
 8006358:	d011      	beq.n	800637e <HAL_UART_IRQHandler+0x126>
 800635a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800635e:	f003 0320 	and.w	r3, r3, #32
 8006362:	2b00      	cmp	r3, #0
 8006364:	d105      	bne.n	8006372 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d005      	beq.n	800637e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006376:	f043 0208 	orr.w	r2, r3, #8
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 81ed 	beq.w	8006762 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800638c:	f003 0320 	and.w	r3, r3, #32
 8006390:	2b00      	cmp	r3, #0
 8006392:	d008      	beq.n	80063a6 <HAL_UART_IRQHandler+0x14e>
 8006394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006398:	f003 0320 	and.w	r3, r3, #32
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fb5e 	bl	8006a62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b0:	2b40      	cmp	r3, #64	; 0x40
 80063b2:	bf0c      	ite	eq
 80063b4:	2301      	moveq	r3, #1
 80063b6:	2300      	movne	r3, #0
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	f003 0308 	and.w	r3, r3, #8
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d103      	bne.n	80063d2 <HAL_UART_IRQHandler+0x17a>
 80063ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d04f      	beq.n	8006472 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fa66 	bl	80068a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e2:	2b40      	cmp	r3, #64	; 0x40
 80063e4:	d141      	bne.n	800646a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3314      	adds	r3, #20
 80063ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063f4:	e853 3f00 	ldrex	r3, [r3]
 80063f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80063fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006404:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3314      	adds	r3, #20
 800640e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006412:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006416:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800641e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006422:	e841 2300 	strex	r3, r2, [r1]
 8006426:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800642a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1d9      	bne.n	80063e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006436:	2b00      	cmp	r3, #0
 8006438:	d013      	beq.n	8006462 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643e:	4a7d      	ldr	r2, [pc, #500]	; (8006634 <HAL_UART_IRQHandler+0x3dc>)
 8006440:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006446:	4618      	mov	r0, r3
 8006448:	f7fc f99d 	bl	8002786 <HAL_DMA_Abort_IT>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d016      	beq.n	8006480 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800645c:	4610      	mov	r0, r2
 800645e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006460:	e00e      	b.n	8006480 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f99a 	bl	800679c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006468:	e00a      	b.n	8006480 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f996 	bl	800679c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006470:	e006      	b.n	8006480 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f992 	bl	800679c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800647e:	e170      	b.n	8006762 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006480:	bf00      	nop
    return;
 8006482:	e16e      	b.n	8006762 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006488:	2b01      	cmp	r3, #1
 800648a:	f040 814a 	bne.w	8006722 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800648e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006492:	f003 0310 	and.w	r3, r3, #16
 8006496:	2b00      	cmp	r3, #0
 8006498:	f000 8143 	beq.w	8006722 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800649c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064a0:	f003 0310 	and.w	r3, r3, #16
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 813c 	beq.w	8006722 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064aa:	2300      	movs	r3, #0
 80064ac:	60bb      	str	r3, [r7, #8]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	60bb      	str	r3, [r7, #8]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	60bb      	str	r3, [r7, #8]
 80064be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ca:	2b40      	cmp	r3, #64	; 0x40
 80064cc:	f040 80b4 	bne.w	8006638 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 8140 	beq.w	8006766 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064ee:	429a      	cmp	r2, r3
 80064f0:	f080 8139 	bcs.w	8006766 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006506:	f000 8088 	beq.w	800661a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	330c      	adds	r3, #12
 8006510:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006514:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006518:	e853 3f00 	ldrex	r3, [r3]
 800651c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006520:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006528:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	330c      	adds	r3, #12
 8006532:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006536:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800653a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006542:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006546:	e841 2300 	strex	r3, r2, [r1]
 800654a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800654e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1d9      	bne.n	800650a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3314      	adds	r3, #20
 800655c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006560:	e853 3f00 	ldrex	r3, [r3]
 8006564:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006566:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006568:	f023 0301 	bic.w	r3, r3, #1
 800656c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3314      	adds	r3, #20
 8006576:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800657a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800657e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006580:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006582:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006586:	e841 2300 	strex	r3, r2, [r1]
 800658a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800658c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1e1      	bne.n	8006556 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3314      	adds	r3, #20
 8006598:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800659c:	e853 3f00 	ldrex	r3, [r3]
 80065a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80065a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3314      	adds	r3, #20
 80065b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80065b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80065bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065be:	e841 2300 	strex	r3, r2, [r1]
 80065c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80065c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1e3      	bne.n	8006592 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2220      	movs	r2, #32
 80065ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	330c      	adds	r3, #12
 80065de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065e2:	e853 3f00 	ldrex	r3, [r3]
 80065e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065ea:	f023 0310 	bic.w	r3, r3, #16
 80065ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	330c      	adds	r3, #12
 80065f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80065fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80065fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006600:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006602:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006604:	e841 2300 	strex	r3, r2, [r1]
 8006608:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800660a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1e3      	bne.n	80065d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006614:	4618      	mov	r0, r3
 8006616:	f7fc f846 	bl	80026a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006622:	b29b      	uxth	r3, r3
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	b29b      	uxth	r3, r3
 8006628:	4619      	mov	r1, r3
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f8c0 	bl	80067b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006630:	e099      	b.n	8006766 <HAL_UART_IRQHandler+0x50e>
 8006632:	bf00      	nop
 8006634:	0800696b 	.word	0x0800696b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006640:	b29b      	uxth	r3, r3
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800664c:	b29b      	uxth	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 808b 	beq.w	800676a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006654:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 8086 	beq.w	800676a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	330c      	adds	r3, #12
 8006664:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800666e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006670:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006674:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	330c      	adds	r3, #12
 800667e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006682:	647a      	str	r2, [r7, #68]	; 0x44
 8006684:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006686:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006688:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800668a:	e841 2300 	strex	r3, r2, [r1]
 800668e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1e3      	bne.n	800665e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3314      	adds	r3, #20
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	e853 3f00 	ldrex	r3, [r3]
 80066a4:	623b      	str	r3, [r7, #32]
   return(result);
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	f023 0301 	bic.w	r3, r3, #1
 80066ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3314      	adds	r3, #20
 80066b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80066ba:	633a      	str	r2, [r7, #48]	; 0x30
 80066bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066c2:	e841 2300 	strex	r3, r2, [r1]
 80066c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1e3      	bne.n	8006696 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2220      	movs	r2, #32
 80066d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	330c      	adds	r3, #12
 80066e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	e853 3f00 	ldrex	r3, [r3]
 80066ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f023 0310 	bic.w	r3, r3, #16
 80066f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	330c      	adds	r3, #12
 80066fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006700:	61fa      	str	r2, [r7, #28]
 8006702:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006704:	69b9      	ldr	r1, [r7, #24]
 8006706:	69fa      	ldr	r2, [r7, #28]
 8006708:	e841 2300 	strex	r3, r2, [r1]
 800670c:	617b      	str	r3, [r7, #20]
   return(result);
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1e3      	bne.n	80066dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006714:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006718:	4619      	mov	r1, r3
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f848 	bl	80067b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006720:	e023      	b.n	800676a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800672a:	2b00      	cmp	r3, #0
 800672c:	d009      	beq.n	8006742 <HAL_UART_IRQHandler+0x4ea>
 800672e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f929 	bl	8006992 <UART_Transmit_IT>
    return;
 8006740:	e014      	b.n	800676c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00e      	beq.n	800676c <HAL_UART_IRQHandler+0x514>
 800674e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006756:	2b00      	cmp	r3, #0
 8006758:	d008      	beq.n	800676c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f969 	bl	8006a32 <UART_EndTransmit_IT>
    return;
 8006760:	e004      	b.n	800676c <HAL_UART_IRQHandler+0x514>
    return;
 8006762:	bf00      	nop
 8006764:	e002      	b.n	800676c <HAL_UART_IRQHandler+0x514>
      return;
 8006766:	bf00      	nop
 8006768:	e000      	b.n	800676c <HAL_UART_IRQHandler+0x514>
      return;
 800676a:	bf00      	nop
  }
}
 800676c:	37e8      	adds	r7, #232	; 0xe8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop

08006774 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	460b      	mov	r3, r1
 80067ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b090      	sub	sp, #64	; 0x40
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	603b      	str	r3, [r7, #0]
 80067d4:	4613      	mov	r3, r2
 80067d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067d8:	e050      	b.n	800687c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e0:	d04c      	beq.n	800687c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80067e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d007      	beq.n	80067f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80067e8:	f7fb fe40 	bl	800246c <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d241      	bcs.n	800687c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	330c      	adds	r3, #12
 80067fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	e853 3f00 	ldrex	r3, [r3]
 8006806:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800680e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	330c      	adds	r3, #12
 8006816:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006818:	637a      	str	r2, [r7, #52]	; 0x34
 800681a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800681e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006820:	e841 2300 	strex	r3, r2, [r1]
 8006824:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1e5      	bne.n	80067f8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3314      	adds	r3, #20
 8006832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	e853 3f00 	ldrex	r3, [r3]
 800683a:	613b      	str	r3, [r7, #16]
   return(result);
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f023 0301 	bic.w	r3, r3, #1
 8006842:	63bb      	str	r3, [r7, #56]	; 0x38
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3314      	adds	r3, #20
 800684a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800684c:	623a      	str	r2, [r7, #32]
 800684e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006850:	69f9      	ldr	r1, [r7, #28]
 8006852:	6a3a      	ldr	r2, [r7, #32]
 8006854:	e841 2300 	strex	r3, r2, [r1]
 8006858:	61bb      	str	r3, [r7, #24]
   return(result);
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1e5      	bne.n	800682c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2220      	movs	r2, #32
 8006864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2220      	movs	r2, #32
 800686c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e00f      	b.n	800689c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	4013      	ands	r3, r2
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	429a      	cmp	r2, r3
 800688a:	bf0c      	ite	eq
 800688c:	2301      	moveq	r3, #1
 800688e:	2300      	movne	r3, #0
 8006890:	b2db      	uxtb	r3, r3
 8006892:	461a      	mov	r2, r3
 8006894:	79fb      	ldrb	r3, [r7, #7]
 8006896:	429a      	cmp	r2, r3
 8006898:	d09f      	beq.n	80067da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3740      	adds	r7, #64	; 0x40
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b095      	sub	sp, #84	; 0x54
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	330c      	adds	r3, #12
 80068b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b6:	e853 3f00 	ldrex	r3, [r3]
 80068ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	330c      	adds	r3, #12
 80068ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068cc:	643a      	str	r2, [r7, #64]	; 0x40
 80068ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068d4:	e841 2300 	strex	r3, r2, [r1]
 80068d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1e5      	bne.n	80068ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3314      	adds	r3, #20
 80068e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	e853 3f00 	ldrex	r3, [r3]
 80068ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	f023 0301 	bic.w	r3, r3, #1
 80068f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	3314      	adds	r3, #20
 80068fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006900:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006902:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006904:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006908:	e841 2300 	strex	r3, r2, [r1]
 800690c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1e5      	bne.n	80068e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006918:	2b01      	cmp	r3, #1
 800691a:	d119      	bne.n	8006950 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	330c      	adds	r3, #12
 8006922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	e853 3f00 	ldrex	r3, [r3]
 800692a:	60bb      	str	r3, [r7, #8]
   return(result);
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f023 0310 	bic.w	r3, r3, #16
 8006932:	647b      	str	r3, [r7, #68]	; 0x44
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	330c      	adds	r3, #12
 800693a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800693c:	61ba      	str	r2, [r7, #24]
 800693e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006940:	6979      	ldr	r1, [r7, #20]
 8006942:	69ba      	ldr	r2, [r7, #24]
 8006944:	e841 2300 	strex	r3, r2, [r1]
 8006948:	613b      	str	r3, [r7, #16]
   return(result);
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1e5      	bne.n	800691c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2220      	movs	r2, #32
 8006954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800695e:	bf00      	nop
 8006960:	3754      	adds	r7, #84	; 0x54
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b084      	sub	sp, #16
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006976:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f7ff ff09 	bl	800679c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800698a:	bf00      	nop
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006992:	b480      	push	{r7}
 8006994:	b085      	sub	sp, #20
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b21      	cmp	r3, #33	; 0x21
 80069a4:	d13e      	bne.n	8006a24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ae:	d114      	bne.n	80069da <UART_Transmit_IT+0x48>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d110      	bne.n	80069da <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	461a      	mov	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	1c9a      	adds	r2, r3, #2
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	621a      	str	r2, [r3, #32]
 80069d8:	e008      	b.n	80069ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	1c59      	adds	r1, r3, #1
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	6211      	str	r1, [r2, #32]
 80069e4:	781a      	ldrb	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	3b01      	subs	r3, #1
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	4619      	mov	r1, r3
 80069fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10f      	bne.n	8006a20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68da      	ldr	r2, [r3, #12]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68da      	ldr	r2, [r3, #12]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a20:	2300      	movs	r3, #0
 8006a22:	e000      	b.n	8006a26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a24:	2302      	movs	r3, #2
  }
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b082      	sub	sp, #8
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68da      	ldr	r2, [r3, #12]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2220      	movs	r2, #32
 8006a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7ff fe8e 	bl	8006774 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b08c      	sub	sp, #48	; 0x30
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b22      	cmp	r3, #34	; 0x22
 8006a74:	f040 80ab 	bne.w	8006bce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a80:	d117      	bne.n	8006ab2 <UART_Receive_IT+0x50>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d113      	bne.n	8006ab2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a92:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aaa:	1c9a      	adds	r2, r3, #2
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	629a      	str	r2, [r3, #40]	; 0x28
 8006ab0:	e026      	b.n	8006b00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac4:	d007      	beq.n	8006ad6 <UART_Receive_IT+0x74>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10a      	bne.n	8006ae4 <UART_Receive_IT+0x82>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d106      	bne.n	8006ae4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae0:	701a      	strb	r2, [r3, #0]
 8006ae2:	e008      	b.n	8006af6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afa:	1c5a      	adds	r2, r3, #1
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	3b01      	subs	r3, #1
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d15a      	bne.n	8006bca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68da      	ldr	r2, [r3, #12]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f022 0220 	bic.w	r2, r2, #32
 8006b22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	695a      	ldr	r2, [r3, #20]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0201 	bic.w	r2, r2, #1
 8006b42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2220      	movs	r2, #32
 8006b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d135      	bne.n	8006bc0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	330c      	adds	r3, #12
 8006b60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	613b      	str	r3, [r7, #16]
   return(result);
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	f023 0310 	bic.w	r3, r3, #16
 8006b70:	627b      	str	r3, [r7, #36]	; 0x24
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	330c      	adds	r3, #12
 8006b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b7a:	623a      	str	r2, [r7, #32]
 8006b7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7e:	69f9      	ldr	r1, [r7, #28]
 8006b80:	6a3a      	ldr	r2, [r7, #32]
 8006b82:	e841 2300 	strex	r3, r2, [r1]
 8006b86:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1e5      	bne.n	8006b5a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0310 	and.w	r3, r3, #16
 8006b98:	2b10      	cmp	r3, #16
 8006b9a:	d10a      	bne.n	8006bb2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7ff fdf9 	bl	80067b0 <HAL_UARTEx_RxEventCallback>
 8006bbe:	e002      	b.n	8006bc6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7ff fde1 	bl	8006788 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	e002      	b.n	8006bd0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	e000      	b.n	8006bd0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006bce:	2302      	movs	r3, #2
  }
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3730      	adds	r7, #48	; 0x30
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bdc:	b09f      	sub	sp, #124	; 0x7c
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bee:	68d9      	ldr	r1, [r3, #12]
 8006bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	ea40 0301 	orr.w	r3, r0, r1
 8006bf8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bfc:	689a      	ldr	r2, [r3, #8]
 8006bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	431a      	orrs	r2, r3
 8006c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c06:	695b      	ldr	r3, [r3, #20]
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c1c:	f021 010c 	bic.w	r1, r1, #12
 8006c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c26:	430b      	orrs	r3, r1
 8006c28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c36:	6999      	ldr	r1, [r3, #24]
 8006c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	ea40 0301 	orr.w	r3, r0, r1
 8006c40:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	4bc5      	ldr	r3, [pc, #788]	; (8006f5c <UART_SetConfig+0x384>)
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d004      	beq.n	8006c56 <UART_SetConfig+0x7e>
 8006c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	4bc3      	ldr	r3, [pc, #780]	; (8006f60 <UART_SetConfig+0x388>)
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d103      	bne.n	8006c5e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c56:	f7fe fb3b 	bl	80052d0 <HAL_RCC_GetPCLK2Freq>
 8006c5a:	6778      	str	r0, [r7, #116]	; 0x74
 8006c5c:	e002      	b.n	8006c64 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c5e:	f7fe fb23 	bl	80052a8 <HAL_RCC_GetPCLK1Freq>
 8006c62:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c6c:	f040 80b6 	bne.w	8006ddc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c72:	461c      	mov	r4, r3
 8006c74:	f04f 0500 	mov.w	r5, #0
 8006c78:	4622      	mov	r2, r4
 8006c7a:	462b      	mov	r3, r5
 8006c7c:	1891      	adds	r1, r2, r2
 8006c7e:	6439      	str	r1, [r7, #64]	; 0x40
 8006c80:	415b      	adcs	r3, r3
 8006c82:	647b      	str	r3, [r7, #68]	; 0x44
 8006c84:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c88:	1912      	adds	r2, r2, r4
 8006c8a:	eb45 0303 	adc.w	r3, r5, r3
 8006c8e:	f04f 0000 	mov.w	r0, #0
 8006c92:	f04f 0100 	mov.w	r1, #0
 8006c96:	00d9      	lsls	r1, r3, #3
 8006c98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c9c:	00d0      	lsls	r0, r2, #3
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	1911      	adds	r1, r2, r4
 8006ca4:	6639      	str	r1, [r7, #96]	; 0x60
 8006ca6:	416b      	adcs	r3, r5
 8006ca8:	667b      	str	r3, [r7, #100]	; 0x64
 8006caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f04f 0300 	mov.w	r3, #0
 8006cb4:	1891      	adds	r1, r2, r2
 8006cb6:	63b9      	str	r1, [r7, #56]	; 0x38
 8006cb8:	415b      	adcs	r3, r3
 8006cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006cc0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006cc4:	f7f9 fe72 	bl	80009ac <__aeabi_uldivmod>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4ba5      	ldr	r3, [pc, #660]	; (8006f64 <UART_SetConfig+0x38c>)
 8006cce:	fba3 2302 	umull	r2, r3, r3, r2
 8006cd2:	095b      	lsrs	r3, r3, #5
 8006cd4:	011e      	lsls	r6, r3, #4
 8006cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cd8:	461c      	mov	r4, r3
 8006cda:	f04f 0500 	mov.w	r5, #0
 8006cde:	4622      	mov	r2, r4
 8006ce0:	462b      	mov	r3, r5
 8006ce2:	1891      	adds	r1, r2, r2
 8006ce4:	6339      	str	r1, [r7, #48]	; 0x30
 8006ce6:	415b      	adcs	r3, r3
 8006ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8006cea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006cee:	1912      	adds	r2, r2, r4
 8006cf0:	eb45 0303 	adc.w	r3, r5, r3
 8006cf4:	f04f 0000 	mov.w	r0, #0
 8006cf8:	f04f 0100 	mov.w	r1, #0
 8006cfc:	00d9      	lsls	r1, r3, #3
 8006cfe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d02:	00d0      	lsls	r0, r2, #3
 8006d04:	4602      	mov	r2, r0
 8006d06:	460b      	mov	r3, r1
 8006d08:	1911      	adds	r1, r2, r4
 8006d0a:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d0c:	416b      	adcs	r3, r5
 8006d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	461a      	mov	r2, r3
 8006d16:	f04f 0300 	mov.w	r3, #0
 8006d1a:	1891      	adds	r1, r2, r2
 8006d1c:	62b9      	str	r1, [r7, #40]	; 0x28
 8006d1e:	415b      	adcs	r3, r3
 8006d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d26:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006d2a:	f7f9 fe3f 	bl	80009ac <__aeabi_uldivmod>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	460b      	mov	r3, r1
 8006d32:	4b8c      	ldr	r3, [pc, #560]	; (8006f64 <UART_SetConfig+0x38c>)
 8006d34:	fba3 1302 	umull	r1, r3, r3, r2
 8006d38:	095b      	lsrs	r3, r3, #5
 8006d3a:	2164      	movs	r1, #100	; 0x64
 8006d3c:	fb01 f303 	mul.w	r3, r1, r3
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	00db      	lsls	r3, r3, #3
 8006d44:	3332      	adds	r3, #50	; 0x32
 8006d46:	4a87      	ldr	r2, [pc, #540]	; (8006f64 <UART_SetConfig+0x38c>)
 8006d48:	fba2 2303 	umull	r2, r3, r2, r3
 8006d4c:	095b      	lsrs	r3, r3, #5
 8006d4e:	005b      	lsls	r3, r3, #1
 8006d50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d54:	441e      	add	r6, r3
 8006d56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f04f 0100 	mov.w	r1, #0
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	1894      	adds	r4, r2, r2
 8006d64:	623c      	str	r4, [r7, #32]
 8006d66:	415b      	adcs	r3, r3
 8006d68:	627b      	str	r3, [r7, #36]	; 0x24
 8006d6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d6e:	1812      	adds	r2, r2, r0
 8006d70:	eb41 0303 	adc.w	r3, r1, r3
 8006d74:	f04f 0400 	mov.w	r4, #0
 8006d78:	f04f 0500 	mov.w	r5, #0
 8006d7c:	00dd      	lsls	r5, r3, #3
 8006d7e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d82:	00d4      	lsls	r4, r2, #3
 8006d84:	4622      	mov	r2, r4
 8006d86:	462b      	mov	r3, r5
 8006d88:	1814      	adds	r4, r2, r0
 8006d8a:	653c      	str	r4, [r7, #80]	; 0x50
 8006d8c:	414b      	adcs	r3, r1
 8006d8e:	657b      	str	r3, [r7, #84]	; 0x54
 8006d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	461a      	mov	r2, r3
 8006d96:	f04f 0300 	mov.w	r3, #0
 8006d9a:	1891      	adds	r1, r2, r2
 8006d9c:	61b9      	str	r1, [r7, #24]
 8006d9e:	415b      	adcs	r3, r3
 8006da0:	61fb      	str	r3, [r7, #28]
 8006da2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006da6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006daa:	f7f9 fdff 	bl	80009ac <__aeabi_uldivmod>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	4b6c      	ldr	r3, [pc, #432]	; (8006f64 <UART_SetConfig+0x38c>)
 8006db4:	fba3 1302 	umull	r1, r3, r3, r2
 8006db8:	095b      	lsrs	r3, r3, #5
 8006dba:	2164      	movs	r1, #100	; 0x64
 8006dbc:	fb01 f303 	mul.w	r3, r1, r3
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	00db      	lsls	r3, r3, #3
 8006dc4:	3332      	adds	r3, #50	; 0x32
 8006dc6:	4a67      	ldr	r2, [pc, #412]	; (8006f64 <UART_SetConfig+0x38c>)
 8006dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dcc:	095b      	lsrs	r3, r3, #5
 8006dce:	f003 0207 	and.w	r2, r3, #7
 8006dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4432      	add	r2, r6
 8006dd8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006dda:	e0b9      	b.n	8006f50 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ddc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dde:	461c      	mov	r4, r3
 8006de0:	f04f 0500 	mov.w	r5, #0
 8006de4:	4622      	mov	r2, r4
 8006de6:	462b      	mov	r3, r5
 8006de8:	1891      	adds	r1, r2, r2
 8006dea:	6139      	str	r1, [r7, #16]
 8006dec:	415b      	adcs	r3, r3
 8006dee:	617b      	str	r3, [r7, #20]
 8006df0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006df4:	1912      	adds	r2, r2, r4
 8006df6:	eb45 0303 	adc.w	r3, r5, r3
 8006dfa:	f04f 0000 	mov.w	r0, #0
 8006dfe:	f04f 0100 	mov.w	r1, #0
 8006e02:	00d9      	lsls	r1, r3, #3
 8006e04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e08:	00d0      	lsls	r0, r2, #3
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	eb12 0804 	adds.w	r8, r2, r4
 8006e12:	eb43 0905 	adc.w	r9, r3, r5
 8006e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f04f 0100 	mov.w	r1, #0
 8006e20:	f04f 0200 	mov.w	r2, #0
 8006e24:	f04f 0300 	mov.w	r3, #0
 8006e28:	008b      	lsls	r3, r1, #2
 8006e2a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e2e:	0082      	lsls	r2, r0, #2
 8006e30:	4640      	mov	r0, r8
 8006e32:	4649      	mov	r1, r9
 8006e34:	f7f9 fdba 	bl	80009ac <__aeabi_uldivmod>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	4b49      	ldr	r3, [pc, #292]	; (8006f64 <UART_SetConfig+0x38c>)
 8006e3e:	fba3 2302 	umull	r2, r3, r3, r2
 8006e42:	095b      	lsrs	r3, r3, #5
 8006e44:	011e      	lsls	r6, r3, #4
 8006e46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f04f 0100 	mov.w	r1, #0
 8006e4e:	4602      	mov	r2, r0
 8006e50:	460b      	mov	r3, r1
 8006e52:	1894      	adds	r4, r2, r2
 8006e54:	60bc      	str	r4, [r7, #8]
 8006e56:	415b      	adcs	r3, r3
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e5e:	1812      	adds	r2, r2, r0
 8006e60:	eb41 0303 	adc.w	r3, r1, r3
 8006e64:	f04f 0400 	mov.w	r4, #0
 8006e68:	f04f 0500 	mov.w	r5, #0
 8006e6c:	00dd      	lsls	r5, r3, #3
 8006e6e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e72:	00d4      	lsls	r4, r2, #3
 8006e74:	4622      	mov	r2, r4
 8006e76:	462b      	mov	r3, r5
 8006e78:	1814      	adds	r4, r2, r0
 8006e7a:	64bc      	str	r4, [r7, #72]	; 0x48
 8006e7c:	414b      	adcs	r3, r1
 8006e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f04f 0100 	mov.w	r1, #0
 8006e8a:	f04f 0200 	mov.w	r2, #0
 8006e8e:	f04f 0300 	mov.w	r3, #0
 8006e92:	008b      	lsls	r3, r1, #2
 8006e94:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e98:	0082      	lsls	r2, r0, #2
 8006e9a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006e9e:	f7f9 fd85 	bl	80009ac <__aeabi_uldivmod>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	4b2f      	ldr	r3, [pc, #188]	; (8006f64 <UART_SetConfig+0x38c>)
 8006ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8006eac:	095b      	lsrs	r3, r3, #5
 8006eae:	2164      	movs	r1, #100	; 0x64
 8006eb0:	fb01 f303 	mul.w	r3, r1, r3
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	011b      	lsls	r3, r3, #4
 8006eb8:	3332      	adds	r3, #50	; 0x32
 8006eba:	4a2a      	ldr	r2, [pc, #168]	; (8006f64 <UART_SetConfig+0x38c>)
 8006ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec0:	095b      	lsrs	r3, r3, #5
 8006ec2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ec6:	441e      	add	r6, r3
 8006ec8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f04f 0100 	mov.w	r1, #0
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	1894      	adds	r4, r2, r2
 8006ed6:	603c      	str	r4, [r7, #0]
 8006ed8:	415b      	adcs	r3, r3
 8006eda:	607b      	str	r3, [r7, #4]
 8006edc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ee0:	1812      	adds	r2, r2, r0
 8006ee2:	eb41 0303 	adc.w	r3, r1, r3
 8006ee6:	f04f 0400 	mov.w	r4, #0
 8006eea:	f04f 0500 	mov.w	r5, #0
 8006eee:	00dd      	lsls	r5, r3, #3
 8006ef0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ef4:	00d4      	lsls	r4, r2, #3
 8006ef6:	4622      	mov	r2, r4
 8006ef8:	462b      	mov	r3, r5
 8006efa:	eb12 0a00 	adds.w	sl, r2, r0
 8006efe:	eb43 0b01 	adc.w	fp, r3, r1
 8006f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f04f 0100 	mov.w	r1, #0
 8006f0c:	f04f 0200 	mov.w	r2, #0
 8006f10:	f04f 0300 	mov.w	r3, #0
 8006f14:	008b      	lsls	r3, r1, #2
 8006f16:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f1a:	0082      	lsls	r2, r0, #2
 8006f1c:	4650      	mov	r0, sl
 8006f1e:	4659      	mov	r1, fp
 8006f20:	f7f9 fd44 	bl	80009ac <__aeabi_uldivmod>
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	4b0e      	ldr	r3, [pc, #56]	; (8006f64 <UART_SetConfig+0x38c>)
 8006f2a:	fba3 1302 	umull	r1, r3, r3, r2
 8006f2e:	095b      	lsrs	r3, r3, #5
 8006f30:	2164      	movs	r1, #100	; 0x64
 8006f32:	fb01 f303 	mul.w	r3, r1, r3
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	011b      	lsls	r3, r3, #4
 8006f3a:	3332      	adds	r3, #50	; 0x32
 8006f3c:	4a09      	ldr	r2, [pc, #36]	; (8006f64 <UART_SetConfig+0x38c>)
 8006f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f42:	095b      	lsrs	r3, r3, #5
 8006f44:	f003 020f 	and.w	r2, r3, #15
 8006f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4432      	add	r2, r6
 8006f4e:	609a      	str	r2, [r3, #8]
}
 8006f50:	bf00      	nop
 8006f52:	377c      	adds	r7, #124	; 0x7c
 8006f54:	46bd      	mov	sp, r7
 8006f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f5a:	bf00      	nop
 8006f5c:	40011000 	.word	0x40011000
 8006f60:	40011400 	.word	0x40011400
 8006f64:	51eb851f 	.word	0x51eb851f

08006f68 <__errno>:
 8006f68:	4b01      	ldr	r3, [pc, #4]	; (8006f70 <__errno+0x8>)
 8006f6a:	6818      	ldr	r0, [r3, #0]
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	20000c6c 	.word	0x20000c6c

08006f74 <__libc_init_array>:
 8006f74:	b570      	push	{r4, r5, r6, lr}
 8006f76:	4d0d      	ldr	r5, [pc, #52]	; (8006fac <__libc_init_array+0x38>)
 8006f78:	4c0d      	ldr	r4, [pc, #52]	; (8006fb0 <__libc_init_array+0x3c>)
 8006f7a:	1b64      	subs	r4, r4, r5
 8006f7c:	10a4      	asrs	r4, r4, #2
 8006f7e:	2600      	movs	r6, #0
 8006f80:	42a6      	cmp	r6, r4
 8006f82:	d109      	bne.n	8006f98 <__libc_init_array+0x24>
 8006f84:	4d0b      	ldr	r5, [pc, #44]	; (8006fb4 <__libc_init_array+0x40>)
 8006f86:	4c0c      	ldr	r4, [pc, #48]	; (8006fb8 <__libc_init_array+0x44>)
 8006f88:	f000 fc62 	bl	8007850 <_init>
 8006f8c:	1b64      	subs	r4, r4, r5
 8006f8e:	10a4      	asrs	r4, r4, #2
 8006f90:	2600      	movs	r6, #0
 8006f92:	42a6      	cmp	r6, r4
 8006f94:	d105      	bne.n	8006fa2 <__libc_init_array+0x2e>
 8006f96:	bd70      	pop	{r4, r5, r6, pc}
 8006f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f9c:	4798      	blx	r3
 8006f9e:	3601      	adds	r6, #1
 8006fa0:	e7ee      	b.n	8006f80 <__libc_init_array+0xc>
 8006fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fa6:	4798      	blx	r3
 8006fa8:	3601      	adds	r6, #1
 8006faa:	e7f2      	b.n	8006f92 <__libc_init_array+0x1e>
 8006fac:	08007bf8 	.word	0x08007bf8
 8006fb0:	08007bf8 	.word	0x08007bf8
 8006fb4:	08007bf8 	.word	0x08007bf8
 8006fb8:	08007bfc 	.word	0x08007bfc

08006fbc <memset>:
 8006fbc:	4402      	add	r2, r0
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d100      	bne.n	8006fc6 <memset+0xa>
 8006fc4:	4770      	bx	lr
 8006fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8006fca:	e7f9      	b.n	8006fc0 <memset+0x4>

08006fcc <sniprintf>:
 8006fcc:	b40c      	push	{r2, r3}
 8006fce:	b530      	push	{r4, r5, lr}
 8006fd0:	4b17      	ldr	r3, [pc, #92]	; (8007030 <sniprintf+0x64>)
 8006fd2:	1e0c      	subs	r4, r1, #0
 8006fd4:	681d      	ldr	r5, [r3, #0]
 8006fd6:	b09d      	sub	sp, #116	; 0x74
 8006fd8:	da08      	bge.n	8006fec <sniprintf+0x20>
 8006fda:	238b      	movs	r3, #139	; 0x8b
 8006fdc:	602b      	str	r3, [r5, #0]
 8006fde:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe2:	b01d      	add	sp, #116	; 0x74
 8006fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fe8:	b002      	add	sp, #8
 8006fea:	4770      	bx	lr
 8006fec:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006ff0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006ff4:	bf14      	ite	ne
 8006ff6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ffa:	4623      	moveq	r3, r4
 8006ffc:	9304      	str	r3, [sp, #16]
 8006ffe:	9307      	str	r3, [sp, #28]
 8007000:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007004:	9002      	str	r0, [sp, #8]
 8007006:	9006      	str	r0, [sp, #24]
 8007008:	f8ad 3016 	strh.w	r3, [sp, #22]
 800700c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800700e:	ab21      	add	r3, sp, #132	; 0x84
 8007010:	a902      	add	r1, sp, #8
 8007012:	4628      	mov	r0, r5
 8007014:	9301      	str	r3, [sp, #4]
 8007016:	f000 f869 	bl	80070ec <_svfiprintf_r>
 800701a:	1c43      	adds	r3, r0, #1
 800701c:	bfbc      	itt	lt
 800701e:	238b      	movlt	r3, #139	; 0x8b
 8007020:	602b      	strlt	r3, [r5, #0]
 8007022:	2c00      	cmp	r4, #0
 8007024:	d0dd      	beq.n	8006fe2 <sniprintf+0x16>
 8007026:	9b02      	ldr	r3, [sp, #8]
 8007028:	2200      	movs	r2, #0
 800702a:	701a      	strb	r2, [r3, #0]
 800702c:	e7d9      	b.n	8006fe2 <sniprintf+0x16>
 800702e:	bf00      	nop
 8007030:	20000c6c 	.word	0x20000c6c

08007034 <__ssputs_r>:
 8007034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007038:	688e      	ldr	r6, [r1, #8]
 800703a:	429e      	cmp	r6, r3
 800703c:	4682      	mov	sl, r0
 800703e:	460c      	mov	r4, r1
 8007040:	4690      	mov	r8, r2
 8007042:	461f      	mov	r7, r3
 8007044:	d838      	bhi.n	80070b8 <__ssputs_r+0x84>
 8007046:	898a      	ldrh	r2, [r1, #12]
 8007048:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800704c:	d032      	beq.n	80070b4 <__ssputs_r+0x80>
 800704e:	6825      	ldr	r5, [r4, #0]
 8007050:	6909      	ldr	r1, [r1, #16]
 8007052:	eba5 0901 	sub.w	r9, r5, r1
 8007056:	6965      	ldr	r5, [r4, #20]
 8007058:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800705c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007060:	3301      	adds	r3, #1
 8007062:	444b      	add	r3, r9
 8007064:	106d      	asrs	r5, r5, #1
 8007066:	429d      	cmp	r5, r3
 8007068:	bf38      	it	cc
 800706a:	461d      	movcc	r5, r3
 800706c:	0553      	lsls	r3, r2, #21
 800706e:	d531      	bpl.n	80070d4 <__ssputs_r+0xa0>
 8007070:	4629      	mov	r1, r5
 8007072:	f000 fb47 	bl	8007704 <_malloc_r>
 8007076:	4606      	mov	r6, r0
 8007078:	b950      	cbnz	r0, 8007090 <__ssputs_r+0x5c>
 800707a:	230c      	movs	r3, #12
 800707c:	f8ca 3000 	str.w	r3, [sl]
 8007080:	89a3      	ldrh	r3, [r4, #12]
 8007082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007086:	81a3      	strh	r3, [r4, #12]
 8007088:	f04f 30ff 	mov.w	r0, #4294967295
 800708c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007090:	6921      	ldr	r1, [r4, #16]
 8007092:	464a      	mov	r2, r9
 8007094:	f000 fabe 	bl	8007614 <memcpy>
 8007098:	89a3      	ldrh	r3, [r4, #12]
 800709a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800709e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a2:	81a3      	strh	r3, [r4, #12]
 80070a4:	6126      	str	r6, [r4, #16]
 80070a6:	6165      	str	r5, [r4, #20]
 80070a8:	444e      	add	r6, r9
 80070aa:	eba5 0509 	sub.w	r5, r5, r9
 80070ae:	6026      	str	r6, [r4, #0]
 80070b0:	60a5      	str	r5, [r4, #8]
 80070b2:	463e      	mov	r6, r7
 80070b4:	42be      	cmp	r6, r7
 80070b6:	d900      	bls.n	80070ba <__ssputs_r+0x86>
 80070b8:	463e      	mov	r6, r7
 80070ba:	4632      	mov	r2, r6
 80070bc:	6820      	ldr	r0, [r4, #0]
 80070be:	4641      	mov	r1, r8
 80070c0:	f000 fab6 	bl	8007630 <memmove>
 80070c4:	68a3      	ldr	r3, [r4, #8]
 80070c6:	6822      	ldr	r2, [r4, #0]
 80070c8:	1b9b      	subs	r3, r3, r6
 80070ca:	4432      	add	r2, r6
 80070cc:	60a3      	str	r3, [r4, #8]
 80070ce:	6022      	str	r2, [r4, #0]
 80070d0:	2000      	movs	r0, #0
 80070d2:	e7db      	b.n	800708c <__ssputs_r+0x58>
 80070d4:	462a      	mov	r2, r5
 80070d6:	f000 fb6f 	bl	80077b8 <_realloc_r>
 80070da:	4606      	mov	r6, r0
 80070dc:	2800      	cmp	r0, #0
 80070de:	d1e1      	bne.n	80070a4 <__ssputs_r+0x70>
 80070e0:	6921      	ldr	r1, [r4, #16]
 80070e2:	4650      	mov	r0, sl
 80070e4:	f000 fabe 	bl	8007664 <_free_r>
 80070e8:	e7c7      	b.n	800707a <__ssputs_r+0x46>
	...

080070ec <_svfiprintf_r>:
 80070ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f0:	4698      	mov	r8, r3
 80070f2:	898b      	ldrh	r3, [r1, #12]
 80070f4:	061b      	lsls	r3, r3, #24
 80070f6:	b09d      	sub	sp, #116	; 0x74
 80070f8:	4607      	mov	r7, r0
 80070fa:	460d      	mov	r5, r1
 80070fc:	4614      	mov	r4, r2
 80070fe:	d50e      	bpl.n	800711e <_svfiprintf_r+0x32>
 8007100:	690b      	ldr	r3, [r1, #16]
 8007102:	b963      	cbnz	r3, 800711e <_svfiprintf_r+0x32>
 8007104:	2140      	movs	r1, #64	; 0x40
 8007106:	f000 fafd 	bl	8007704 <_malloc_r>
 800710a:	6028      	str	r0, [r5, #0]
 800710c:	6128      	str	r0, [r5, #16]
 800710e:	b920      	cbnz	r0, 800711a <_svfiprintf_r+0x2e>
 8007110:	230c      	movs	r3, #12
 8007112:	603b      	str	r3, [r7, #0]
 8007114:	f04f 30ff 	mov.w	r0, #4294967295
 8007118:	e0d1      	b.n	80072be <_svfiprintf_r+0x1d2>
 800711a:	2340      	movs	r3, #64	; 0x40
 800711c:	616b      	str	r3, [r5, #20]
 800711e:	2300      	movs	r3, #0
 8007120:	9309      	str	r3, [sp, #36]	; 0x24
 8007122:	2320      	movs	r3, #32
 8007124:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007128:	f8cd 800c 	str.w	r8, [sp, #12]
 800712c:	2330      	movs	r3, #48	; 0x30
 800712e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80072d8 <_svfiprintf_r+0x1ec>
 8007132:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007136:	f04f 0901 	mov.w	r9, #1
 800713a:	4623      	mov	r3, r4
 800713c:	469a      	mov	sl, r3
 800713e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007142:	b10a      	cbz	r2, 8007148 <_svfiprintf_r+0x5c>
 8007144:	2a25      	cmp	r2, #37	; 0x25
 8007146:	d1f9      	bne.n	800713c <_svfiprintf_r+0x50>
 8007148:	ebba 0b04 	subs.w	fp, sl, r4
 800714c:	d00b      	beq.n	8007166 <_svfiprintf_r+0x7a>
 800714e:	465b      	mov	r3, fp
 8007150:	4622      	mov	r2, r4
 8007152:	4629      	mov	r1, r5
 8007154:	4638      	mov	r0, r7
 8007156:	f7ff ff6d 	bl	8007034 <__ssputs_r>
 800715a:	3001      	adds	r0, #1
 800715c:	f000 80aa 	beq.w	80072b4 <_svfiprintf_r+0x1c8>
 8007160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007162:	445a      	add	r2, fp
 8007164:	9209      	str	r2, [sp, #36]	; 0x24
 8007166:	f89a 3000 	ldrb.w	r3, [sl]
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 80a2 	beq.w	80072b4 <_svfiprintf_r+0x1c8>
 8007170:	2300      	movs	r3, #0
 8007172:	f04f 32ff 	mov.w	r2, #4294967295
 8007176:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800717a:	f10a 0a01 	add.w	sl, sl, #1
 800717e:	9304      	str	r3, [sp, #16]
 8007180:	9307      	str	r3, [sp, #28]
 8007182:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007186:	931a      	str	r3, [sp, #104]	; 0x68
 8007188:	4654      	mov	r4, sl
 800718a:	2205      	movs	r2, #5
 800718c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007190:	4851      	ldr	r0, [pc, #324]	; (80072d8 <_svfiprintf_r+0x1ec>)
 8007192:	f7f9 f825 	bl	80001e0 <memchr>
 8007196:	9a04      	ldr	r2, [sp, #16]
 8007198:	b9d8      	cbnz	r0, 80071d2 <_svfiprintf_r+0xe6>
 800719a:	06d0      	lsls	r0, r2, #27
 800719c:	bf44      	itt	mi
 800719e:	2320      	movmi	r3, #32
 80071a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071a4:	0711      	lsls	r1, r2, #28
 80071a6:	bf44      	itt	mi
 80071a8:	232b      	movmi	r3, #43	; 0x2b
 80071aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071ae:	f89a 3000 	ldrb.w	r3, [sl]
 80071b2:	2b2a      	cmp	r3, #42	; 0x2a
 80071b4:	d015      	beq.n	80071e2 <_svfiprintf_r+0xf6>
 80071b6:	9a07      	ldr	r2, [sp, #28]
 80071b8:	4654      	mov	r4, sl
 80071ba:	2000      	movs	r0, #0
 80071bc:	f04f 0c0a 	mov.w	ip, #10
 80071c0:	4621      	mov	r1, r4
 80071c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071c6:	3b30      	subs	r3, #48	; 0x30
 80071c8:	2b09      	cmp	r3, #9
 80071ca:	d94e      	bls.n	800726a <_svfiprintf_r+0x17e>
 80071cc:	b1b0      	cbz	r0, 80071fc <_svfiprintf_r+0x110>
 80071ce:	9207      	str	r2, [sp, #28]
 80071d0:	e014      	b.n	80071fc <_svfiprintf_r+0x110>
 80071d2:	eba0 0308 	sub.w	r3, r0, r8
 80071d6:	fa09 f303 	lsl.w	r3, r9, r3
 80071da:	4313      	orrs	r3, r2
 80071dc:	9304      	str	r3, [sp, #16]
 80071de:	46a2      	mov	sl, r4
 80071e0:	e7d2      	b.n	8007188 <_svfiprintf_r+0x9c>
 80071e2:	9b03      	ldr	r3, [sp, #12]
 80071e4:	1d19      	adds	r1, r3, #4
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	9103      	str	r1, [sp, #12]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	bfbb      	ittet	lt
 80071ee:	425b      	neglt	r3, r3
 80071f0:	f042 0202 	orrlt.w	r2, r2, #2
 80071f4:	9307      	strge	r3, [sp, #28]
 80071f6:	9307      	strlt	r3, [sp, #28]
 80071f8:	bfb8      	it	lt
 80071fa:	9204      	strlt	r2, [sp, #16]
 80071fc:	7823      	ldrb	r3, [r4, #0]
 80071fe:	2b2e      	cmp	r3, #46	; 0x2e
 8007200:	d10c      	bne.n	800721c <_svfiprintf_r+0x130>
 8007202:	7863      	ldrb	r3, [r4, #1]
 8007204:	2b2a      	cmp	r3, #42	; 0x2a
 8007206:	d135      	bne.n	8007274 <_svfiprintf_r+0x188>
 8007208:	9b03      	ldr	r3, [sp, #12]
 800720a:	1d1a      	adds	r2, r3, #4
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	9203      	str	r2, [sp, #12]
 8007210:	2b00      	cmp	r3, #0
 8007212:	bfb8      	it	lt
 8007214:	f04f 33ff 	movlt.w	r3, #4294967295
 8007218:	3402      	adds	r4, #2
 800721a:	9305      	str	r3, [sp, #20]
 800721c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80072e8 <_svfiprintf_r+0x1fc>
 8007220:	7821      	ldrb	r1, [r4, #0]
 8007222:	2203      	movs	r2, #3
 8007224:	4650      	mov	r0, sl
 8007226:	f7f8 ffdb 	bl	80001e0 <memchr>
 800722a:	b140      	cbz	r0, 800723e <_svfiprintf_r+0x152>
 800722c:	2340      	movs	r3, #64	; 0x40
 800722e:	eba0 000a 	sub.w	r0, r0, sl
 8007232:	fa03 f000 	lsl.w	r0, r3, r0
 8007236:	9b04      	ldr	r3, [sp, #16]
 8007238:	4303      	orrs	r3, r0
 800723a:	3401      	adds	r4, #1
 800723c:	9304      	str	r3, [sp, #16]
 800723e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007242:	4826      	ldr	r0, [pc, #152]	; (80072dc <_svfiprintf_r+0x1f0>)
 8007244:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007248:	2206      	movs	r2, #6
 800724a:	f7f8 ffc9 	bl	80001e0 <memchr>
 800724e:	2800      	cmp	r0, #0
 8007250:	d038      	beq.n	80072c4 <_svfiprintf_r+0x1d8>
 8007252:	4b23      	ldr	r3, [pc, #140]	; (80072e0 <_svfiprintf_r+0x1f4>)
 8007254:	bb1b      	cbnz	r3, 800729e <_svfiprintf_r+0x1b2>
 8007256:	9b03      	ldr	r3, [sp, #12]
 8007258:	3307      	adds	r3, #7
 800725a:	f023 0307 	bic.w	r3, r3, #7
 800725e:	3308      	adds	r3, #8
 8007260:	9303      	str	r3, [sp, #12]
 8007262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007264:	4433      	add	r3, r6
 8007266:	9309      	str	r3, [sp, #36]	; 0x24
 8007268:	e767      	b.n	800713a <_svfiprintf_r+0x4e>
 800726a:	fb0c 3202 	mla	r2, ip, r2, r3
 800726e:	460c      	mov	r4, r1
 8007270:	2001      	movs	r0, #1
 8007272:	e7a5      	b.n	80071c0 <_svfiprintf_r+0xd4>
 8007274:	2300      	movs	r3, #0
 8007276:	3401      	adds	r4, #1
 8007278:	9305      	str	r3, [sp, #20]
 800727a:	4619      	mov	r1, r3
 800727c:	f04f 0c0a 	mov.w	ip, #10
 8007280:	4620      	mov	r0, r4
 8007282:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007286:	3a30      	subs	r2, #48	; 0x30
 8007288:	2a09      	cmp	r2, #9
 800728a:	d903      	bls.n	8007294 <_svfiprintf_r+0x1a8>
 800728c:	2b00      	cmp	r3, #0
 800728e:	d0c5      	beq.n	800721c <_svfiprintf_r+0x130>
 8007290:	9105      	str	r1, [sp, #20]
 8007292:	e7c3      	b.n	800721c <_svfiprintf_r+0x130>
 8007294:	fb0c 2101 	mla	r1, ip, r1, r2
 8007298:	4604      	mov	r4, r0
 800729a:	2301      	movs	r3, #1
 800729c:	e7f0      	b.n	8007280 <_svfiprintf_r+0x194>
 800729e:	ab03      	add	r3, sp, #12
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	462a      	mov	r2, r5
 80072a4:	4b0f      	ldr	r3, [pc, #60]	; (80072e4 <_svfiprintf_r+0x1f8>)
 80072a6:	a904      	add	r1, sp, #16
 80072a8:	4638      	mov	r0, r7
 80072aa:	f3af 8000 	nop.w
 80072ae:	1c42      	adds	r2, r0, #1
 80072b0:	4606      	mov	r6, r0
 80072b2:	d1d6      	bne.n	8007262 <_svfiprintf_r+0x176>
 80072b4:	89ab      	ldrh	r3, [r5, #12]
 80072b6:	065b      	lsls	r3, r3, #25
 80072b8:	f53f af2c 	bmi.w	8007114 <_svfiprintf_r+0x28>
 80072bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072be:	b01d      	add	sp, #116	; 0x74
 80072c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c4:	ab03      	add	r3, sp, #12
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	462a      	mov	r2, r5
 80072ca:	4b06      	ldr	r3, [pc, #24]	; (80072e4 <_svfiprintf_r+0x1f8>)
 80072cc:	a904      	add	r1, sp, #16
 80072ce:	4638      	mov	r0, r7
 80072d0:	f000 f87a 	bl	80073c8 <_printf_i>
 80072d4:	e7eb      	b.n	80072ae <_svfiprintf_r+0x1c2>
 80072d6:	bf00      	nop
 80072d8:	08007bbc 	.word	0x08007bbc
 80072dc:	08007bc6 	.word	0x08007bc6
 80072e0:	00000000 	.word	0x00000000
 80072e4:	08007035 	.word	0x08007035
 80072e8:	08007bc2 	.word	0x08007bc2

080072ec <_printf_common>:
 80072ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f0:	4616      	mov	r6, r2
 80072f2:	4699      	mov	r9, r3
 80072f4:	688a      	ldr	r2, [r1, #8]
 80072f6:	690b      	ldr	r3, [r1, #16]
 80072f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072fc:	4293      	cmp	r3, r2
 80072fe:	bfb8      	it	lt
 8007300:	4613      	movlt	r3, r2
 8007302:	6033      	str	r3, [r6, #0]
 8007304:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007308:	4607      	mov	r7, r0
 800730a:	460c      	mov	r4, r1
 800730c:	b10a      	cbz	r2, 8007312 <_printf_common+0x26>
 800730e:	3301      	adds	r3, #1
 8007310:	6033      	str	r3, [r6, #0]
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	0699      	lsls	r1, r3, #26
 8007316:	bf42      	ittt	mi
 8007318:	6833      	ldrmi	r3, [r6, #0]
 800731a:	3302      	addmi	r3, #2
 800731c:	6033      	strmi	r3, [r6, #0]
 800731e:	6825      	ldr	r5, [r4, #0]
 8007320:	f015 0506 	ands.w	r5, r5, #6
 8007324:	d106      	bne.n	8007334 <_printf_common+0x48>
 8007326:	f104 0a19 	add.w	sl, r4, #25
 800732a:	68e3      	ldr	r3, [r4, #12]
 800732c:	6832      	ldr	r2, [r6, #0]
 800732e:	1a9b      	subs	r3, r3, r2
 8007330:	42ab      	cmp	r3, r5
 8007332:	dc26      	bgt.n	8007382 <_printf_common+0x96>
 8007334:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007338:	1e13      	subs	r3, r2, #0
 800733a:	6822      	ldr	r2, [r4, #0]
 800733c:	bf18      	it	ne
 800733e:	2301      	movne	r3, #1
 8007340:	0692      	lsls	r2, r2, #26
 8007342:	d42b      	bmi.n	800739c <_printf_common+0xb0>
 8007344:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007348:	4649      	mov	r1, r9
 800734a:	4638      	mov	r0, r7
 800734c:	47c0      	blx	r8
 800734e:	3001      	adds	r0, #1
 8007350:	d01e      	beq.n	8007390 <_printf_common+0xa4>
 8007352:	6823      	ldr	r3, [r4, #0]
 8007354:	68e5      	ldr	r5, [r4, #12]
 8007356:	6832      	ldr	r2, [r6, #0]
 8007358:	f003 0306 	and.w	r3, r3, #6
 800735c:	2b04      	cmp	r3, #4
 800735e:	bf08      	it	eq
 8007360:	1aad      	subeq	r5, r5, r2
 8007362:	68a3      	ldr	r3, [r4, #8]
 8007364:	6922      	ldr	r2, [r4, #16]
 8007366:	bf0c      	ite	eq
 8007368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800736c:	2500      	movne	r5, #0
 800736e:	4293      	cmp	r3, r2
 8007370:	bfc4      	itt	gt
 8007372:	1a9b      	subgt	r3, r3, r2
 8007374:	18ed      	addgt	r5, r5, r3
 8007376:	2600      	movs	r6, #0
 8007378:	341a      	adds	r4, #26
 800737a:	42b5      	cmp	r5, r6
 800737c:	d11a      	bne.n	80073b4 <_printf_common+0xc8>
 800737e:	2000      	movs	r0, #0
 8007380:	e008      	b.n	8007394 <_printf_common+0xa8>
 8007382:	2301      	movs	r3, #1
 8007384:	4652      	mov	r2, sl
 8007386:	4649      	mov	r1, r9
 8007388:	4638      	mov	r0, r7
 800738a:	47c0      	blx	r8
 800738c:	3001      	adds	r0, #1
 800738e:	d103      	bne.n	8007398 <_printf_common+0xac>
 8007390:	f04f 30ff 	mov.w	r0, #4294967295
 8007394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007398:	3501      	adds	r5, #1
 800739a:	e7c6      	b.n	800732a <_printf_common+0x3e>
 800739c:	18e1      	adds	r1, r4, r3
 800739e:	1c5a      	adds	r2, r3, #1
 80073a0:	2030      	movs	r0, #48	; 0x30
 80073a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073a6:	4422      	add	r2, r4
 80073a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073b0:	3302      	adds	r3, #2
 80073b2:	e7c7      	b.n	8007344 <_printf_common+0x58>
 80073b4:	2301      	movs	r3, #1
 80073b6:	4622      	mov	r2, r4
 80073b8:	4649      	mov	r1, r9
 80073ba:	4638      	mov	r0, r7
 80073bc:	47c0      	blx	r8
 80073be:	3001      	adds	r0, #1
 80073c0:	d0e6      	beq.n	8007390 <_printf_common+0xa4>
 80073c2:	3601      	adds	r6, #1
 80073c4:	e7d9      	b.n	800737a <_printf_common+0x8e>
	...

080073c8 <_printf_i>:
 80073c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073cc:	460c      	mov	r4, r1
 80073ce:	4691      	mov	r9, r2
 80073d0:	7e27      	ldrb	r7, [r4, #24]
 80073d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80073d4:	2f78      	cmp	r7, #120	; 0x78
 80073d6:	4680      	mov	r8, r0
 80073d8:	469a      	mov	sl, r3
 80073da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073de:	d807      	bhi.n	80073f0 <_printf_i+0x28>
 80073e0:	2f62      	cmp	r7, #98	; 0x62
 80073e2:	d80a      	bhi.n	80073fa <_printf_i+0x32>
 80073e4:	2f00      	cmp	r7, #0
 80073e6:	f000 80d8 	beq.w	800759a <_printf_i+0x1d2>
 80073ea:	2f58      	cmp	r7, #88	; 0x58
 80073ec:	f000 80a3 	beq.w	8007536 <_printf_i+0x16e>
 80073f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80073f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073f8:	e03a      	b.n	8007470 <_printf_i+0xa8>
 80073fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073fe:	2b15      	cmp	r3, #21
 8007400:	d8f6      	bhi.n	80073f0 <_printf_i+0x28>
 8007402:	a001      	add	r0, pc, #4	; (adr r0, 8007408 <_printf_i+0x40>)
 8007404:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007408:	08007461 	.word	0x08007461
 800740c:	08007475 	.word	0x08007475
 8007410:	080073f1 	.word	0x080073f1
 8007414:	080073f1 	.word	0x080073f1
 8007418:	080073f1 	.word	0x080073f1
 800741c:	080073f1 	.word	0x080073f1
 8007420:	08007475 	.word	0x08007475
 8007424:	080073f1 	.word	0x080073f1
 8007428:	080073f1 	.word	0x080073f1
 800742c:	080073f1 	.word	0x080073f1
 8007430:	080073f1 	.word	0x080073f1
 8007434:	08007581 	.word	0x08007581
 8007438:	080074a5 	.word	0x080074a5
 800743c:	08007563 	.word	0x08007563
 8007440:	080073f1 	.word	0x080073f1
 8007444:	080073f1 	.word	0x080073f1
 8007448:	080075a3 	.word	0x080075a3
 800744c:	080073f1 	.word	0x080073f1
 8007450:	080074a5 	.word	0x080074a5
 8007454:	080073f1 	.word	0x080073f1
 8007458:	080073f1 	.word	0x080073f1
 800745c:	0800756b 	.word	0x0800756b
 8007460:	680b      	ldr	r3, [r1, #0]
 8007462:	1d1a      	adds	r2, r3, #4
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	600a      	str	r2, [r1, #0]
 8007468:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800746c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007470:	2301      	movs	r3, #1
 8007472:	e0a3      	b.n	80075bc <_printf_i+0x1f4>
 8007474:	6825      	ldr	r5, [r4, #0]
 8007476:	6808      	ldr	r0, [r1, #0]
 8007478:	062e      	lsls	r6, r5, #24
 800747a:	f100 0304 	add.w	r3, r0, #4
 800747e:	d50a      	bpl.n	8007496 <_printf_i+0xce>
 8007480:	6805      	ldr	r5, [r0, #0]
 8007482:	600b      	str	r3, [r1, #0]
 8007484:	2d00      	cmp	r5, #0
 8007486:	da03      	bge.n	8007490 <_printf_i+0xc8>
 8007488:	232d      	movs	r3, #45	; 0x2d
 800748a:	426d      	negs	r5, r5
 800748c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007490:	485e      	ldr	r0, [pc, #376]	; (800760c <_printf_i+0x244>)
 8007492:	230a      	movs	r3, #10
 8007494:	e019      	b.n	80074ca <_printf_i+0x102>
 8007496:	f015 0f40 	tst.w	r5, #64	; 0x40
 800749a:	6805      	ldr	r5, [r0, #0]
 800749c:	600b      	str	r3, [r1, #0]
 800749e:	bf18      	it	ne
 80074a0:	b22d      	sxthne	r5, r5
 80074a2:	e7ef      	b.n	8007484 <_printf_i+0xbc>
 80074a4:	680b      	ldr	r3, [r1, #0]
 80074a6:	6825      	ldr	r5, [r4, #0]
 80074a8:	1d18      	adds	r0, r3, #4
 80074aa:	6008      	str	r0, [r1, #0]
 80074ac:	0628      	lsls	r0, r5, #24
 80074ae:	d501      	bpl.n	80074b4 <_printf_i+0xec>
 80074b0:	681d      	ldr	r5, [r3, #0]
 80074b2:	e002      	b.n	80074ba <_printf_i+0xf2>
 80074b4:	0669      	lsls	r1, r5, #25
 80074b6:	d5fb      	bpl.n	80074b0 <_printf_i+0xe8>
 80074b8:	881d      	ldrh	r5, [r3, #0]
 80074ba:	4854      	ldr	r0, [pc, #336]	; (800760c <_printf_i+0x244>)
 80074bc:	2f6f      	cmp	r7, #111	; 0x6f
 80074be:	bf0c      	ite	eq
 80074c0:	2308      	moveq	r3, #8
 80074c2:	230a      	movne	r3, #10
 80074c4:	2100      	movs	r1, #0
 80074c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074ca:	6866      	ldr	r6, [r4, #4]
 80074cc:	60a6      	str	r6, [r4, #8]
 80074ce:	2e00      	cmp	r6, #0
 80074d0:	bfa2      	ittt	ge
 80074d2:	6821      	ldrge	r1, [r4, #0]
 80074d4:	f021 0104 	bicge.w	r1, r1, #4
 80074d8:	6021      	strge	r1, [r4, #0]
 80074da:	b90d      	cbnz	r5, 80074e0 <_printf_i+0x118>
 80074dc:	2e00      	cmp	r6, #0
 80074de:	d04d      	beq.n	800757c <_printf_i+0x1b4>
 80074e0:	4616      	mov	r6, r2
 80074e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80074e6:	fb03 5711 	mls	r7, r3, r1, r5
 80074ea:	5dc7      	ldrb	r7, [r0, r7]
 80074ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074f0:	462f      	mov	r7, r5
 80074f2:	42bb      	cmp	r3, r7
 80074f4:	460d      	mov	r5, r1
 80074f6:	d9f4      	bls.n	80074e2 <_printf_i+0x11a>
 80074f8:	2b08      	cmp	r3, #8
 80074fa:	d10b      	bne.n	8007514 <_printf_i+0x14c>
 80074fc:	6823      	ldr	r3, [r4, #0]
 80074fe:	07df      	lsls	r7, r3, #31
 8007500:	d508      	bpl.n	8007514 <_printf_i+0x14c>
 8007502:	6923      	ldr	r3, [r4, #16]
 8007504:	6861      	ldr	r1, [r4, #4]
 8007506:	4299      	cmp	r1, r3
 8007508:	bfde      	ittt	le
 800750a:	2330      	movle	r3, #48	; 0x30
 800750c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007510:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007514:	1b92      	subs	r2, r2, r6
 8007516:	6122      	str	r2, [r4, #16]
 8007518:	f8cd a000 	str.w	sl, [sp]
 800751c:	464b      	mov	r3, r9
 800751e:	aa03      	add	r2, sp, #12
 8007520:	4621      	mov	r1, r4
 8007522:	4640      	mov	r0, r8
 8007524:	f7ff fee2 	bl	80072ec <_printf_common>
 8007528:	3001      	adds	r0, #1
 800752a:	d14c      	bne.n	80075c6 <_printf_i+0x1fe>
 800752c:	f04f 30ff 	mov.w	r0, #4294967295
 8007530:	b004      	add	sp, #16
 8007532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007536:	4835      	ldr	r0, [pc, #212]	; (800760c <_printf_i+0x244>)
 8007538:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800753c:	6823      	ldr	r3, [r4, #0]
 800753e:	680e      	ldr	r6, [r1, #0]
 8007540:	061f      	lsls	r7, r3, #24
 8007542:	f856 5b04 	ldr.w	r5, [r6], #4
 8007546:	600e      	str	r6, [r1, #0]
 8007548:	d514      	bpl.n	8007574 <_printf_i+0x1ac>
 800754a:	07d9      	lsls	r1, r3, #31
 800754c:	bf44      	itt	mi
 800754e:	f043 0320 	orrmi.w	r3, r3, #32
 8007552:	6023      	strmi	r3, [r4, #0]
 8007554:	b91d      	cbnz	r5, 800755e <_printf_i+0x196>
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	f023 0320 	bic.w	r3, r3, #32
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	2310      	movs	r3, #16
 8007560:	e7b0      	b.n	80074c4 <_printf_i+0xfc>
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	f043 0320 	orr.w	r3, r3, #32
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	2378      	movs	r3, #120	; 0x78
 800756c:	4828      	ldr	r0, [pc, #160]	; (8007610 <_printf_i+0x248>)
 800756e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007572:	e7e3      	b.n	800753c <_printf_i+0x174>
 8007574:	065e      	lsls	r6, r3, #25
 8007576:	bf48      	it	mi
 8007578:	b2ad      	uxthmi	r5, r5
 800757a:	e7e6      	b.n	800754a <_printf_i+0x182>
 800757c:	4616      	mov	r6, r2
 800757e:	e7bb      	b.n	80074f8 <_printf_i+0x130>
 8007580:	680b      	ldr	r3, [r1, #0]
 8007582:	6826      	ldr	r6, [r4, #0]
 8007584:	6960      	ldr	r0, [r4, #20]
 8007586:	1d1d      	adds	r5, r3, #4
 8007588:	600d      	str	r5, [r1, #0]
 800758a:	0635      	lsls	r5, r6, #24
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	d501      	bpl.n	8007594 <_printf_i+0x1cc>
 8007590:	6018      	str	r0, [r3, #0]
 8007592:	e002      	b.n	800759a <_printf_i+0x1d2>
 8007594:	0671      	lsls	r1, r6, #25
 8007596:	d5fb      	bpl.n	8007590 <_printf_i+0x1c8>
 8007598:	8018      	strh	r0, [r3, #0]
 800759a:	2300      	movs	r3, #0
 800759c:	6123      	str	r3, [r4, #16]
 800759e:	4616      	mov	r6, r2
 80075a0:	e7ba      	b.n	8007518 <_printf_i+0x150>
 80075a2:	680b      	ldr	r3, [r1, #0]
 80075a4:	1d1a      	adds	r2, r3, #4
 80075a6:	600a      	str	r2, [r1, #0]
 80075a8:	681e      	ldr	r6, [r3, #0]
 80075aa:	6862      	ldr	r2, [r4, #4]
 80075ac:	2100      	movs	r1, #0
 80075ae:	4630      	mov	r0, r6
 80075b0:	f7f8 fe16 	bl	80001e0 <memchr>
 80075b4:	b108      	cbz	r0, 80075ba <_printf_i+0x1f2>
 80075b6:	1b80      	subs	r0, r0, r6
 80075b8:	6060      	str	r0, [r4, #4]
 80075ba:	6863      	ldr	r3, [r4, #4]
 80075bc:	6123      	str	r3, [r4, #16]
 80075be:	2300      	movs	r3, #0
 80075c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075c4:	e7a8      	b.n	8007518 <_printf_i+0x150>
 80075c6:	6923      	ldr	r3, [r4, #16]
 80075c8:	4632      	mov	r2, r6
 80075ca:	4649      	mov	r1, r9
 80075cc:	4640      	mov	r0, r8
 80075ce:	47d0      	blx	sl
 80075d0:	3001      	adds	r0, #1
 80075d2:	d0ab      	beq.n	800752c <_printf_i+0x164>
 80075d4:	6823      	ldr	r3, [r4, #0]
 80075d6:	079b      	lsls	r3, r3, #30
 80075d8:	d413      	bmi.n	8007602 <_printf_i+0x23a>
 80075da:	68e0      	ldr	r0, [r4, #12]
 80075dc:	9b03      	ldr	r3, [sp, #12]
 80075de:	4298      	cmp	r0, r3
 80075e0:	bfb8      	it	lt
 80075e2:	4618      	movlt	r0, r3
 80075e4:	e7a4      	b.n	8007530 <_printf_i+0x168>
 80075e6:	2301      	movs	r3, #1
 80075e8:	4632      	mov	r2, r6
 80075ea:	4649      	mov	r1, r9
 80075ec:	4640      	mov	r0, r8
 80075ee:	47d0      	blx	sl
 80075f0:	3001      	adds	r0, #1
 80075f2:	d09b      	beq.n	800752c <_printf_i+0x164>
 80075f4:	3501      	adds	r5, #1
 80075f6:	68e3      	ldr	r3, [r4, #12]
 80075f8:	9903      	ldr	r1, [sp, #12]
 80075fa:	1a5b      	subs	r3, r3, r1
 80075fc:	42ab      	cmp	r3, r5
 80075fe:	dcf2      	bgt.n	80075e6 <_printf_i+0x21e>
 8007600:	e7eb      	b.n	80075da <_printf_i+0x212>
 8007602:	2500      	movs	r5, #0
 8007604:	f104 0619 	add.w	r6, r4, #25
 8007608:	e7f5      	b.n	80075f6 <_printf_i+0x22e>
 800760a:	bf00      	nop
 800760c:	08007bcd 	.word	0x08007bcd
 8007610:	08007bde 	.word	0x08007bde

08007614 <memcpy>:
 8007614:	440a      	add	r2, r1
 8007616:	4291      	cmp	r1, r2
 8007618:	f100 33ff 	add.w	r3, r0, #4294967295
 800761c:	d100      	bne.n	8007620 <memcpy+0xc>
 800761e:	4770      	bx	lr
 8007620:	b510      	push	{r4, lr}
 8007622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007626:	f803 4f01 	strb.w	r4, [r3, #1]!
 800762a:	4291      	cmp	r1, r2
 800762c:	d1f9      	bne.n	8007622 <memcpy+0xe>
 800762e:	bd10      	pop	{r4, pc}

08007630 <memmove>:
 8007630:	4288      	cmp	r0, r1
 8007632:	b510      	push	{r4, lr}
 8007634:	eb01 0402 	add.w	r4, r1, r2
 8007638:	d902      	bls.n	8007640 <memmove+0x10>
 800763a:	4284      	cmp	r4, r0
 800763c:	4623      	mov	r3, r4
 800763e:	d807      	bhi.n	8007650 <memmove+0x20>
 8007640:	1e43      	subs	r3, r0, #1
 8007642:	42a1      	cmp	r1, r4
 8007644:	d008      	beq.n	8007658 <memmove+0x28>
 8007646:	f811 2b01 	ldrb.w	r2, [r1], #1
 800764a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800764e:	e7f8      	b.n	8007642 <memmove+0x12>
 8007650:	4402      	add	r2, r0
 8007652:	4601      	mov	r1, r0
 8007654:	428a      	cmp	r2, r1
 8007656:	d100      	bne.n	800765a <memmove+0x2a>
 8007658:	bd10      	pop	{r4, pc}
 800765a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800765e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007662:	e7f7      	b.n	8007654 <memmove+0x24>

08007664 <_free_r>:
 8007664:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007666:	2900      	cmp	r1, #0
 8007668:	d048      	beq.n	80076fc <_free_r+0x98>
 800766a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800766e:	9001      	str	r0, [sp, #4]
 8007670:	2b00      	cmp	r3, #0
 8007672:	f1a1 0404 	sub.w	r4, r1, #4
 8007676:	bfb8      	it	lt
 8007678:	18e4      	addlt	r4, r4, r3
 800767a:	f000 f8d3 	bl	8007824 <__malloc_lock>
 800767e:	4a20      	ldr	r2, [pc, #128]	; (8007700 <_free_r+0x9c>)
 8007680:	9801      	ldr	r0, [sp, #4]
 8007682:	6813      	ldr	r3, [r2, #0]
 8007684:	4615      	mov	r5, r2
 8007686:	b933      	cbnz	r3, 8007696 <_free_r+0x32>
 8007688:	6063      	str	r3, [r4, #4]
 800768a:	6014      	str	r4, [r2, #0]
 800768c:	b003      	add	sp, #12
 800768e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007692:	f000 b8cd 	b.w	8007830 <__malloc_unlock>
 8007696:	42a3      	cmp	r3, r4
 8007698:	d90b      	bls.n	80076b2 <_free_r+0x4e>
 800769a:	6821      	ldr	r1, [r4, #0]
 800769c:	1862      	adds	r2, r4, r1
 800769e:	4293      	cmp	r3, r2
 80076a0:	bf04      	itt	eq
 80076a2:	681a      	ldreq	r2, [r3, #0]
 80076a4:	685b      	ldreq	r3, [r3, #4]
 80076a6:	6063      	str	r3, [r4, #4]
 80076a8:	bf04      	itt	eq
 80076aa:	1852      	addeq	r2, r2, r1
 80076ac:	6022      	streq	r2, [r4, #0]
 80076ae:	602c      	str	r4, [r5, #0]
 80076b0:	e7ec      	b.n	800768c <_free_r+0x28>
 80076b2:	461a      	mov	r2, r3
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	b10b      	cbz	r3, 80076bc <_free_r+0x58>
 80076b8:	42a3      	cmp	r3, r4
 80076ba:	d9fa      	bls.n	80076b2 <_free_r+0x4e>
 80076bc:	6811      	ldr	r1, [r2, #0]
 80076be:	1855      	adds	r5, r2, r1
 80076c0:	42a5      	cmp	r5, r4
 80076c2:	d10b      	bne.n	80076dc <_free_r+0x78>
 80076c4:	6824      	ldr	r4, [r4, #0]
 80076c6:	4421      	add	r1, r4
 80076c8:	1854      	adds	r4, r2, r1
 80076ca:	42a3      	cmp	r3, r4
 80076cc:	6011      	str	r1, [r2, #0]
 80076ce:	d1dd      	bne.n	800768c <_free_r+0x28>
 80076d0:	681c      	ldr	r4, [r3, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	6053      	str	r3, [r2, #4]
 80076d6:	4421      	add	r1, r4
 80076d8:	6011      	str	r1, [r2, #0]
 80076da:	e7d7      	b.n	800768c <_free_r+0x28>
 80076dc:	d902      	bls.n	80076e4 <_free_r+0x80>
 80076de:	230c      	movs	r3, #12
 80076e0:	6003      	str	r3, [r0, #0]
 80076e2:	e7d3      	b.n	800768c <_free_r+0x28>
 80076e4:	6825      	ldr	r5, [r4, #0]
 80076e6:	1961      	adds	r1, r4, r5
 80076e8:	428b      	cmp	r3, r1
 80076ea:	bf04      	itt	eq
 80076ec:	6819      	ldreq	r1, [r3, #0]
 80076ee:	685b      	ldreq	r3, [r3, #4]
 80076f0:	6063      	str	r3, [r4, #4]
 80076f2:	bf04      	itt	eq
 80076f4:	1949      	addeq	r1, r1, r5
 80076f6:	6021      	streq	r1, [r4, #0]
 80076f8:	6054      	str	r4, [r2, #4]
 80076fa:	e7c7      	b.n	800768c <_free_r+0x28>
 80076fc:	b003      	add	sp, #12
 80076fe:	bd30      	pop	{r4, r5, pc}
 8007700:	20000dc8 	.word	0x20000dc8

08007704 <_malloc_r>:
 8007704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007706:	1ccd      	adds	r5, r1, #3
 8007708:	f025 0503 	bic.w	r5, r5, #3
 800770c:	3508      	adds	r5, #8
 800770e:	2d0c      	cmp	r5, #12
 8007710:	bf38      	it	cc
 8007712:	250c      	movcc	r5, #12
 8007714:	2d00      	cmp	r5, #0
 8007716:	4606      	mov	r6, r0
 8007718:	db01      	blt.n	800771e <_malloc_r+0x1a>
 800771a:	42a9      	cmp	r1, r5
 800771c:	d903      	bls.n	8007726 <_malloc_r+0x22>
 800771e:	230c      	movs	r3, #12
 8007720:	6033      	str	r3, [r6, #0]
 8007722:	2000      	movs	r0, #0
 8007724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007726:	f000 f87d 	bl	8007824 <__malloc_lock>
 800772a:	4921      	ldr	r1, [pc, #132]	; (80077b0 <_malloc_r+0xac>)
 800772c:	680a      	ldr	r2, [r1, #0]
 800772e:	4614      	mov	r4, r2
 8007730:	b99c      	cbnz	r4, 800775a <_malloc_r+0x56>
 8007732:	4f20      	ldr	r7, [pc, #128]	; (80077b4 <_malloc_r+0xb0>)
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	b923      	cbnz	r3, 8007742 <_malloc_r+0x3e>
 8007738:	4621      	mov	r1, r4
 800773a:	4630      	mov	r0, r6
 800773c:	f000 f862 	bl	8007804 <_sbrk_r>
 8007740:	6038      	str	r0, [r7, #0]
 8007742:	4629      	mov	r1, r5
 8007744:	4630      	mov	r0, r6
 8007746:	f000 f85d 	bl	8007804 <_sbrk_r>
 800774a:	1c43      	adds	r3, r0, #1
 800774c:	d123      	bne.n	8007796 <_malloc_r+0x92>
 800774e:	230c      	movs	r3, #12
 8007750:	6033      	str	r3, [r6, #0]
 8007752:	4630      	mov	r0, r6
 8007754:	f000 f86c 	bl	8007830 <__malloc_unlock>
 8007758:	e7e3      	b.n	8007722 <_malloc_r+0x1e>
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	1b5b      	subs	r3, r3, r5
 800775e:	d417      	bmi.n	8007790 <_malloc_r+0x8c>
 8007760:	2b0b      	cmp	r3, #11
 8007762:	d903      	bls.n	800776c <_malloc_r+0x68>
 8007764:	6023      	str	r3, [r4, #0]
 8007766:	441c      	add	r4, r3
 8007768:	6025      	str	r5, [r4, #0]
 800776a:	e004      	b.n	8007776 <_malloc_r+0x72>
 800776c:	6863      	ldr	r3, [r4, #4]
 800776e:	42a2      	cmp	r2, r4
 8007770:	bf0c      	ite	eq
 8007772:	600b      	streq	r3, [r1, #0]
 8007774:	6053      	strne	r3, [r2, #4]
 8007776:	4630      	mov	r0, r6
 8007778:	f000 f85a 	bl	8007830 <__malloc_unlock>
 800777c:	f104 000b 	add.w	r0, r4, #11
 8007780:	1d23      	adds	r3, r4, #4
 8007782:	f020 0007 	bic.w	r0, r0, #7
 8007786:	1ac2      	subs	r2, r0, r3
 8007788:	d0cc      	beq.n	8007724 <_malloc_r+0x20>
 800778a:	1a1b      	subs	r3, r3, r0
 800778c:	50a3      	str	r3, [r4, r2]
 800778e:	e7c9      	b.n	8007724 <_malloc_r+0x20>
 8007790:	4622      	mov	r2, r4
 8007792:	6864      	ldr	r4, [r4, #4]
 8007794:	e7cc      	b.n	8007730 <_malloc_r+0x2c>
 8007796:	1cc4      	adds	r4, r0, #3
 8007798:	f024 0403 	bic.w	r4, r4, #3
 800779c:	42a0      	cmp	r0, r4
 800779e:	d0e3      	beq.n	8007768 <_malloc_r+0x64>
 80077a0:	1a21      	subs	r1, r4, r0
 80077a2:	4630      	mov	r0, r6
 80077a4:	f000 f82e 	bl	8007804 <_sbrk_r>
 80077a8:	3001      	adds	r0, #1
 80077aa:	d1dd      	bne.n	8007768 <_malloc_r+0x64>
 80077ac:	e7cf      	b.n	800774e <_malloc_r+0x4a>
 80077ae:	bf00      	nop
 80077b0:	20000dc8 	.word	0x20000dc8
 80077b4:	20000dcc 	.word	0x20000dcc

080077b8 <_realloc_r>:
 80077b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ba:	4607      	mov	r7, r0
 80077bc:	4614      	mov	r4, r2
 80077be:	460e      	mov	r6, r1
 80077c0:	b921      	cbnz	r1, 80077cc <_realloc_r+0x14>
 80077c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80077c6:	4611      	mov	r1, r2
 80077c8:	f7ff bf9c 	b.w	8007704 <_malloc_r>
 80077cc:	b922      	cbnz	r2, 80077d8 <_realloc_r+0x20>
 80077ce:	f7ff ff49 	bl	8007664 <_free_r>
 80077d2:	4625      	mov	r5, r4
 80077d4:	4628      	mov	r0, r5
 80077d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077d8:	f000 f830 	bl	800783c <_malloc_usable_size_r>
 80077dc:	42a0      	cmp	r0, r4
 80077de:	d20f      	bcs.n	8007800 <_realloc_r+0x48>
 80077e0:	4621      	mov	r1, r4
 80077e2:	4638      	mov	r0, r7
 80077e4:	f7ff ff8e 	bl	8007704 <_malloc_r>
 80077e8:	4605      	mov	r5, r0
 80077ea:	2800      	cmp	r0, #0
 80077ec:	d0f2      	beq.n	80077d4 <_realloc_r+0x1c>
 80077ee:	4631      	mov	r1, r6
 80077f0:	4622      	mov	r2, r4
 80077f2:	f7ff ff0f 	bl	8007614 <memcpy>
 80077f6:	4631      	mov	r1, r6
 80077f8:	4638      	mov	r0, r7
 80077fa:	f7ff ff33 	bl	8007664 <_free_r>
 80077fe:	e7e9      	b.n	80077d4 <_realloc_r+0x1c>
 8007800:	4635      	mov	r5, r6
 8007802:	e7e7      	b.n	80077d4 <_realloc_r+0x1c>

08007804 <_sbrk_r>:
 8007804:	b538      	push	{r3, r4, r5, lr}
 8007806:	4d06      	ldr	r5, [pc, #24]	; (8007820 <_sbrk_r+0x1c>)
 8007808:	2300      	movs	r3, #0
 800780a:	4604      	mov	r4, r0
 800780c:	4608      	mov	r0, r1
 800780e:	602b      	str	r3, [r5, #0]
 8007810:	f7fa fbcc 	bl	8001fac <_sbrk>
 8007814:	1c43      	adds	r3, r0, #1
 8007816:	d102      	bne.n	800781e <_sbrk_r+0x1a>
 8007818:	682b      	ldr	r3, [r5, #0]
 800781a:	b103      	cbz	r3, 800781e <_sbrk_r+0x1a>
 800781c:	6023      	str	r3, [r4, #0]
 800781e:	bd38      	pop	{r3, r4, r5, pc}
 8007820:	20001020 	.word	0x20001020

08007824 <__malloc_lock>:
 8007824:	4801      	ldr	r0, [pc, #4]	; (800782c <__malloc_lock+0x8>)
 8007826:	f000 b811 	b.w	800784c <__retarget_lock_acquire_recursive>
 800782a:	bf00      	nop
 800782c:	20001028 	.word	0x20001028

08007830 <__malloc_unlock>:
 8007830:	4801      	ldr	r0, [pc, #4]	; (8007838 <__malloc_unlock+0x8>)
 8007832:	f000 b80c 	b.w	800784e <__retarget_lock_release_recursive>
 8007836:	bf00      	nop
 8007838:	20001028 	.word	0x20001028

0800783c <_malloc_usable_size_r>:
 800783c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007840:	1f18      	subs	r0, r3, #4
 8007842:	2b00      	cmp	r3, #0
 8007844:	bfbc      	itt	lt
 8007846:	580b      	ldrlt	r3, [r1, r0]
 8007848:	18c0      	addlt	r0, r0, r3
 800784a:	4770      	bx	lr

0800784c <__retarget_lock_acquire_recursive>:
 800784c:	4770      	bx	lr

0800784e <__retarget_lock_release_recursive>:
 800784e:	4770      	bx	lr

08007850 <_init>:
 8007850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007852:	bf00      	nop
 8007854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007856:	bc08      	pop	{r3}
 8007858:	469e      	mov	lr, r3
 800785a:	4770      	bx	lr

0800785c <_fini>:
 800785c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785e:	bf00      	nop
 8007860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007862:	bc08      	pop	{r3}
 8007864:	469e      	mov	lr, r3
 8007866:	4770      	bx	lr
