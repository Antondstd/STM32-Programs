
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003868  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080039f8  080039f8  000139f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a4c  08003a4c  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  08003a4c  08003a4c  00013a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a54  08003a54  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a54  08003a54  00013a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a58  08003a58  00013a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08003a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c8  2**0
                  CONTENTS
 10 .bss          000000b8  200000c8  200000c8  000200c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000180  20000180  000200c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ad35  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c5e  00000000  00000000  0002ae2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b8  00000000  00000000  0002ca90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000700  00000000  00000000  0002d248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020851  00000000  00000000  0002d948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a290  00000000  00000000  0004e199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3009  00000000  00000000  00058429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011b432  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002138  00000000  00000000  0011b488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c8 	.word	0x200000c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080039e0 	.word	0x080039e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	080039e0 	.word	0x080039e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	4b35      	ldr	r3, [pc, #212]	; (8000668 <MX_GPIO_Init+0xf0>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a34      	ldr	r2, [pc, #208]	; (8000668 <MX_GPIO_Init+0xf0>)
 8000598:	f043 0304 	orr.w	r3, r3, #4
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b32      	ldr	r3, [pc, #200]	; (8000668 <MX_GPIO_Init+0xf0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0304 	and.w	r3, r3, #4
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	4b2e      	ldr	r3, [pc, #184]	; (8000668 <MX_GPIO_Init+0xf0>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a2d      	ldr	r2, [pc, #180]	; (8000668 <MX_GPIO_Init+0xf0>)
 80005b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b2b      	ldr	r3, [pc, #172]	; (8000668 <MX_GPIO_Init+0xf0>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	4b27      	ldr	r3, [pc, #156]	; (8000668 <MX_GPIO_Init+0xf0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a26      	ldr	r2, [pc, #152]	; (8000668 <MX_GPIO_Init+0xf0>)
 80005d0:	f043 0308 	orr.w	r3, r3, #8
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b24      	ldr	r3, [pc, #144]	; (8000668 <MX_GPIO_Init+0xf0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0308 	and.w	r3, r3, #8
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	4b20      	ldr	r3, [pc, #128]	; (8000668 <MX_GPIO_Init+0xf0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a1f      	ldr	r2, [pc, #124]	; (8000668 <MX_GPIO_Init+0xf0>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b1d      	ldr	r3, [pc, #116]	; (8000668 <MX_GPIO_Init+0xf0>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	4b19      	ldr	r3, [pc, #100]	; (8000668 <MX_GPIO_Init+0xf0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a18      	ldr	r2, [pc, #96]	; (8000668 <MX_GPIO_Init+0xf0>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b16      	ldr	r3, [pc, #88]	; (8000668 <MX_GPIO_Init+0xf0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000620:	4812      	ldr	r0, [pc, #72]	; (800066c <MX_GPIO_Init+0xf4>)
 8000622:	f001 f86d 	bl	8001700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800062a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4619      	mov	r1, r3
 800063a:	480d      	ldr	r0, [pc, #52]	; (8000670 <MX_GPIO_Init+0xf8>)
 800063c:	f000 feac 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000640:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000646:	2301      	movs	r3, #1
 8000648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064e:	2300      	movs	r3, #0
 8000650:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4619      	mov	r1, r3
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_GPIO_Init+0xf4>)
 800065a:	f000 fe9d 	bl	8001398 <HAL_GPIO_Init>

}
 800065e:	bf00      	nop
 8000660:	3728      	adds	r7, #40	; 0x28
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	40020c00 	.word	0x40020c00
 8000670:	40020800 	.word	0x40020800

08000674 <getButtonState>:
        setOffYellowDiode();
        delay(500);
    }
}

int getButtonState() {
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
 8000678:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800067c:	4802      	ldr	r0, [pc, #8]	; (8000688 <getButtonState+0x14>)
 800067e:	f001 f827 	bl	80016d0 <HAL_GPIO_ReadPin>
 8000682:	4603      	mov	r3, r0
}
 8000684:	4618      	mov	r0, r3
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40020800 	.word	0x40020800

0800068c <getCurrentTime>:

long getCurrentTime(){
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000690:	f000 fcd2 	bl	8001038 <HAL_GetTick>
 8000694:	4603      	mov	r3, r0
}
 8000696:	4618      	mov	r0, r3
 8000698:	bd80      	pop	{r7, pc}

0800069a <getNumber>:
short counter = 0;
short firstOperand = 0;
short secondOperand = 0;
enum MathOperation operation = NONE;

short getNumber(char ch) {
 800069a:	b480      	push	{r7}
 800069c:	b085      	sub	sp, #20
 800069e:	af00      	add	r7, sp, #0
 80006a0:	4603      	mov	r3, r0
 80006a2:	71fb      	strb	r3, [r7, #7]
    short asciNum = ch;
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	81fb      	strh	r3, [r7, #14]
    if (asciNum >= 48 && asciNum <= 57)
 80006a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006ac:	2b2f      	cmp	r3, #47	; 0x2f
 80006ae:	dd08      	ble.n	80006c2 <getNumber+0x28>
 80006b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006b4:	2b39      	cmp	r3, #57	; 0x39
 80006b6:	dc04      	bgt.n	80006c2 <getNumber+0x28>
        return asciNum - '0';
 80006b8:	89fb      	ldrh	r3, [r7, #14]
 80006ba:	3b30      	subs	r3, #48	; 0x30
 80006bc:	b29b      	uxth	r3, r3
 80006be:	b21b      	sxth	r3, r3
 80006c0:	e001      	b.n	80006c6 <getNumber+0x2c>
    return -1;
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3714      	adds	r7, #20
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
	...

080006d4 <getMathOperation>:

enum MathOperation getMathOperation(char ch) {
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
    switch (ch) {
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	3b2a      	subs	r3, #42	; 0x2a
 80006e2:	2b13      	cmp	r3, #19
 80006e4:	d834      	bhi.n	8000750 <getMathOperation+0x7c>
 80006e6:	a201      	add	r2, pc, #4	; (adr r2, 80006ec <getMathOperation+0x18>)
 80006e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ec:	08000745 	.word	0x08000745
 80006f0:	0800073d 	.word	0x0800073d
 80006f4:	08000751 	.word	0x08000751
 80006f8:	08000741 	.word	0x08000741
 80006fc:	08000751 	.word	0x08000751
 8000700:	08000749 	.word	0x08000749
 8000704:	08000751 	.word	0x08000751
 8000708:	08000751 	.word	0x08000751
 800070c:	08000751 	.word	0x08000751
 8000710:	08000751 	.word	0x08000751
 8000714:	08000751 	.word	0x08000751
 8000718:	08000751 	.word	0x08000751
 800071c:	08000751 	.word	0x08000751
 8000720:	08000751 	.word	0x08000751
 8000724:	08000751 	.word	0x08000751
 8000728:	08000751 	.word	0x08000751
 800072c:	08000751 	.word	0x08000751
 8000730:	08000751 	.word	0x08000751
 8000734:	08000751 	.word	0x08000751
 8000738:	0800074d 	.word	0x0800074d
        case '+':
            return ADDITION;
 800073c:	2300      	movs	r3, #0
 800073e:	e008      	b.n	8000752 <getMathOperation+0x7e>
        case '-':
            return SUBTRACTION;
 8000740:	2301      	movs	r3, #1
 8000742:	e006      	b.n	8000752 <getMathOperation+0x7e>
        case '*':
            return MULTIPLICATION;
 8000744:	2302      	movs	r3, #2
 8000746:	e004      	b.n	8000752 <getMathOperation+0x7e>
        case '/':
            return DIVISION;
 8000748:	2303      	movs	r3, #3
 800074a:	e002      	b.n	8000752 <getMathOperation+0x7e>
        case '=':
            return EQUAL;
 800074c:	2304      	movs	r3, #4
 800074e:	e000      	b.n	8000752 <getMathOperation+0x7e>
    }
    return NONE;
 8000750:	2305      	movs	r3, #5
}
 8000752:	4618      	mov	r0, r3
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop

08000760 <checkNumbertoOverflow>:

short checkNumbertoOverflow(short fullNumber, short number) {
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	460a      	mov	r2, r1
 800076a:	80fb      	strh	r3, [r7, #6]
 800076c:	4613      	mov	r3, r2
 800076e:	80bb      	strh	r3, [r7, #4]
    if ((fullNumber == 3276 && number >= 7) || fullNumber > 3276)
 8000770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000774:	f640 42cc 	movw	r2, #3276	; 0xccc
 8000778:	4293      	cmp	r3, r2
 800077a:	d103      	bne.n	8000784 <checkNumbertoOverflow+0x24>
 800077c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000780:	2b06      	cmp	r3, #6
 8000782:	dc05      	bgt.n	8000790 <checkNumbertoOverflow+0x30>
 8000784:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000788:	f640 42cc 	movw	r2, #3276	; 0xccc
 800078c:	4293      	cmp	r3, r2
 800078e:	dd02      	ble.n	8000796 <checkNumbertoOverflow+0x36>
        return -1;
 8000790:	f04f 33ff 	mov.w	r3, #4294967295
 8000794:	e009      	b.n	80007aa <checkNumbertoOverflow+0x4a>
    return fullNumber * 10 + number;
 8000796:	88fb      	ldrh	r3, [r7, #6]
 8000798:	461a      	mov	r2, r3
 800079a:	0092      	lsls	r2, r2, #2
 800079c:	4413      	add	r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	88bb      	ldrh	r3, [r7, #4]
 80007a4:	4413      	add	r3, r2
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	b21b      	sxth	r3, r3
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
	...

080007b8 <resetCalc>:
    }
    return -1;
}

void
resetCalc() {
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
    isFirst = 1;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <resetCalc+0x2c>)
 80007be:	2201      	movs	r2, #1
 80007c0:	801a      	strh	r2, [r3, #0]
    counter = 0;
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <resetCalc+0x30>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	801a      	strh	r2, [r3, #0]
    firstOperand = 0;
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <resetCalc+0x34>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	801a      	strh	r2, [r3, #0]
    secondOperand = 0;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <resetCalc+0x38>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	801a      	strh	r2, [r3, #0]
    operation = NONE;
 80007d4:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <resetCalc+0x3c>)
 80007d6:	2205      	movs	r2, #5
 80007d8:	701a      	strb	r2, [r3, #0]
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	20000030 	.word	0x20000030
 80007e8:	20000116 	.word	0x20000116
 80007ec:	20000118 	.word	0x20000118
 80007f0:	2000011a 	.word	0x2000011a
 80007f4:	20000032 	.word	0x20000032

080007f8 <sendMessage>:

char errorMessage[] = "\n\rERROR\n\r";
char errorMessageDiv[] = "\n\rCant divide by zero\n\r";

void sendMessage(char *message, int size) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
	size = strlen(message);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff fce4 	bl	80001d0 <strlen>
 8000808:	4603      	mov	r3, r0
 800080a:	603b      	str	r3, [r7, #0]
    if (mode)
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <sendMessage+0x78>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d007      	beq.n	8000824 <sendMessage+0x2c>
        HAL_UART_Transmit(&huart6, (uint8_t *) message, size, 100);
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	b29a      	uxth	r2, r3
 8000818:	2364      	movs	r3, #100	; 0x64
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	4815      	ldr	r0, [pc, #84]	; (8000874 <sendMessage+0x7c>)
 800081e:	f001 fc1e 	bl	800205e <HAL_UART_Transmit>
        	isReaded1 = HAL_UART_Transmit_IT(&huart6, (uint8_t *) message, size);
        	curtime = getCurrentTime();
        	counter++;
                }
    }
}
 8000822:	e020      	b.n	8000866 <sendMessage+0x6e>
        long time = getCurrentTime();
 8000824:	f7ff ff32 	bl	800068c <getCurrentTime>
 8000828:	60f8      	str	r0, [r7, #12]
        HAL_StatusTypeDef isReaded1 = HAL_BUSY;
 800082a:	2302      	movs	r3, #2
 800082c:	75fb      	strb	r3, [r7, #23]
        int curtime = getCurrentTime();
 800082e:	f7ff ff2d 	bl	800068c <getCurrentTime>
 8000832:	60b8      	str	r0, [r7, #8]
        int counter = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	613b      	str	r3, [r7, #16]
        while (counter < 100000 && isReaded1 == HAL_BUSY) {
 8000838:	e00e      	b.n	8000858 <sendMessage+0x60>
        	isReaded1 = HAL_UART_Transmit_IT(&huart6, (uint8_t *) message, size);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	b29b      	uxth	r3, r3
 800083e:	461a      	mov	r2, r3
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	480c      	ldr	r0, [pc, #48]	; (8000874 <sendMessage+0x7c>)
 8000844:	f001 fd3f 	bl	80022c6 <HAL_UART_Transmit_IT>
 8000848:	4603      	mov	r3, r0
 800084a:	75fb      	strb	r3, [r7, #23]
        	curtime = getCurrentTime();
 800084c:	f7ff ff1e 	bl	800068c <getCurrentTime>
 8000850:	60b8      	str	r0, [r7, #8]
        	counter++;
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	3301      	adds	r3, #1
 8000856:	613b      	str	r3, [r7, #16]
        while (counter < 100000 && isReaded1 == HAL_BUSY) {
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	4a07      	ldr	r2, [pc, #28]	; (8000878 <sendMessage+0x80>)
 800085c:	4293      	cmp	r3, r2
 800085e:	dc02      	bgt.n	8000866 <sendMessage+0x6e>
 8000860:	7dfb      	ldrb	r3, [r7, #23]
 8000862:	2b02      	cmp	r3, #2
 8000864:	d0e9      	beq.n	800083a <sendMessage+0x42>
}
 8000866:	bf00      	nop
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000000 	.word	0x20000000
 8000874:	20000128 	.word	0x20000128
 8000878:	0001869f 	.word	0x0001869f

0800087c <sendError>:

void sendError() {
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
    sendMessage(errorMessage, sizeof(errorMessage) - 1);
 8000880:	2109      	movs	r1, #9
 8000882:	4802      	ldr	r0, [pc, #8]	; (800088c <sendError+0x10>)
 8000884:	f7ff ffb8 	bl	80007f8 <sendMessage>
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000034 	.word	0x20000034

08000890 <sendErrorAndReset>:

void sendErrorAndReset() {
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
    sendError();
 8000894:	f7ff fff2 	bl	800087c <sendError>
    resetCalc();
 8000898:	f7ff ff8e 	bl	80007b8 <resetCalc>
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}

080008a0 <handle_calc>:

void handle_calc() {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
    sendMessage(ch, 1);
 80008a6:	2101      	movs	r1, #1
 80008a8:	4888      	ldr	r0, [pc, #544]	; (8000acc <handle_calc+0x22c>)
 80008aa:	f7ff ffa5 	bl	80007f8 <sendMessage>
    enum MathOperation operationBuf = getMathOperation(ch[0]);
 80008ae:	4b87      	ldr	r3, [pc, #540]	; (8000acc <handle_calc+0x22c>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ff0e 	bl	80006d4 <getMathOperation>
 80008b8:	4603      	mov	r3, r0
 80008ba:	727b      	strb	r3, [r7, #9]
    if (counter > 0) {
 80008bc:	4b84      	ldr	r3, [pc, #528]	; (8000ad0 <handle_calc+0x230>)
 80008be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f340 80aa 	ble.w	8000a1c <handle_calc+0x17c>
        if (isFirst && operationBuf != NONE && operationBuf != EQUAL) {
 80008c8:	4b82      	ldr	r3, [pc, #520]	; (8000ad4 <handle_calc+0x234>)
 80008ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d00f      	beq.n	80008f2 <handle_calc+0x52>
 80008d2:	7a7b      	ldrb	r3, [r7, #9]
 80008d4:	2b05      	cmp	r3, #5
 80008d6:	d00c      	beq.n	80008f2 <handle_calc+0x52>
 80008d8:	7a7b      	ldrb	r3, [r7, #9]
 80008da:	2b04      	cmp	r3, #4
 80008dc:	d009      	beq.n	80008f2 <handle_calc+0x52>
            operation = operationBuf;
 80008de:	4a7e      	ldr	r2, [pc, #504]	; (8000ad8 <handle_calc+0x238>)
 80008e0:	7a7b      	ldrb	r3, [r7, #9]
 80008e2:	7013      	strb	r3, [r2, #0]
            isFirst = 0;
 80008e4:	4b7b      	ldr	r3, [pc, #492]	; (8000ad4 <handle_calc+0x234>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	801a      	strh	r2, [r3, #0]
            counter = 0;
 80008ea:	4b79      	ldr	r3, [pc, #484]	; (8000ad0 <handle_calc+0x230>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	801a      	strh	r2, [r3, #0]
            return;
 80008f0:	e0e9      	b.n	8000ac6 <handle_calc+0x226>
        }
        if (!isFirst && operationBuf != NONE && operationBuf == EQUAL) {
 80008f2:	4b78      	ldr	r3, [pc, #480]	; (8000ad4 <handle_calc+0x234>)
 80008f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	f040 808f 	bne.w	8000a1c <handle_calc+0x17c>
 80008fe:	7a7b      	ldrb	r3, [r7, #9]
 8000900:	2b05      	cmp	r3, #5
 8000902:	f000 808b 	beq.w	8000a1c <handle_calc+0x17c>
 8000906:	7a7b      	ldrb	r3, [r7, #9]
 8000908:	2b04      	cmp	r3, #4
 800090a:	f040 8087 	bne.w	8000a1c <handle_calc+0x17c>
            long testOverflow;
            short res;
            switch (operation) {
 800090e:	4b72      	ldr	r3, [pc, #456]	; (8000ad8 <handle_calc+0x238>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b03      	cmp	r3, #3
 8000914:	d86c      	bhi.n	80009f0 <handle_calc+0x150>
 8000916:	a201      	add	r2, pc, #4	; (adr r2, 800091c <handle_calc+0x7c>)
 8000918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800091c:	0800092d 	.word	0x0800092d
 8000920:	08000957 	.word	0x08000957
 8000924:	08000981 	.word	0x08000981
 8000928:	080009af 	.word	0x080009af
                case ADDITION: {
                    testOverflow = firstOperand + secondOperand;
 800092c:	4b6b      	ldr	r3, [pc, #428]	; (8000adc <handle_calc+0x23c>)
 800092e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000932:	461a      	mov	r2, r3
 8000934:	4b6a      	ldr	r3, [pc, #424]	; (8000ae0 <handle_calc+0x240>)
 8000936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800093a:	4413      	add	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]
                    res = firstOperand + secondOperand;
 800093e:	4b67      	ldr	r3, [pc, #412]	; (8000adc <handle_calc+0x23c>)
 8000940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000944:	b29a      	uxth	r2, r3
 8000946:	4b66      	ldr	r3, [pc, #408]	; (8000ae0 <handle_calc+0x240>)
 8000948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800094c:	b29b      	uxth	r3, r3
 800094e:	4413      	add	r3, r2
 8000950:	b29b      	uxth	r3, r3
 8000952:	817b      	strh	r3, [r7, #10]
                    break;
 8000954:	e04c      	b.n	80009f0 <handle_calc+0x150>
                }
                case SUBTRACTION: {
                    testOverflow = firstOperand - secondOperand;
 8000956:	4b61      	ldr	r3, [pc, #388]	; (8000adc <handle_calc+0x23c>)
 8000958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800095c:	461a      	mov	r2, r3
 800095e:	4b60      	ldr	r3, [pc, #384]	; (8000ae0 <handle_calc+0x240>)
 8000960:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	60fb      	str	r3, [r7, #12]
                    res = firstOperand - secondOperand;
 8000968:	4b5c      	ldr	r3, [pc, #368]	; (8000adc <handle_calc+0x23c>)
 800096a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800096e:	b29a      	uxth	r2, r3
 8000970:	4b5b      	ldr	r3, [pc, #364]	; (8000ae0 <handle_calc+0x240>)
 8000972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000976:	b29b      	uxth	r3, r3
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	b29b      	uxth	r3, r3
 800097c:	817b      	strh	r3, [r7, #10]
                    break;
 800097e:	e037      	b.n	80009f0 <handle_calc+0x150>
                }
                case MULTIPLICATION: {
                    testOverflow = firstOperand * secondOperand;
 8000980:	4b56      	ldr	r3, [pc, #344]	; (8000adc <handle_calc+0x23c>)
 8000982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000986:	461a      	mov	r2, r3
 8000988:	4b55      	ldr	r3, [pc, #340]	; (8000ae0 <handle_calc+0x240>)
 800098a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800098e:	fb03 f302 	mul.w	r3, r3, r2
 8000992:	60fb      	str	r3, [r7, #12]
                    res = firstOperand * secondOperand;
 8000994:	4b51      	ldr	r3, [pc, #324]	; (8000adc <handle_calc+0x23c>)
 8000996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800099a:	b29a      	uxth	r2, r3
 800099c:	4b50      	ldr	r3, [pc, #320]	; (8000ae0 <handle_calc+0x240>)
 800099e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	fb12 f303 	smulbb	r3, r2, r3
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	817b      	strh	r3, [r7, #10]
                    break;
 80009ac:	e020      	b.n	80009f0 <handle_calc+0x150>
                }
                case DIVISION: {
                    if (secondOperand == 0) {
 80009ae:	4b4c      	ldr	r3, [pc, #304]	; (8000ae0 <handle_calc+0x240>)
 80009b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d106      	bne.n	80009c6 <handle_calc+0x126>
                        //sprintf(message, "\n\rCant divide by zero\n\r");
                        sendMessage(errorMessageDiv, sizeof(errorMessageDiv) - 1);
 80009b8:	2117      	movs	r1, #23
 80009ba:	484a      	ldr	r0, [pc, #296]	; (8000ae4 <handle_calc+0x244>)
 80009bc:	f7ff ff1c 	bl	80007f8 <sendMessage>
                        resetCalc();
 80009c0:	f7ff fefa 	bl	80007b8 <resetCalc>
                        return;
 80009c4:	e07f      	b.n	8000ac6 <handle_calc+0x226>
                    }
                    testOverflow = firstOperand / secondOperand;
 80009c6:	4b45      	ldr	r3, [pc, #276]	; (8000adc <handle_calc+0x23c>)
 80009c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b44      	ldr	r3, [pc, #272]	; (8000ae0 <handle_calc+0x240>)
 80009d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80009d8:	60fb      	str	r3, [r7, #12]
                    res = firstOperand / secondOperand;
 80009da:	4b40      	ldr	r3, [pc, #256]	; (8000adc <handle_calc+0x23c>)
 80009dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b3f      	ldr	r3, [pc, #252]	; (8000ae0 <handle_calc+0x240>)
 80009e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80009ec:	817b      	strh	r3, [r7, #10]
                    break;
 80009ee:	bf00      	nop
                }
            }
            if (res == testOverflow){
 80009f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80009f4:	68fa      	ldr	r2, [r7, #12]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d10b      	bne.n	8000a12 <handle_calc+0x172>
                sprintf(message, "%d\n\r", res);
 80009fa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80009fe:	461a      	mov	r2, r3
 8000a00:	4939      	ldr	r1, [pc, #228]	; (8000ae8 <handle_calc+0x248>)
 8000a02:	483a      	ldr	r0, [pc, #232]	; (8000aec <handle_calc+0x24c>)
 8000a04:	f002 fbbe 	bl	8003184 <siprintf>
                sendMessage(message, sizeof(message) - 1);
 8000a08:	2131      	movs	r1, #49	; 0x31
 8000a0a:	4838      	ldr	r0, [pc, #224]	; (8000aec <handle_calc+0x24c>)
 8000a0c:	f7ff fef4 	bl	80007f8 <sendMessage>
 8000a10:	e001      	b.n	8000a16 <handle_calc+0x176>
            }
            else{
                sendError();
 8000a12:	f7ff ff33 	bl	800087c <sendError>
            }
            resetCalc();
 8000a16:	f7ff fecf 	bl	80007b8 <resetCalc>
            return;
 8000a1a:	e054      	b.n	8000ac6 <handle_calc+0x226>
        }
    }
    if (operationBuf != NONE || counter > 4) {
 8000a1c:	7a7b      	ldrb	r3, [r7, #9]
 8000a1e:	2b05      	cmp	r3, #5
 8000a20:	d104      	bne.n	8000a2c <handle_calc+0x18c>
 8000a22:	4b2b      	ldr	r3, [pc, #172]	; (8000ad0 <handle_calc+0x230>)
 8000a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a28:	2b04      	cmp	r3, #4
 8000a2a:	dd02      	ble.n	8000a32 <handle_calc+0x192>
        sendErrorAndReset();
 8000a2c:	f7ff ff30 	bl	8000890 <sendErrorAndReset>
        return;
 8000a30:	e049      	b.n	8000ac6 <handle_calc+0x226>
    }


    short number = getNumber(ch[0]);
 8000a32:	4b26      	ldr	r3, [pc, #152]	; (8000acc <handle_calc+0x22c>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fe2f 	bl	800069a <getNumber>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	80fb      	strh	r3, [r7, #6]
    if (number != -1) {
 8000a40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a48:	d03b      	beq.n	8000ac2 <handle_calc+0x222>
        if (isFirst) {
 8000a4a:	4b22      	ldr	r3, [pc, #136]	; (8000ad4 <handle_calc+0x234>)
 8000a4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d016      	beq.n	8000a82 <handle_calc+0x1e2>
            short numberBuf = checkNumbertoOverflow(firstOperand, number);
 8000a54:	4b21      	ldr	r3, [pc, #132]	; (8000adc <handle_calc+0x23c>)
 8000a56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fe7d 	bl	8000760 <checkNumbertoOverflow>
 8000a66:	4603      	mov	r3, r0
 8000a68:	807b      	strh	r3, [r7, #2]
            if (numberBuf == -1) {
 8000a6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a72:	d102      	bne.n	8000a7a <handle_calc+0x1da>
                sendErrorAndReset();
 8000a74:	f7ff ff0c 	bl	8000890 <sendErrorAndReset>
                return;
 8000a78:	e025      	b.n	8000ac6 <handle_calc+0x226>
            }
            firstOperand = numberBuf;
 8000a7a:	4a18      	ldr	r2, [pc, #96]	; (8000adc <handle_calc+0x23c>)
 8000a7c:	887b      	ldrh	r3, [r7, #2]
 8000a7e:	8013      	strh	r3, [r2, #0]
 8000a80:	e015      	b.n	8000aae <handle_calc+0x20e>
        } else {
            short numberBuf = checkNumbertoOverflow(secondOperand, number);
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <handle_calc+0x240>)
 8000a84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a88:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fe66 	bl	8000760 <checkNumbertoOverflow>
 8000a94:	4603      	mov	r3, r0
 8000a96:	80bb      	strh	r3, [r7, #4]
            if (numberBuf == -1) {
 8000a98:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa0:	d102      	bne.n	8000aa8 <handle_calc+0x208>
                sendErrorAndReset();
 8000aa2:	f7ff fef5 	bl	8000890 <sendErrorAndReset>
                return;
 8000aa6:	e00e      	b.n	8000ac6 <handle_calc+0x226>
            }
            secondOperand = numberBuf;
 8000aa8:	4a0d      	ldr	r2, [pc, #52]	; (8000ae0 <handle_calc+0x240>)
 8000aaa:	88bb      	ldrh	r3, [r7, #4]
 8000aac:	8013      	strh	r3, [r2, #0]
        }
        counter++;
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <handle_calc+0x230>)
 8000ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	b21a      	sxth	r2, r3
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <handle_calc+0x230>)
 8000abe:	801a      	strh	r2, [r3, #0]
 8000ac0:	e001      	b.n	8000ac6 <handle_calc+0x226>
    } else {
        sendErrorAndReset();
 8000ac2:	f7ff fee5 	bl	8000890 <sendErrorAndReset>
    }
}
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000004 	.word	0x20000004
 8000ad0:	20000116 	.word	0x20000116
 8000ad4:	20000030 	.word	0x20000030
 8000ad8:	20000032 	.word	0x20000032
 8000adc:	20000118 	.word	0x20000118
 8000ae0:	2000011a 	.word	0x2000011a
 8000ae4:	20000040 	.word	0x20000040
 8000ae8:	080039f8 	.word	0x080039f8
 8000aec:	200000e4 	.word	0x200000e4

08000af0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	canReceive=0;
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <HAL_UART_RxCpltCallback+0x1c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	2000002c 	.word	0x2000002c

08000b10 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */
    HAL_StatusTypeDef isReaded;
    int shortPressTime = 200;
 8000b16:	23c8      	movs	r3, #200	; 0xc8
 8000b18:	60fb      	str	r3, [r7, #12]
    int isBeingProceed = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
    long startTimePressedButton = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
    char chtest[] = "F\n\r";
 8000b22:	4b2f      	ldr	r3, [pc, #188]	; (8000be0 <main+0xd0>)
 8000b24:	607b      	str	r3, [r7, #4]
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000b26:	f000 fa21 	bl	8000f6c <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000b2a:	f000 f867 	bl	8000bfc <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000b2e:	f7ff fd23 	bl	8000578 <MX_GPIO_Init>
    MX_USART6_UART_Init();
 8000b32:	f000 f977 	bl	8000e24 <MX_USART6_UART_Init>

        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
    	//sendMessage(chtest, sizeof(chtest)-1);
        if (!getButtonState()) {
 8000b36:	f7ff fd9d 	bl	8000674 <getButtonState>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d108      	bne.n	8000b52 <main+0x42>
            if (!isBeingProceed) {
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d125      	bne.n	8000b92 <main+0x82>
                startTimePressedButton = getCurrentTime();
 8000b46:	f7ff fda1 	bl	800068c <getCurrentTime>
 8000b4a:	6138      	str	r0, [r7, #16]
                isBeingProceed = 1;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	e01f      	b.n	8000b92 <main+0x82>
            }
        } else {
            if (isBeingProceed && getCurrentTime() - startTimePressedButton > shortPressTime) {
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d01a      	beq.n	8000b8e <main+0x7e>
 8000b58:	f7ff fd98 	bl	800068c <getCurrentTime>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	da12      	bge.n	8000b8e <main+0x7e>
                if (mode == 1) {
 8000b68:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <main+0xd4>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d107      	bne.n	8000b80 <main+0x70>
                    mode = 0;
 8000b70:	4b1c      	ldr	r3, [pc, #112]	; (8000be4 <main+0xd4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
                    sendMessage(mode0, sizeof(mode0) - 1);
 8000b76:	210f      	movs	r1, #15
 8000b78:	481b      	ldr	r0, [pc, #108]	; (8000be8 <main+0xd8>)
 8000b7a:	f7ff fe3d 	bl	80007f8 <sendMessage>
 8000b7e:	e006      	b.n	8000b8e <main+0x7e>
                } else {
                    mode = 1;
 8000b80:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <main+0xd4>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	601a      	str	r2, [r3, #0]
                    sendMessage(mode1, sizeof(mode1) - 1);
 8000b86:	2113      	movs	r1, #19
 8000b88:	4818      	ldr	r0, [pc, #96]	; (8000bec <main+0xdc>)
 8000b8a:	f7ff fe35 	bl	80007f8 <sendMessage>
                }
            }
            isBeingProceed = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
        }
        if (mode) {
 8000b92:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <main+0xd4>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d00d      	beq.n	8000bb6 <main+0xa6>
            isReaded = HAL_UART_Receive(&huart6, (uint8_t *) &ch, 1, 200);
 8000b9a:	23c8      	movs	r3, #200	; 0xc8
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4914      	ldr	r1, [pc, #80]	; (8000bf0 <main+0xe0>)
 8000ba0:	4814      	ldr	r0, [pc, #80]	; (8000bf4 <main+0xe4>)
 8000ba2:	f001 faee 	bl	8002182 <HAL_UART_Receive>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	72fb      	strb	r3, [r7, #11]
            if (isReaded == HAL_OK)
 8000baa:	7afb      	ldrb	r3, [r7, #11]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d1c2      	bne.n	8000b36 <main+0x26>
                handle_calc();
 8000bb0:	f7ff fe76 	bl	80008a0 <handle_calc>
 8000bb4:	e7bf      	b.n	8000b36 <main+0x26>
        } else {
        	if (canReceive == 1)
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <main+0xe8>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d106      	bne.n	8000bcc <main+0xbc>
        		isReaded = HAL_UART_Receive_IT(&huart6, (uint8_t *) &ch, 1);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	490b      	ldr	r1, [pc, #44]	; (8000bf0 <main+0xe0>)
 8000bc2:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <main+0xe4>)
 8000bc4:	f001 fbc4 	bl	8002350 <HAL_UART_Receive_IT>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	72fb      	strb	r3, [r7, #11]
            if (canReceive == 0){
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <main+0xe8>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1b0      	bne.n	8000b36 <main+0x26>
                handle_calc();
 8000bd4:	f7ff fe64 	bl	80008a0 <handle_calc>
                canReceive = 1;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <main+0xe8>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	601a      	str	r2, [r3, #0]
        if (!getButtonState()) {
 8000bde:	e7aa      	b.n	8000b36 <main+0x26>
 8000be0:	000d0a46 	.word	0x000d0a46
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000018 	.word	0x20000018
 8000bf0:	20000004 	.word	0x20000004
 8000bf4:	20000128 	.word	0x20000128
 8000bf8:	2000002c 	.word	0x2000002c

08000bfc <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b094      	sub	sp, #80	; 0x50
 8000c00:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 0320 	add.w	r3, r7, #32
 8000c06:	2230      	movs	r2, #48	; 0x30
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f002 fab2 	bl	8003174 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <SystemClock_Config+0xcc>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	4a27      	ldr	r2, [pc, #156]	; (8000cc8 <SystemClock_Config+0xcc>)
 8000c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c30:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <SystemClock_Config+0xcc>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <SystemClock_Config+0xd0>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a21      	ldr	r2, [pc, #132]	; (8000ccc <SystemClock_Config+0xd0>)
 8000c46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <SystemClock_Config+0xd0>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]
    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c62:	2302      	movs	r3, #2
 8000c64:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 25;
 8000c6c:	2319      	movs	r3, #25
 8000c6e:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 336;
 8000c70:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c74:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c76:	2302      	movs	r3, #2
 8000c78:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c7e:	f107 0320 	add.w	r3, r7, #32
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 fd56 	bl	8001734 <HAL_RCC_OscConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0x96>
        Error_Handler();
 8000c8e:	f000 f81f 	bl	8000cd0 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000c92:	230f      	movs	r3, #15
 8000c94:	60fb      	str	r3, [r7, #12]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c96:	2302      	movs	r3, #2
 8000c98:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ca2:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca8:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	2105      	movs	r1, #5
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 ffb7 	bl	8001c24 <HAL_RCC_ClockConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SystemClock_Config+0xc4>
        Error_Handler();
 8000cbc:	f000 f808 	bl	8000cd0 <Error_Handler>
    }
}
 8000cc0:	bf00      	nop
 8000cc2:	3750      	adds	r7, #80	; 0x50
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40007000 	.word	0x40007000

08000cd0 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd4:	b672      	cpsid	i
}
 8000cd6:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000cd8:	e7fe      	b.n	8000cd8 <Error_Handler+0x8>
	...

08000cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <HAL_MspInit+0x4c>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	4a0f      	ldr	r2, [pc, #60]	; (8000d28 <HAL_MspInit+0x4c>)
 8000cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <HAL_MspInit+0x4c>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <HAL_MspInit+0x4c>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	4a08      	ldr	r2, [pc, #32]	; (8000d28 <HAL_MspInit+0x4c>)
 8000d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_MspInit+0x4c>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <NMI_Handler+0x4>

08000d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <MemManage_Handler+0x4>

08000d3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <BusFault_Handler+0x4>

08000d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <UsageFault_Handler+0x4>

08000d4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d78:	f000 f94a 	bl	8001010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <USART6_IRQHandler+0x10>)
 8000d86:	f001 fb13 	bl	80023b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000128 	.word	0x20000128

08000d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d9c:	4a14      	ldr	r2, [pc, #80]	; (8000df0 <_sbrk+0x5c>)
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <_sbrk+0x60>)
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <_sbrk+0x64>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <_sbrk+0x68>)
 8000db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d207      	bcs.n	8000dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc4:	f002 f9ac 	bl	8003120 <__errno>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	220c      	movs	r2, #12
 8000dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd2:	e009      	b.n	8000de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <_sbrk+0x64>)
 8000de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20020000 	.word	0x20020000
 8000df4:	00000400 	.word	0x00000400
 8000df8:	2000011c 	.word	0x2000011c
 8000dfc:	20000180 	.word	0x20000180

08000e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <SystemInit+0x20>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <SystemInit+0x20>)
 8000e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_USART6_UART_Init+0x4c>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <MX_USART6_UART_Init+0x50>)
 8000e2c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <MX_USART6_UART_Init+0x4c>)
 8000e30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e34:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_USART6_UART_Init+0x4c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_USART6_UART_Init+0x4c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <MX_USART6_UART_Init+0x4c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_USART6_UART_Init+0x4c>)
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <MX_USART6_UART_Init+0x4c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_USART6_UART_Init+0x4c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_USART6_UART_Init+0x4c>)
 8000e5c:	f001 f8b2 	bl	8001fc4 <HAL_UART_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000e66:	f7ff ff33 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000128 	.word	0x20000128
 8000e74:	40011400 	.word	0x40011400

08000e78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a1d      	ldr	r2, [pc, #116]	; (8000f0c <HAL_UART_MspInit+0x94>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d133      	bne.n	8000f02 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <HAL_UART_MspInit+0x98>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	4a1b      	ldr	r2, [pc, #108]	; (8000f10 <HAL_UART_MspInit+0x98>)
 8000ea4:	f043 0320 	orr.w	r3, r3, #32
 8000ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_UART_MspInit+0x98>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	f003 0320 	and.w	r3, r3, #32
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_UART_MspInit+0x98>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <HAL_UART_MspInit+0x98>)
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_UART_MspInit+0x98>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ed2:	23c0      	movs	r3, #192	; 0xc0
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000ee2:	2308      	movs	r3, #8
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	4809      	ldr	r0, [pc, #36]	; (8000f14 <HAL_UART_MspInit+0x9c>)
 8000eee:	f000 fa53 	bl	8001398 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2047      	movs	r0, #71	; 0x47
 8000ef8:	f000 f985 	bl	8001206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000efc:	2047      	movs	r0, #71	; 0x47
 8000efe:	f000 f99e 	bl	800123e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000f02:	bf00      	nop
 8000f04:	3728      	adds	r7, #40	; 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40011400 	.word	0x40011400
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020800 	.word	0x40020800

08000f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f1e:	490e      	ldr	r1, [pc, #56]	; (8000f58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f20:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f24:	e002      	b.n	8000f2c <LoopCopyDataInit>

08000f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2a:	3304      	adds	r3, #4

08000f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f30:	d3f9      	bcc.n	8000f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f32:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f34:	4c0b      	ldr	r4, [pc, #44]	; (8000f64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f38:	e001      	b.n	8000f3e <LoopFillZerobss>

08000f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f3c:	3204      	adds	r2, #4

08000f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f40:	d3fb      	bcc.n	8000f3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f42:	f7ff ff5d 	bl	8000e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f46:	f002 f8f1 	bl	800312c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4a:	f7ff fde1 	bl	8000b10 <main>
  bx  lr    
 8000f4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f58:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8000f5c:	08003a5c 	.word	0x08003a5c
  ldr r2, =_sbss
 8000f60:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8000f64:	20000180 	.word	0x20000180

08000f68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f68:	e7fe      	b.n	8000f68 <ADC_IRQHandler>
	...

08000f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f70:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <HAL_Init+0x40>)
 8000f76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <HAL_Init+0x40>)
 8000f82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a07      	ldr	r2, [pc, #28]	; (8000fac <HAL_Init+0x40>)
 8000f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f94:	2003      	movs	r0, #3
 8000f96:	f000 f92b 	bl	80011f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9a:	200f      	movs	r0, #15
 8000f9c:	f000 f808 	bl	8000fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa0:	f7ff fe9c 	bl	8000cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40023c00 	.word	0x40023c00

08000fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_InitTick+0x54>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_InitTick+0x58>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f943 	bl	800125a <HAL_SYSTICK_Config>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00e      	b.n	8000ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b0f      	cmp	r3, #15
 8000fe2:	d80a      	bhi.n	8000ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f000 f90b 	bl	8001206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff0:	4a06      	ldr	r2, [pc, #24]	; (800100c <HAL_InitTick+0x5c>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e000      	b.n	8000ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000058 	.word	0x20000058
 8001008:	20000060 	.word	0x20000060
 800100c:	2000005c 	.word	0x2000005c

08001010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_IncTick+0x20>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_IncTick+0x24>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4413      	add	r3, r2
 8001020:	4a04      	ldr	r2, [pc, #16]	; (8001034 <HAL_IncTick+0x24>)
 8001022:	6013      	str	r3, [r2, #0]
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000060 	.word	0x20000060
 8001034:	2000016c 	.word	0x2000016c

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	2000016c 	.word	0x2000016c

08001050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	60d3      	str	r3, [r2, #12]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	db0b      	blt.n	80010de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 021f 	and.w	r2, r3, #31
 80010cc:	4907      	ldr	r1, [pc, #28]	; (80010ec <__NVIC_EnableIRQ+0x38>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	2001      	movs	r0, #1
 80010d6:	fa00 f202 	lsl.w	r2, r0, r2
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000e100 	.word	0xe000e100

080010f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	db0a      	blt.n	800111a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	490c      	ldr	r1, [pc, #48]	; (800113c <__NVIC_SetPriority+0x4c>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	440b      	add	r3, r1
 8001114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001118:	e00a      	b.n	8001130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4908      	ldr	r1, [pc, #32]	; (8001140 <__NVIC_SetPriority+0x50>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	3b04      	subs	r3, #4
 8001128:	0112      	lsls	r2, r2, #4
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	440b      	add	r3, r1
 800112e:	761a      	strb	r2, [r3, #24]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000e100 	.word	0xe000e100
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f1c3 0307 	rsb	r3, r3, #7
 800115e:	2b04      	cmp	r3, #4
 8001160:	bf28      	it	cs
 8001162:	2304      	movcs	r3, #4
 8001164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3304      	adds	r3, #4
 800116a:	2b06      	cmp	r3, #6
 800116c:	d902      	bls.n	8001174 <NVIC_EncodePriority+0x30>
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3b03      	subs	r3, #3
 8001172:	e000      	b.n	8001176 <NVIC_EncodePriority+0x32>
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	f04f 32ff 	mov.w	r2, #4294967295
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	401a      	ands	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800118c:	f04f 31ff 	mov.w	r1, #4294967295
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	43d9      	mvns	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	4313      	orrs	r3, r2
         );
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3724      	adds	r7, #36	; 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011bc:	d301      	bcc.n	80011c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011be:	2301      	movs	r3, #1
 80011c0:	e00f      	b.n	80011e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <SysTick_Config+0x40>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ca:	210f      	movs	r1, #15
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f7ff ff8e 	bl	80010f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <SysTick_Config+0x40>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <SysTick_Config+0x40>)
 80011dc:	2207      	movs	r2, #7
 80011de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	e000e010 	.word	0xe000e010

080011f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff29 	bl	8001050 <__NVIC_SetPriorityGrouping>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001218:	f7ff ff3e 	bl	8001098 <__NVIC_GetPriorityGrouping>
 800121c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	6978      	ldr	r0, [r7, #20]
 8001224:	f7ff ff8e 	bl	8001144 <NVIC_EncodePriority>
 8001228:	4602      	mov	r2, r0
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff5d 	bl	80010f0 <__NVIC_SetPriority>
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff31 	bl	80010b4 <__NVIC_EnableIRQ>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ffa2 	bl	80011ac <SysTick_Config>
 8001268:	4603      	mov	r3, r0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b084      	sub	sp, #16
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001280:	f7ff feda 	bl	8001038 <HAL_GetTick>
 8001284:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d008      	beq.n	80012a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2280      	movs	r2, #128	; 0x80
 8001296:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e052      	b.n	800134a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0216 	bic.w	r2, r2, #22
 80012b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	695a      	ldr	r2, [r3, #20]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d103      	bne.n	80012d4 <HAL_DMA_Abort+0x62>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d007      	beq.n	80012e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0208 	bic.w	r2, r2, #8
 80012e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 0201 	bic.w	r2, r2, #1
 80012f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012f4:	e013      	b.n	800131e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012f6:	f7ff fe9f 	bl	8001038 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b05      	cmp	r3, #5
 8001302:	d90c      	bls.n	800131e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2220      	movs	r2, #32
 8001308:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2203      	movs	r2, #3
 800130e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e015      	b.n	800134a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1e4      	bne.n	80012f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001330:	223f      	movs	r2, #63	; 0x3f
 8001332:	409a      	lsls	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2201      	movs	r2, #1
 800133c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d004      	beq.n	8001370 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2280      	movs	r2, #128	; 0x80
 800136a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e00c      	b.n	800138a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2205      	movs	r2, #5
 8001374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0201 	bic.w	r2, r2, #1
 8001386:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	e16b      	b.n	800168c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013b4:	2201      	movs	r2, #1
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	f040 815a 	bne.w	8001686 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d005      	beq.n	80013ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d130      	bne.n	800144c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	2203      	movs	r2, #3
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001420:	2201      	movs	r2, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	091b      	lsrs	r3, r3, #4
 8001436:	f003 0201 	and.w	r2, r3, #1
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b03      	cmp	r3, #3
 8001456:	d017      	beq.n	8001488 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	2203      	movs	r2, #3
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d123      	bne.n	80014dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	08da      	lsrs	r2, r3, #3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3208      	adds	r2, #8
 800149c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	220f      	movs	r2, #15
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	08da      	lsrs	r2, r3, #3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3208      	adds	r2, #8
 80014d6:	69b9      	ldr	r1, [r7, #24]
 80014d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0203 	and.w	r2, r3, #3
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 80b4 	beq.w	8001686 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b60      	ldr	r3, [pc, #384]	; (80016a4 <HAL_GPIO_Init+0x30c>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	4a5f      	ldr	r2, [pc, #380]	; (80016a4 <HAL_GPIO_Init+0x30c>)
 8001528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152c:	6453      	str	r3, [r2, #68]	; 0x44
 800152e:	4b5d      	ldr	r3, [pc, #372]	; (80016a4 <HAL_GPIO_Init+0x30c>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800153a:	4a5b      	ldr	r2, [pc, #364]	; (80016a8 <HAL_GPIO_Init+0x310>)
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	3302      	adds	r3, #2
 8001542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	220f      	movs	r2, #15
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a52      	ldr	r2, [pc, #328]	; (80016ac <HAL_GPIO_Init+0x314>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d02b      	beq.n	80015be <HAL_GPIO_Init+0x226>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a51      	ldr	r2, [pc, #324]	; (80016b0 <HAL_GPIO_Init+0x318>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d025      	beq.n	80015ba <HAL_GPIO_Init+0x222>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a50      	ldr	r2, [pc, #320]	; (80016b4 <HAL_GPIO_Init+0x31c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d01f      	beq.n	80015b6 <HAL_GPIO_Init+0x21e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4f      	ldr	r2, [pc, #316]	; (80016b8 <HAL_GPIO_Init+0x320>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d019      	beq.n	80015b2 <HAL_GPIO_Init+0x21a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4e      	ldr	r2, [pc, #312]	; (80016bc <HAL_GPIO_Init+0x324>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d013      	beq.n	80015ae <HAL_GPIO_Init+0x216>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4d      	ldr	r2, [pc, #308]	; (80016c0 <HAL_GPIO_Init+0x328>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d00d      	beq.n	80015aa <HAL_GPIO_Init+0x212>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4c      	ldr	r2, [pc, #304]	; (80016c4 <HAL_GPIO_Init+0x32c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d007      	beq.n	80015a6 <HAL_GPIO_Init+0x20e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4b      	ldr	r2, [pc, #300]	; (80016c8 <HAL_GPIO_Init+0x330>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d101      	bne.n	80015a2 <HAL_GPIO_Init+0x20a>
 800159e:	2307      	movs	r3, #7
 80015a0:	e00e      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015a2:	2308      	movs	r3, #8
 80015a4:	e00c      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015a6:	2306      	movs	r3, #6
 80015a8:	e00a      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015aa:	2305      	movs	r3, #5
 80015ac:	e008      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015ae:	2304      	movs	r3, #4
 80015b0:	e006      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015b2:	2303      	movs	r3, #3
 80015b4:	e004      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e002      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015be:	2300      	movs	r3, #0
 80015c0:	69fa      	ldr	r2, [r7, #28]
 80015c2:	f002 0203 	and.w	r2, r2, #3
 80015c6:	0092      	lsls	r2, r2, #2
 80015c8:	4093      	lsls	r3, r2
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d0:	4935      	ldr	r1, [pc, #212]	; (80016a8 <HAL_GPIO_Init+0x310>)
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	089b      	lsrs	r3, r3, #2
 80015d6:	3302      	adds	r3, #2
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015de:	4b3b      	ldr	r3, [pc, #236]	; (80016cc <HAL_GPIO_Init+0x334>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001602:	4a32      	ldr	r2, [pc, #200]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001608:	4b30      	ldr	r3, [pc, #192]	; (80016cc <HAL_GPIO_Init+0x334>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800162c:	4a27      	ldr	r2, [pc, #156]	; (80016cc <HAL_GPIO_Init+0x334>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001632:	4b26      	ldr	r3, [pc, #152]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001656:	4a1d      	ldr	r2, [pc, #116]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_GPIO_Init+0x334>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001680:	4a12      	ldr	r2, [pc, #72]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3301      	adds	r3, #1
 800168a:	61fb      	str	r3, [r7, #28]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	2b0f      	cmp	r3, #15
 8001690:	f67f ae90 	bls.w	80013b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	3724      	adds	r7, #36	; 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40013800 	.word	0x40013800
 80016ac:	40020000 	.word	0x40020000
 80016b0:	40020400 	.word	0x40020400
 80016b4:	40020800 	.word	0x40020800
 80016b8:	40020c00 	.word	0x40020c00
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40021400 	.word	0x40021400
 80016c4:	40021800 	.word	0x40021800
 80016c8:	40021c00 	.word	0x40021c00
 80016cc:	40013c00 	.word	0x40013c00

080016d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	887b      	ldrh	r3, [r7, #2]
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d002      	beq.n	80016ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016e8:	2301      	movs	r3, #1
 80016ea:	73fb      	strb	r3, [r7, #15]
 80016ec:	e001      	b.n	80016f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	807b      	strh	r3, [r7, #2]
 800170c:	4613      	mov	r3, r2
 800170e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001710:	787b      	ldrb	r3, [r7, #1]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001716:	887a      	ldrh	r2, [r7, #2]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800171c:	e003      	b.n	8001726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800171e:	887b      	ldrh	r3, [r7, #2]
 8001720:	041a      	lsls	r2, r3, #16
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	619a      	str	r2, [r3, #24]
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e264      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d075      	beq.n	800183e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001752:	4ba3      	ldr	r3, [pc, #652]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b04      	cmp	r3, #4
 800175c:	d00c      	beq.n	8001778 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800175e:	4ba0      	ldr	r3, [pc, #640]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001766:	2b08      	cmp	r3, #8
 8001768:	d112      	bne.n	8001790 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800176a:	4b9d      	ldr	r3, [pc, #628]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001776:	d10b      	bne.n	8001790 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001778:	4b99      	ldr	r3, [pc, #612]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d05b      	beq.n	800183c <HAL_RCC_OscConfig+0x108>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d157      	bne.n	800183c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e23f      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001798:	d106      	bne.n	80017a8 <HAL_RCC_OscConfig+0x74>
 800179a:	4b91      	ldr	r3, [pc, #580]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a90      	ldr	r2, [pc, #576]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80017a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	e01d      	b.n	80017e4 <HAL_RCC_OscConfig+0xb0>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017b0:	d10c      	bne.n	80017cc <HAL_RCC_OscConfig+0x98>
 80017b2:	4b8b      	ldr	r3, [pc, #556]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a8a      	ldr	r2, [pc, #552]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80017b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	4b88      	ldr	r3, [pc, #544]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a87      	ldr	r2, [pc, #540]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80017c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e00b      	b.n	80017e4 <HAL_RCC_OscConfig+0xb0>
 80017cc:	4b84      	ldr	r3, [pc, #528]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a83      	ldr	r2, [pc, #524]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80017d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	4b81      	ldr	r3, [pc, #516]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a80      	ldr	r2, [pc, #512]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80017de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d013      	beq.n	8001814 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fc24 	bl	8001038 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f4:	f7ff fc20 	bl	8001038 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b64      	cmp	r3, #100	; 0x64
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e204      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	4b76      	ldr	r3, [pc, #472]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0xc0>
 8001812:	e014      	b.n	800183e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001814:	f7ff fc10 	bl	8001038 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800181c:	f7ff fc0c 	bl	8001038 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b64      	cmp	r3, #100	; 0x64
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e1f0      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182e:	4b6c      	ldr	r3, [pc, #432]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0xe8>
 800183a:	e000      	b.n	800183e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d063      	beq.n	8001912 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800184a:	4b65      	ldr	r3, [pc, #404]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00b      	beq.n	800186e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001856:	4b62      	ldr	r3, [pc, #392]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800185e:	2b08      	cmp	r3, #8
 8001860:	d11c      	bne.n	800189c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001862:	4b5f      	ldr	r3, [pc, #380]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d116      	bne.n	800189c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186e:	4b5c      	ldr	r3, [pc, #368]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d005      	beq.n	8001886 <HAL_RCC_OscConfig+0x152>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d001      	beq.n	8001886 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e1c4      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001886:	4b56      	ldr	r3, [pc, #344]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	4952      	ldr	r1, [pc, #328]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 8001896:	4313      	orrs	r3, r2
 8001898:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800189a:	e03a      	b.n	8001912 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d020      	beq.n	80018e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a4:	4b4f      	ldr	r3, [pc, #316]	; (80019e4 <HAL_RCC_OscConfig+0x2b0>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018aa:	f7ff fbc5 	bl	8001038 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018b2:	f7ff fbc1 	bl	8001038 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e1a5      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c4:	4b46      	ldr	r3, [pc, #280]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0f0      	beq.n	80018b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d0:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	4940      	ldr	r1, [pc, #256]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	600b      	str	r3, [r1, #0]
 80018e4:	e015      	b.n	8001912 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e6:	4b3f      	ldr	r3, [pc, #252]	; (80019e4 <HAL_RCC_OscConfig+0x2b0>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff fba4 	bl	8001038 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f4:	f7ff fba0 	bl	8001038 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e184      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001906:	4b36      	ldr	r3, [pc, #216]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d030      	beq.n	8001980 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d016      	beq.n	8001954 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001926:	4b30      	ldr	r3, [pc, #192]	; (80019e8 <HAL_RCC_OscConfig+0x2b4>)
 8001928:	2201      	movs	r2, #1
 800192a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192c:	f7ff fb84 	bl	8001038 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001934:	f7ff fb80 	bl	8001038 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e164      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001946:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 8001948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x200>
 8001952:	e015      	b.n	8001980 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001954:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <HAL_RCC_OscConfig+0x2b4>)
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195a:	f7ff fb6d 	bl	8001038 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001962:	f7ff fb69 	bl	8001038 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e14d      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001974:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f0      	bne.n	8001962 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80a0 	beq.w	8001ace <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10f      	bne.n	80019be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	4a0e      	ldr	r2, [pc, #56]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80019a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ac:	6413      	str	r3, [r2, #64]	; 0x40
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ba:	2301      	movs	r3, #1
 80019bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <HAL_RCC_OscConfig+0x2b8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d121      	bne.n	8001a0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <HAL_RCC_OscConfig+0x2b8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a07      	ldr	r2, [pc, #28]	; (80019ec <HAL_RCC_OscConfig+0x2b8>)
 80019d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d6:	f7ff fb2f 	bl	8001038 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019dc:	e011      	b.n	8001a02 <HAL_RCC_OscConfig+0x2ce>
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800
 80019e4:	42470000 	.word	0x42470000
 80019e8:	42470e80 	.word	0x42470e80
 80019ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f0:	f7ff fb22 	bl	8001038 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e106      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a02:	4b85      	ldr	r3, [pc, #532]	; (8001c18 <HAL_RCC_OscConfig+0x4e4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d106      	bne.n	8001a24 <HAL_RCC_OscConfig+0x2f0>
 8001a16:	4b81      	ldr	r3, [pc, #516]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1a:	4a80      	ldr	r2, [pc, #512]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6713      	str	r3, [r2, #112]	; 0x70
 8001a22:	e01c      	b.n	8001a5e <HAL_RCC_OscConfig+0x32a>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	d10c      	bne.n	8001a46 <HAL_RCC_OscConfig+0x312>
 8001a2c:	4b7b      	ldr	r3, [pc, #492]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a30:	4a7a      	ldr	r2, [pc, #488]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001a32:	f043 0304 	orr.w	r3, r3, #4
 8001a36:	6713      	str	r3, [r2, #112]	; 0x70
 8001a38:	4b78      	ldr	r3, [pc, #480]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3c:	4a77      	ldr	r2, [pc, #476]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6713      	str	r3, [r2, #112]	; 0x70
 8001a44:	e00b      	b.n	8001a5e <HAL_RCC_OscConfig+0x32a>
 8001a46:	4b75      	ldr	r3, [pc, #468]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4a:	4a74      	ldr	r2, [pc, #464]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001a4c:	f023 0301 	bic.w	r3, r3, #1
 8001a50:	6713      	str	r3, [r2, #112]	; 0x70
 8001a52:	4b72      	ldr	r3, [pc, #456]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a56:	4a71      	ldr	r2, [pc, #452]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001a58:	f023 0304 	bic.w	r3, r3, #4
 8001a5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d015      	beq.n	8001a92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a66:	f7ff fae7 	bl	8001038 <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6c:	e00a      	b.n	8001a84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6e:	f7ff fae3 	bl	8001038 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e0c5      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a84:	4b65      	ldr	r3, [pc, #404]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0ee      	beq.n	8001a6e <HAL_RCC_OscConfig+0x33a>
 8001a90:	e014      	b.n	8001abc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a92:	f7ff fad1 	bl	8001038 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a98:	e00a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a9a:	f7ff facd 	bl	8001038 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e0af      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab0:	4b5a      	ldr	r3, [pc, #360]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1ee      	bne.n	8001a9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d105      	bne.n	8001ace <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac2:	4b56      	ldr	r3, [pc, #344]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	4a55      	ldr	r2, [pc, #340]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001acc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 809b 	beq.w	8001c0e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ad8:	4b50      	ldr	r3, [pc, #320]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 030c 	and.w	r3, r3, #12
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d05c      	beq.n	8001b9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d141      	bne.n	8001b70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aec:	4b4c      	ldr	r3, [pc, #304]	; (8001c20 <HAL_RCC_OscConfig+0x4ec>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af2:	f7ff faa1 	bl	8001038 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afa:	f7ff fa9d 	bl	8001038 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e081      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b0c:	4b43      	ldr	r3, [pc, #268]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f0      	bne.n	8001afa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69da      	ldr	r2, [r3, #28]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	431a      	orrs	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	019b      	lsls	r3, r3, #6
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	085b      	lsrs	r3, r3, #1
 8001b30:	3b01      	subs	r3, #1
 8001b32:	041b      	lsls	r3, r3, #16
 8001b34:	431a      	orrs	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3a:	061b      	lsls	r3, r3, #24
 8001b3c:	4937      	ldr	r1, [pc, #220]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b42:	4b37      	ldr	r3, [pc, #220]	; (8001c20 <HAL_RCC_OscConfig+0x4ec>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff fa76 	bl	8001038 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b50:	f7ff fa72 	bl	8001038 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e056      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b62:	4b2e      	ldr	r3, [pc, #184]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0x41c>
 8001b6e:	e04e      	b.n	8001c0e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b70:	4b2b      	ldr	r3, [pc, #172]	; (8001c20 <HAL_RCC_OscConfig+0x4ec>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b76:	f7ff fa5f 	bl	8001038 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b7e:	f7ff fa5b 	bl	8001038 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e03f      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b90:	4b22      	ldr	r3, [pc, #136]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f0      	bne.n	8001b7e <HAL_RCC_OscConfig+0x44a>
 8001b9c:	e037      	b.n	8001c0e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e032      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001baa:	4b1c      	ldr	r3, [pc, #112]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d028      	beq.n	8001c0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d121      	bne.n	8001c0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d11a      	bne.n	8001c0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bda:	4013      	ands	r3, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001be0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d111      	bne.n	8001c0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf0:	085b      	lsrs	r3, r3, #1
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d107      	bne.n	8001c0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c04:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d001      	beq.n	8001c0e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40007000 	.word	0x40007000
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	42470060 	.word	0x42470060

08001c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0cc      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c38:	4b68      	ldr	r3, [pc, #416]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d90c      	bls.n	8001c60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c46:	4b65      	ldr	r3, [pc, #404]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4e:	4b63      	ldr	r3, [pc, #396]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d001      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0b8      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d020      	beq.n	8001cae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c78:	4b59      	ldr	r3, [pc, #356]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	4a58      	ldr	r2, [pc, #352]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c90:	4b53      	ldr	r3, [pc, #332]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	4a52      	ldr	r2, [pc, #328]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c9c:	4b50      	ldr	r3, [pc, #320]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	494d      	ldr	r1, [pc, #308]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d044      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d107      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	4b47      	ldr	r3, [pc, #284]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d119      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e07f      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d003      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d107      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce2:	4b3f      	ldr	r3, [pc, #252]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d109      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e06f      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf2:	4b3b      	ldr	r3, [pc, #236]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e067      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d02:	4b37      	ldr	r3, [pc, #220]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f023 0203 	bic.w	r2, r3, #3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	4934      	ldr	r1, [pc, #208]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d14:	f7ff f990 	bl	8001038 <HAL_GetTick>
 8001d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	e00a      	b.n	8001d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1c:	f7ff f98c 	bl	8001038 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e04f      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	4b2b      	ldr	r3, [pc, #172]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 020c 	and.w	r2, r3, #12
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d1eb      	bne.n	8001d1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d44:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d20c      	bcs.n	8001d6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5a:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e032      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d008      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d78:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	4916      	ldr	r1, [pc, #88]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d009      	beq.n	8001daa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d96:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	490e      	ldr	r1, [pc, #56]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001daa:	f000 f821 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8001dae:	4602      	mov	r2, r0
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	091b      	lsrs	r3, r3, #4
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	490a      	ldr	r1, [pc, #40]	; (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001dbc:	5ccb      	ldrb	r3, [r1, r3]
 8001dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc2:	4a09      	ldr	r2, [pc, #36]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_RCC_ClockConfig+0x1c8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff f8f0 	bl	8000fb0 <HAL_InitTick>

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023c00 	.word	0x40023c00
 8001de0:	40023800 	.word	0x40023800
 8001de4:	08003a00 	.word	0x08003a00
 8001de8:	20000058 	.word	0x20000058
 8001dec:	2000005c 	.word	0x2000005c

08001df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001df0:	b5b0      	push	{r4, r5, r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001df6:	2100      	movs	r1, #0
 8001df8:	6079      	str	r1, [r7, #4]
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	60f9      	str	r1, [r7, #12]
 8001dfe:	2100      	movs	r1, #0
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001e02:	2100      	movs	r1, #0
 8001e04:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e06:	4952      	ldr	r1, [pc, #328]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e08:	6889      	ldr	r1, [r1, #8]
 8001e0a:	f001 010c 	and.w	r1, r1, #12
 8001e0e:	2908      	cmp	r1, #8
 8001e10:	d00d      	beq.n	8001e2e <HAL_RCC_GetSysClockFreq+0x3e>
 8001e12:	2908      	cmp	r1, #8
 8001e14:	f200 8094 	bhi.w	8001f40 <HAL_RCC_GetSysClockFreq+0x150>
 8001e18:	2900      	cmp	r1, #0
 8001e1a:	d002      	beq.n	8001e22 <HAL_RCC_GetSysClockFreq+0x32>
 8001e1c:	2904      	cmp	r1, #4
 8001e1e:	d003      	beq.n	8001e28 <HAL_RCC_GetSysClockFreq+0x38>
 8001e20:	e08e      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e22:	4b4c      	ldr	r3, [pc, #304]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x164>)
 8001e24:	60bb      	str	r3, [r7, #8]
       break;
 8001e26:	e08e      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e28:	4b4b      	ldr	r3, [pc, #300]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x168>)
 8001e2a:	60bb      	str	r3, [r7, #8]
      break;
 8001e2c:	e08b      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e2e:	4948      	ldr	r1, [pc, #288]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e30:	6849      	ldr	r1, [r1, #4]
 8001e32:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001e36:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e38:	4945      	ldr	r1, [pc, #276]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e3a:	6849      	ldr	r1, [r1, #4]
 8001e3c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001e40:	2900      	cmp	r1, #0
 8001e42:	d024      	beq.n	8001e8e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e44:	4942      	ldr	r1, [pc, #264]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e46:	6849      	ldr	r1, [r1, #4]
 8001e48:	0989      	lsrs	r1, r1, #6
 8001e4a:	4608      	mov	r0, r1
 8001e4c:	f04f 0100 	mov.w	r1, #0
 8001e50:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001e54:	f04f 0500 	mov.w	r5, #0
 8001e58:	ea00 0204 	and.w	r2, r0, r4
 8001e5c:	ea01 0305 	and.w	r3, r1, r5
 8001e60:	493d      	ldr	r1, [pc, #244]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x168>)
 8001e62:	fb01 f003 	mul.w	r0, r1, r3
 8001e66:	2100      	movs	r1, #0
 8001e68:	fb01 f102 	mul.w	r1, r1, r2
 8001e6c:	1844      	adds	r4, r0, r1
 8001e6e:	493a      	ldr	r1, [pc, #232]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x168>)
 8001e70:	fba2 0101 	umull	r0, r1, r2, r1
 8001e74:	1863      	adds	r3, r4, r1
 8001e76:	4619      	mov	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	f04f 0300 	mov.w	r3, #0
 8001e80:	f7fe f9fe 	bl	8000280 <__aeabi_uldivmod>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4613      	mov	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	e04a      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e8e:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	099b      	lsrs	r3, r3, #6
 8001e94:	461a      	mov	r2, r3
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e9e:	f04f 0100 	mov.w	r1, #0
 8001ea2:	ea02 0400 	and.w	r4, r2, r0
 8001ea6:	ea03 0501 	and.w	r5, r3, r1
 8001eaa:	4620      	mov	r0, r4
 8001eac:	4629      	mov	r1, r5
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	014b      	lsls	r3, r1, #5
 8001eb8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ebc:	0142      	lsls	r2, r0, #5
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	1b00      	subs	r0, r0, r4
 8001ec4:	eb61 0105 	sbc.w	r1, r1, r5
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	018b      	lsls	r3, r1, #6
 8001ed2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ed6:	0182      	lsls	r2, r0, #6
 8001ed8:	1a12      	subs	r2, r2, r0
 8001eda:	eb63 0301 	sbc.w	r3, r3, r1
 8001ede:	f04f 0000 	mov.w	r0, #0
 8001ee2:	f04f 0100 	mov.w	r1, #0
 8001ee6:	00d9      	lsls	r1, r3, #3
 8001ee8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001eec:	00d0      	lsls	r0, r2, #3
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	1912      	adds	r2, r2, r4
 8001ef4:	eb45 0303 	adc.w	r3, r5, r3
 8001ef8:	f04f 0000 	mov.w	r0, #0
 8001efc:	f04f 0100 	mov.w	r1, #0
 8001f00:	0299      	lsls	r1, r3, #10
 8001f02:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f06:	0290      	lsls	r0, r2, #10
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4610      	mov	r0, r2
 8001f0e:	4619      	mov	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	461a      	mov	r2, r3
 8001f14:	f04f 0300 	mov.w	r3, #0
 8001f18:	f7fe f9b2 	bl	8000280 <__aeabi_uldivmod>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4613      	mov	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f24:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	0c1b      	lsrs	r3, r3, #16
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	3301      	adds	r3, #1
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3c:	60bb      	str	r3, [r7, #8]
      break;
 8001f3e:	e002      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f40:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x164>)
 8001f42:	60bb      	str	r3, [r7, #8]
      break;
 8001f44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f46:	68bb      	ldr	r3, [r7, #8]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f50:	40023800 	.word	0x40023800
 8001f54:	00f42400 	.word	0x00f42400
 8001f58:	017d7840 	.word	0x017d7840

08001f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f60:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f62:	681b      	ldr	r3, [r3, #0]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000058 	.word	0x20000058

08001f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f78:	f7ff fff0 	bl	8001f5c <HAL_RCC_GetHCLKFreq>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	0a9b      	lsrs	r3, r3, #10
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	4903      	ldr	r1, [pc, #12]	; (8001f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f8a:	5ccb      	ldrb	r3, [r1, r3]
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40023800 	.word	0x40023800
 8001f98:	08003a10 	.word	0x08003a10

08001f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fa0:	f7ff ffdc 	bl	8001f5c <HAL_RCC_GetHCLKFreq>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	0b5b      	lsrs	r3, r3, #13
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	4903      	ldr	r1, [pc, #12]	; (8001fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fb2:	5ccb      	ldrb	r3, [r1, r3]
 8001fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	08003a10 	.word	0x08003a10

08001fc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e03f      	b.n	8002056 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d106      	bne.n	8001ff0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7fe ff44 	bl	8000e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2224      	movs	r2, #36	; 0x24
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002006:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 fec1 	bl	8002d90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800201c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	695a      	ldr	r2, [r3, #20]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800202c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800203c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2220      	movs	r2, #32
 8002048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2220      	movs	r2, #32
 8002050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b08a      	sub	sp, #40	; 0x28
 8002062:	af02      	add	r7, sp, #8
 8002064:	60f8      	str	r0, [r7, #12]
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	603b      	str	r3, [r7, #0]
 800206a:	4613      	mov	r3, r2
 800206c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b20      	cmp	r3, #32
 800207c:	d17c      	bne.n	8002178 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <HAL_UART_Transmit+0x2c>
 8002084:	88fb      	ldrh	r3, [r7, #6]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e075      	b.n	800217a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_UART_Transmit+0x3e>
 8002098:	2302      	movs	r3, #2
 800209a:	e06e      	b.n	800217a <HAL_UART_Transmit+0x11c>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2221      	movs	r2, #33	; 0x21
 80020ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020b2:	f7fe ffc1 	bl	8001038 <HAL_GetTick>
 80020b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	88fa      	ldrh	r2, [r7, #6]
 80020bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	88fa      	ldrh	r2, [r7, #6]
 80020c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020cc:	d108      	bne.n	80020e0 <HAL_UART_Transmit+0x82>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d104      	bne.n	80020e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	61bb      	str	r3, [r7, #24]
 80020de:	e003      	b.n	80020e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020f0:	e02a      	b.n	8002148 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2200      	movs	r2, #0
 80020fa:	2180      	movs	r1, #128	; 0x80
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 fc05 	bl	800290c <UART_WaitOnFlagUntilTimeout>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e036      	b.n	800217a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10b      	bne.n	800212a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002120:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	3302      	adds	r3, #2
 8002126:	61bb      	str	r3, [r7, #24]
 8002128:	e007      	b.n	800213a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	781a      	ldrb	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	3301      	adds	r3, #1
 8002138:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800213e:	b29b      	uxth	r3, r3
 8002140:	3b01      	subs	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800214c:	b29b      	uxth	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1cf      	bne.n	80020f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	2200      	movs	r2, #0
 800215a:	2140      	movs	r1, #64	; 0x40
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 fbd5 	bl	800290c <UART_WaitOnFlagUntilTimeout>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e006      	b.n	800217a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002174:	2300      	movs	r3, #0
 8002176:	e000      	b.n	800217a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002178:	2302      	movs	r3, #2
  }
}
 800217a:	4618      	mov	r0, r3
 800217c:	3720      	adds	r7, #32
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b08a      	sub	sp, #40	; 0x28
 8002186:	af02      	add	r7, sp, #8
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	603b      	str	r3, [r7, #0]
 800218e:	4613      	mov	r3, r2
 8002190:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b20      	cmp	r3, #32
 80021a0:	f040 808c 	bne.w	80022bc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <HAL_UART_Receive+0x2e>
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e084      	b.n	80022be <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d101      	bne.n	80021c2 <HAL_UART_Receive+0x40>
 80021be:	2302      	movs	r3, #2
 80021c0:	e07d      	b.n	80022be <HAL_UART_Receive+0x13c>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2222      	movs	r2, #34	; 0x22
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021de:	f7fe ff2b 	bl	8001038 <HAL_GetTick>
 80021e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	88fa      	ldrh	r2, [r7, #6]
 80021e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	88fa      	ldrh	r2, [r7, #6]
 80021ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f8:	d108      	bne.n	800220c <HAL_UART_Receive+0x8a>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d104      	bne.n	800220c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	61bb      	str	r3, [r7, #24]
 800220a:	e003      	b.n	8002214 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002210:	2300      	movs	r3, #0
 8002212:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800221c:	e043      	b.n	80022a6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	2200      	movs	r2, #0
 8002226:	2120      	movs	r1, #32
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f000 fb6f 	bl	800290c <UART_WaitOnFlagUntilTimeout>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e042      	b.n	80022be <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10c      	bne.n	8002258 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	b29b      	uxth	r3, r3
 8002246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800224a:	b29a      	uxth	r2, r3
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	3302      	adds	r3, #2
 8002254:	61bb      	str	r3, [r7, #24]
 8002256:	e01f      	b.n	8002298 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002260:	d007      	beq.n	8002272 <HAL_UART_Receive+0xf0>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10a      	bne.n	8002280 <HAL_UART_Receive+0xfe>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d106      	bne.n	8002280 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	b2da      	uxtb	r2, r3
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	701a      	strb	r2, [r3, #0]
 800227e:	e008      	b.n	8002292 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800228c:	b2da      	uxtb	r2, r3
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3301      	adds	r3, #1
 8002296:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800229c:	b29b      	uxth	r3, r3
 800229e:	3b01      	subs	r3, #1
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1b6      	bne.n	800221e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	e000      	b.n	80022be <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80022bc:	2302      	movs	r3, #2
  }
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3720      	adds	r7, #32
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b085      	sub	sp, #20
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	4613      	mov	r3, r2
 80022d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b20      	cmp	r3, #32
 80022de:	d130      	bne.n	8002342 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <HAL_UART_Transmit_IT+0x26>
 80022e6:	88fb      	ldrh	r3, [r7, #6]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e029      	b.n	8002344 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_UART_Transmit_IT+0x38>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e022      	b.n	8002344 <HAL_UART_Transmit_IT+0x7e>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	88fa      	ldrh	r2, [r7, #6]
 8002310:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	88fa      	ldrh	r2, [r7, #6]
 8002316:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2221      	movs	r2, #33	; 0x21
 8002322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800233c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	e000      	b.n	8002344 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002342:	2302      	movs	r3, #2
  }
}
 8002344:	4618      	mov	r0, r3
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	4613      	mov	r3, r2
 800235c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b20      	cmp	r3, #32
 8002368:	d11d      	bne.n	80023a6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <HAL_UART_Receive_IT+0x26>
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e016      	b.n	80023a8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_UART_Receive_IT+0x38>
 8002384:	2302      	movs	r3, #2
 8002386:	e00f      	b.n	80023a8 <HAL_UART_Receive_IT+0x58>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002396:	88fb      	ldrh	r3, [r7, #6]
 8002398:	461a      	mov	r2, r3
 800239a:	68b9      	ldr	r1, [r7, #8]
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 fb23 	bl	80029e8 <UART_Start_Receive_IT>
 80023a2:	4603      	mov	r3, r0
 80023a4:	e000      	b.n	80023a8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80023a6:	2302      	movs	r3, #2
  }
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b0ba      	sub	sp, #232	; 0xe8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80023dc:	2300      	movs	r3, #0
 80023de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80023e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80023ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10f      	bne.n	8002416 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d009      	beq.n	8002416 <HAL_UART_IRQHandler+0x66>
 8002402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002406:	f003 0320 	and.w	r3, r3, #32
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 fc03 	bl	8002c1a <UART_Receive_IT>
      return;
 8002414:	e256      	b.n	80028c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002416:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 80de 	beq.w	80025dc <HAL_UART_IRQHandler+0x22c>
 8002420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	d106      	bne.n	800243a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800242c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002430:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80d1 	beq.w	80025dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800243a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00b      	beq.n	800245e <HAL_UART_IRQHandler+0xae>
 8002446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800244a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f043 0201 	orr.w	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800245e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00b      	beq.n	8002482 <HAL_UART_IRQHandler+0xd2>
 800246a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d005      	beq.n	8002482 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f043 0202 	orr.w	r2, r3, #2
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00b      	beq.n	80024a6 <HAL_UART_IRQHandler+0xf6>
 800248e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f043 0204 	orr.w	r2, r3, #4
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80024a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d011      	beq.n	80024d6 <HAL_UART_IRQHandler+0x126>
 80024b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024b6:	f003 0320 	and.w	r3, r3, #32
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d105      	bne.n	80024ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80024be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d005      	beq.n	80024d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f043 0208 	orr.w	r2, r3, #8
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 81ed 	beq.w	80028ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024e4:	f003 0320 	and.w	r3, r3, #32
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_UART_IRQHandler+0x14e>
 80024ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 fb8e 	bl	8002c1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002508:	2b40      	cmp	r3, #64	; 0x40
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d103      	bne.n	800252a <HAL_UART_IRQHandler+0x17a>
 8002522:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002526:	2b00      	cmp	r3, #0
 8002528:	d04f      	beq.n	80025ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 fa96 	bl	8002a5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253a:	2b40      	cmp	r3, #64	; 0x40
 800253c:	d141      	bne.n	80025c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	3314      	adds	r3, #20
 8002544:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002548:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800254c:	e853 3f00 	ldrex	r3, [r3]
 8002550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002554:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800255c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3314      	adds	r3, #20
 8002566:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800256a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800256e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002572:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002576:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800257a:	e841 2300 	strex	r3, r2, [r1]
 800257e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002582:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1d9      	bne.n	800253e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258e:	2b00      	cmp	r3, #0
 8002590:	d013      	beq.n	80025ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002596:	4a7d      	ldr	r2, [pc, #500]	; (800278c <HAL_UART_IRQHandler+0x3dc>)
 8002598:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fed7 	bl	8001352 <HAL_DMA_Abort_IT>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d016      	beq.n	80025d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025b4:	4610      	mov	r0, r2
 80025b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b8:	e00e      	b.n	80025d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f990 	bl	80028e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c0:	e00a      	b.n	80025d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f98c 	bl	80028e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c8:	e006      	b.n	80025d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f988 	bl	80028e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80025d6:	e170      	b.n	80028ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d8:	bf00      	nop
    return;
 80025da:	e16e      	b.n	80028ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	f040 814a 	bne.w	800287a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80025e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 8143 	beq.w	800287a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80025f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 813c 	beq.w	800287a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002622:	2b40      	cmp	r3, #64	; 0x40
 8002624:	f040 80b4 	bne.w	8002790 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002634:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 8140 	beq.w	80028be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002646:	429a      	cmp	r2, r3
 8002648:	f080 8139 	bcs.w	80028be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002652:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800265e:	f000 8088 	beq.w	8002772 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	330c      	adds	r3, #12
 8002668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002670:	e853 3f00 	ldrex	r3, [r3]
 8002674:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002678:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800267c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002680:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	330c      	adds	r3, #12
 800268a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800268e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002692:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002696:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800269a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800269e:	e841 2300 	strex	r3, r2, [r1]
 80026a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80026a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1d9      	bne.n	8002662 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	3314      	adds	r3, #20
 80026b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026b8:	e853 3f00 	ldrex	r3, [r3]
 80026bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80026be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026c0:	f023 0301 	bic.w	r3, r3, #1
 80026c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	3314      	adds	r3, #20
 80026ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80026d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80026d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80026da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80026de:	e841 2300 	strex	r3, r2, [r1]
 80026e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80026e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1e1      	bne.n	80026ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	3314      	adds	r3, #20
 80026f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026f4:	e853 3f00 	ldrex	r3, [r3]
 80026f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80026fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002700:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	3314      	adds	r3, #20
 800270a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800270e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002710:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002712:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002714:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002716:	e841 2300 	strex	r3, r2, [r1]
 800271a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800271c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1e3      	bne.n	80026ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	330c      	adds	r3, #12
 8002736:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800273a:	e853 3f00 	ldrex	r3, [r3]
 800273e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002742:	f023 0310 	bic.w	r3, r3, #16
 8002746:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	330c      	adds	r3, #12
 8002750:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002754:	65ba      	str	r2, [r7, #88]	; 0x58
 8002756:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002758:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800275a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800275c:	e841 2300 	strex	r3, r2, [r1]
 8002760:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1e3      	bne.n	8002730 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276c:	4618      	mov	r0, r3
 800276e:	f7fe fd80 	bl	8001272 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800277a:	b29b      	uxth	r3, r3
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	b29b      	uxth	r3, r3
 8002780:	4619      	mov	r1, r3
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f8b6 	bl	80028f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002788:	e099      	b.n	80028be <HAL_UART_IRQHandler+0x50e>
 800278a:	bf00      	nop
 800278c:	08002b23 	.word	0x08002b23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002798:	b29b      	uxth	r3, r3
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 808b 	beq.w	80028c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80027ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 8086 	beq.w	80028c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	330c      	adds	r3, #12
 80027bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c0:	e853 3f00 	ldrex	r3, [r3]
 80027c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80027c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	330c      	adds	r3, #12
 80027d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80027da:	647a      	str	r2, [r7, #68]	; 0x44
 80027dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80027e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027e2:	e841 2300 	strex	r3, r2, [r1]
 80027e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80027e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1e3      	bne.n	80027b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	3314      	adds	r3, #20
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	e853 3f00 	ldrex	r3, [r3]
 80027fc:	623b      	str	r3, [r7, #32]
   return(result);
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	3314      	adds	r3, #20
 800280e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002812:	633a      	str	r2, [r7, #48]	; 0x30
 8002814:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002816:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800281a:	e841 2300 	strex	r3, r2, [r1]
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1e3      	bne.n	80027ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	330c      	adds	r3, #12
 800283a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	e853 3f00 	ldrex	r3, [r3]
 8002842:	60fb      	str	r3, [r7, #12]
   return(result);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f023 0310 	bic.w	r3, r3, #16
 800284a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	330c      	adds	r3, #12
 8002854:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002858:	61fa      	str	r2, [r7, #28]
 800285a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800285c:	69b9      	ldr	r1, [r7, #24]
 800285e:	69fa      	ldr	r2, [r7, #28]
 8002860:	e841 2300 	strex	r3, r2, [r1]
 8002864:	617b      	str	r3, [r7, #20]
   return(result);
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1e3      	bne.n	8002834 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800286c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002870:	4619      	mov	r1, r3
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f83e 	bl	80028f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002878:	e023      	b.n	80028c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800287a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800287e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002882:	2b00      	cmp	r3, #0
 8002884:	d009      	beq.n	800289a <HAL_UART_IRQHandler+0x4ea>
 8002886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800288a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f959 	bl	8002b4a <UART_Transmit_IT>
    return;
 8002898:	e014      	b.n	80028c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800289a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800289e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00e      	beq.n	80028c4 <HAL_UART_IRQHandler+0x514>
 80028a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d008      	beq.n	80028c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f999 	bl	8002bea <UART_EndTransmit_IT>
    return;
 80028b8:	e004      	b.n	80028c4 <HAL_UART_IRQHandler+0x514>
    return;
 80028ba:	bf00      	nop
 80028bc:	e002      	b.n	80028c4 <HAL_UART_IRQHandler+0x514>
      return;
 80028be:	bf00      	nop
 80028c0:	e000      	b.n	80028c4 <HAL_UART_IRQHandler+0x514>
      return;
 80028c2:	bf00      	nop
  }
}
 80028c4:	37e8      	adds	r7, #232	; 0xe8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop

080028cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b090      	sub	sp, #64	; 0x40
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	4613      	mov	r3, r2
 800291a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800291c:	e050      	b.n	80029c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800291e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002924:	d04c      	beq.n	80029c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002928:	2b00      	cmp	r3, #0
 800292a:	d007      	beq.n	800293c <UART_WaitOnFlagUntilTimeout+0x30>
 800292c:	f7fe fb84 	bl	8001038 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002938:	429a      	cmp	r2, r3
 800293a:	d241      	bcs.n	80029c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	330c      	adds	r3, #12
 8002942:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002946:	e853 3f00 	ldrex	r3, [r3]
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	330c      	adds	r3, #12
 800295a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800295c:	637a      	str	r2, [r7, #52]	; 0x34
 800295e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002960:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002962:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002964:	e841 2300 	strex	r3, r2, [r1]
 8002968:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800296a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1e5      	bne.n	800293c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3314      	adds	r3, #20
 8002976:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	e853 3f00 	ldrex	r3, [r3]
 800297e:	613b      	str	r3, [r7, #16]
   return(result);
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	f023 0301 	bic.w	r3, r3, #1
 8002986:	63bb      	str	r3, [r7, #56]	; 0x38
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	3314      	adds	r3, #20
 800298e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002990:	623a      	str	r2, [r7, #32]
 8002992:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002994:	69f9      	ldr	r1, [r7, #28]
 8002996:	6a3a      	ldr	r2, [r7, #32]
 8002998:	e841 2300 	strex	r3, r2, [r1]
 800299c:	61bb      	str	r3, [r7, #24]
   return(result);
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1e5      	bne.n	8002970 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e00f      	b.n	80029e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	4013      	ands	r3, r2
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	bf0c      	ite	eq
 80029d0:	2301      	moveq	r3, #1
 80029d2:	2300      	movne	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d09f      	beq.n	800291e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3740      	adds	r7, #64	; 0x40
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	4613      	mov	r3, r2
 80029f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	88fa      	ldrh	r2, [r7, #6]
 8002a00:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	88fa      	ldrh	r2, [r7, #6]
 8002a06:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2222      	movs	r2, #34	; 0x22
 8002a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a2c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695a      	ldr	r2, [r3, #20]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0201 	orr.w	r2, r2, #1
 8002a3c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f042 0220 	orr.w	r2, r2, #32
 8002a4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b095      	sub	sp, #84	; 0x54
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	330c      	adds	r3, #12
 8002a6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6e:	e853 3f00 	ldrex	r3, [r3]
 8002a72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	330c      	adds	r3, #12
 8002a82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a84:	643a      	str	r2, [r7, #64]	; 0x40
 8002a86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a8c:	e841 2300 	strex	r3, r2, [r1]
 8002a90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1e5      	bne.n	8002a64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	3314      	adds	r3, #20
 8002a9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	e853 3f00 	ldrex	r3, [r3]
 8002aa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f023 0301 	bic.w	r3, r3, #1
 8002aae:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3314      	adds	r3, #20
 8002ab6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ab8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002aba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002abc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ac0:	e841 2300 	strex	r3, r2, [r1]
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1e5      	bne.n	8002a98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d119      	bne.n	8002b08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	330c      	adds	r3, #12
 8002ada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	e853 3f00 	ldrex	r3, [r3]
 8002ae2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f023 0310 	bic.w	r3, r3, #16
 8002aea:	647b      	str	r3, [r7, #68]	; 0x44
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	330c      	adds	r3, #12
 8002af2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002af4:	61ba      	str	r2, [r7, #24]
 8002af6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af8:	6979      	ldr	r1, [r7, #20]
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	e841 2300 	strex	r3, r2, [r1]
 8002b00:	613b      	str	r3, [r7, #16]
   return(result);
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1e5      	bne.n	8002ad4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b16:	bf00      	nop
 8002b18:	3754      	adds	r7, #84	; 0x54
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f7ff fecf 	bl	80028e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b42:	bf00      	nop
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b085      	sub	sp, #20
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b21      	cmp	r3, #33	; 0x21
 8002b5c:	d13e      	bne.n	8002bdc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b66:	d114      	bne.n	8002b92 <UART_Transmit_IT+0x48>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d110      	bne.n	8002b92 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b84:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	1c9a      	adds	r2, r3, #2
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	621a      	str	r2, [r3, #32]
 8002b90:	e008      	b.n	8002ba4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	1c59      	adds	r1, r3, #1
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6211      	str	r1, [r2, #32]
 8002b9c:	781a      	ldrb	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10f      	bne.n	8002bd8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bc6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bd6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e000      	b.n	8002bde <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002bdc:	2302      	movs	r3, #2
  }
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff fe5e 	bl	80028cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b08c      	sub	sp, #48	; 0x30
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b22      	cmp	r3, #34	; 0x22
 8002c2c:	f040 80ab 	bne.w	8002d86 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c38:	d117      	bne.n	8002c6a <UART_Receive_IT+0x50>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d113      	bne.n	8002c6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c62:	1c9a      	adds	r2, r3, #2
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	629a      	str	r2, [r3, #40]	; 0x28
 8002c68:	e026      	b.n	8002cb8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c7c:	d007      	beq.n	8002c8e <UART_Receive_IT+0x74>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10a      	bne.n	8002c9c <UART_Receive_IT+0x82>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c98:	701a      	strb	r2, [r3, #0]
 8002c9a:	e008      	b.n	8002cae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d15a      	bne.n	8002d82 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0220 	bic.w	r2, r2, #32
 8002cda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0201 	bic.w	r2, r2, #1
 8002cfa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d135      	bne.n	8002d78 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	330c      	adds	r3, #12
 8002d18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	e853 3f00 	ldrex	r3, [r3]
 8002d20:	613b      	str	r3, [r7, #16]
   return(result);
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	f023 0310 	bic.w	r3, r3, #16
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	330c      	adds	r3, #12
 8002d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d32:	623a      	str	r2, [r7, #32]
 8002d34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d36:	69f9      	ldr	r1, [r7, #28]
 8002d38:	6a3a      	ldr	r2, [r7, #32]
 8002d3a:	e841 2300 	strex	r3, r2, [r1]
 8002d3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1e5      	bne.n	8002d12 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	2b10      	cmp	r3, #16
 8002d52:	d10a      	bne.n	8002d6a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d54:	2300      	movs	r3, #0
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d6e:	4619      	mov	r1, r3
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff fdbf 	bl	80028f4 <HAL_UARTEx_RxEventCallback>
 8002d76:	e002      	b.n	8002d7e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7fd feb9 	bl	8000af0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	e002      	b.n	8002d88 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	e000      	b.n	8002d88 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002d86:	2302      	movs	r3, #2
  }
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3730      	adds	r7, #48	; 0x30
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d94:	b09f      	sub	sp, #124	; 0x7c
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da6:	68d9      	ldr	r1, [r3, #12]
 8002da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	ea40 0301 	orr.w	r3, r0, r1
 8002db0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002dd4:	f021 010c 	bic.w	r1, r1, #12
 8002dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dde:	430b      	orrs	r3, r1
 8002de0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dee:	6999      	ldr	r1, [r3, #24]
 8002df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	ea40 0301 	orr.w	r3, r0, r1
 8002df8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	4bc5      	ldr	r3, [pc, #788]	; (8003114 <UART_SetConfig+0x384>)
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d004      	beq.n	8002e0e <UART_SetConfig+0x7e>
 8002e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	4bc3      	ldr	r3, [pc, #780]	; (8003118 <UART_SetConfig+0x388>)
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d103      	bne.n	8002e16 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e0e:	f7ff f8c5 	bl	8001f9c <HAL_RCC_GetPCLK2Freq>
 8002e12:	6778      	str	r0, [r7, #116]	; 0x74
 8002e14:	e002      	b.n	8002e1c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e16:	f7ff f8ad 	bl	8001f74 <HAL_RCC_GetPCLK1Freq>
 8002e1a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e24:	f040 80b6 	bne.w	8002f94 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e2a:	461c      	mov	r4, r3
 8002e2c:	f04f 0500 	mov.w	r5, #0
 8002e30:	4622      	mov	r2, r4
 8002e32:	462b      	mov	r3, r5
 8002e34:	1891      	adds	r1, r2, r2
 8002e36:	6439      	str	r1, [r7, #64]	; 0x40
 8002e38:	415b      	adcs	r3, r3
 8002e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e40:	1912      	adds	r2, r2, r4
 8002e42:	eb45 0303 	adc.w	r3, r5, r3
 8002e46:	f04f 0000 	mov.w	r0, #0
 8002e4a:	f04f 0100 	mov.w	r1, #0
 8002e4e:	00d9      	lsls	r1, r3, #3
 8002e50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e54:	00d0      	lsls	r0, r2, #3
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	1911      	adds	r1, r2, r4
 8002e5c:	6639      	str	r1, [r7, #96]	; 0x60
 8002e5e:	416b      	adcs	r3, r5
 8002e60:	667b      	str	r3, [r7, #100]	; 0x64
 8002e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	461a      	mov	r2, r3
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	1891      	adds	r1, r2, r2
 8002e6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e70:	415b      	adcs	r3, r3
 8002e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e78:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002e7c:	f7fd fa00 	bl	8000280 <__aeabi_uldivmod>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4ba5      	ldr	r3, [pc, #660]	; (800311c <UART_SetConfig+0x38c>)
 8002e86:	fba3 2302 	umull	r2, r3, r3, r2
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	011e      	lsls	r6, r3, #4
 8002e8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e90:	461c      	mov	r4, r3
 8002e92:	f04f 0500 	mov.w	r5, #0
 8002e96:	4622      	mov	r2, r4
 8002e98:	462b      	mov	r3, r5
 8002e9a:	1891      	adds	r1, r2, r2
 8002e9c:	6339      	str	r1, [r7, #48]	; 0x30
 8002e9e:	415b      	adcs	r3, r3
 8002ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ea2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ea6:	1912      	adds	r2, r2, r4
 8002ea8:	eb45 0303 	adc.w	r3, r5, r3
 8002eac:	f04f 0000 	mov.w	r0, #0
 8002eb0:	f04f 0100 	mov.w	r1, #0
 8002eb4:	00d9      	lsls	r1, r3, #3
 8002eb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002eba:	00d0      	lsls	r0, r2, #3
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	1911      	adds	r1, r2, r4
 8002ec2:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ec4:	416b      	adcs	r3, r5
 8002ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	1891      	adds	r1, r2, r2
 8002ed4:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ed6:	415b      	adcs	r3, r3
 8002ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ede:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002ee2:	f7fd f9cd 	bl	8000280 <__aeabi_uldivmod>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4b8c      	ldr	r3, [pc, #560]	; (800311c <UART_SetConfig+0x38c>)
 8002eec:	fba3 1302 	umull	r1, r3, r3, r2
 8002ef0:	095b      	lsrs	r3, r3, #5
 8002ef2:	2164      	movs	r1, #100	; 0x64
 8002ef4:	fb01 f303 	mul.w	r3, r1, r3
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	3332      	adds	r3, #50	; 0x32
 8002efe:	4a87      	ldr	r2, [pc, #540]	; (800311c <UART_SetConfig+0x38c>)
 8002f00:	fba2 2303 	umull	r2, r3, r2, r3
 8002f04:	095b      	lsrs	r3, r3, #5
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f0c:	441e      	add	r6, r3
 8002f0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f10:	4618      	mov	r0, r3
 8002f12:	f04f 0100 	mov.w	r1, #0
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	1894      	adds	r4, r2, r2
 8002f1c:	623c      	str	r4, [r7, #32]
 8002f1e:	415b      	adcs	r3, r3
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
 8002f22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f26:	1812      	adds	r2, r2, r0
 8002f28:	eb41 0303 	adc.w	r3, r1, r3
 8002f2c:	f04f 0400 	mov.w	r4, #0
 8002f30:	f04f 0500 	mov.w	r5, #0
 8002f34:	00dd      	lsls	r5, r3, #3
 8002f36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f3a:	00d4      	lsls	r4, r2, #3
 8002f3c:	4622      	mov	r2, r4
 8002f3e:	462b      	mov	r3, r5
 8002f40:	1814      	adds	r4, r2, r0
 8002f42:	653c      	str	r4, [r7, #80]	; 0x50
 8002f44:	414b      	adcs	r3, r1
 8002f46:	657b      	str	r3, [r7, #84]	; 0x54
 8002f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	1891      	adds	r1, r2, r2
 8002f54:	61b9      	str	r1, [r7, #24]
 8002f56:	415b      	adcs	r3, r3
 8002f58:	61fb      	str	r3, [r7, #28]
 8002f5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f5e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002f62:	f7fd f98d 	bl	8000280 <__aeabi_uldivmod>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4b6c      	ldr	r3, [pc, #432]	; (800311c <UART_SetConfig+0x38c>)
 8002f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f70:	095b      	lsrs	r3, r3, #5
 8002f72:	2164      	movs	r1, #100	; 0x64
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	3332      	adds	r3, #50	; 0x32
 8002f7e:	4a67      	ldr	r2, [pc, #412]	; (800311c <UART_SetConfig+0x38c>)
 8002f80:	fba2 2303 	umull	r2, r3, r2, r3
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	f003 0207 	and.w	r2, r3, #7
 8002f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4432      	add	r2, r6
 8002f90:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f92:	e0b9      	b.n	8003108 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f96:	461c      	mov	r4, r3
 8002f98:	f04f 0500 	mov.w	r5, #0
 8002f9c:	4622      	mov	r2, r4
 8002f9e:	462b      	mov	r3, r5
 8002fa0:	1891      	adds	r1, r2, r2
 8002fa2:	6139      	str	r1, [r7, #16]
 8002fa4:	415b      	adcs	r3, r3
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002fac:	1912      	adds	r2, r2, r4
 8002fae:	eb45 0303 	adc.w	r3, r5, r3
 8002fb2:	f04f 0000 	mov.w	r0, #0
 8002fb6:	f04f 0100 	mov.w	r1, #0
 8002fba:	00d9      	lsls	r1, r3, #3
 8002fbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fc0:	00d0      	lsls	r0, r2, #3
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	eb12 0804 	adds.w	r8, r2, r4
 8002fca:	eb43 0905 	adc.w	r9, r3, r5
 8002fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f04f 0100 	mov.w	r1, #0
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	008b      	lsls	r3, r1, #2
 8002fe2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002fe6:	0082      	lsls	r2, r0, #2
 8002fe8:	4640      	mov	r0, r8
 8002fea:	4649      	mov	r1, r9
 8002fec:	f7fd f948 	bl	8000280 <__aeabi_uldivmod>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4b49      	ldr	r3, [pc, #292]	; (800311c <UART_SetConfig+0x38c>)
 8002ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	011e      	lsls	r6, r3, #4
 8002ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003000:	4618      	mov	r0, r3
 8003002:	f04f 0100 	mov.w	r1, #0
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	1894      	adds	r4, r2, r2
 800300c:	60bc      	str	r4, [r7, #8]
 800300e:	415b      	adcs	r3, r3
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003016:	1812      	adds	r2, r2, r0
 8003018:	eb41 0303 	adc.w	r3, r1, r3
 800301c:	f04f 0400 	mov.w	r4, #0
 8003020:	f04f 0500 	mov.w	r5, #0
 8003024:	00dd      	lsls	r5, r3, #3
 8003026:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800302a:	00d4      	lsls	r4, r2, #3
 800302c:	4622      	mov	r2, r4
 800302e:	462b      	mov	r3, r5
 8003030:	1814      	adds	r4, r2, r0
 8003032:	64bc      	str	r4, [r7, #72]	; 0x48
 8003034:	414b      	adcs	r3, r1
 8003036:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4618      	mov	r0, r3
 800303e:	f04f 0100 	mov.w	r1, #0
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	008b      	lsls	r3, r1, #2
 800304c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003050:	0082      	lsls	r2, r0, #2
 8003052:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003056:	f7fd f913 	bl	8000280 <__aeabi_uldivmod>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	4b2f      	ldr	r3, [pc, #188]	; (800311c <UART_SetConfig+0x38c>)
 8003060:	fba3 1302 	umull	r1, r3, r3, r2
 8003064:	095b      	lsrs	r3, r3, #5
 8003066:	2164      	movs	r1, #100	; 0x64
 8003068:	fb01 f303 	mul.w	r3, r1, r3
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	3332      	adds	r3, #50	; 0x32
 8003072:	4a2a      	ldr	r2, [pc, #168]	; (800311c <UART_SetConfig+0x38c>)
 8003074:	fba2 2303 	umull	r2, r3, r2, r3
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800307e:	441e      	add	r6, r3
 8003080:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003082:	4618      	mov	r0, r3
 8003084:	f04f 0100 	mov.w	r1, #0
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	1894      	adds	r4, r2, r2
 800308e:	603c      	str	r4, [r7, #0]
 8003090:	415b      	adcs	r3, r3
 8003092:	607b      	str	r3, [r7, #4]
 8003094:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003098:	1812      	adds	r2, r2, r0
 800309a:	eb41 0303 	adc.w	r3, r1, r3
 800309e:	f04f 0400 	mov.w	r4, #0
 80030a2:	f04f 0500 	mov.w	r5, #0
 80030a6:	00dd      	lsls	r5, r3, #3
 80030a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030ac:	00d4      	lsls	r4, r2, #3
 80030ae:	4622      	mov	r2, r4
 80030b0:	462b      	mov	r3, r5
 80030b2:	eb12 0a00 	adds.w	sl, r2, r0
 80030b6:	eb43 0b01 	adc.w	fp, r3, r1
 80030ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	4618      	mov	r0, r3
 80030c0:	f04f 0100 	mov.w	r1, #0
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	008b      	lsls	r3, r1, #2
 80030ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80030d2:	0082      	lsls	r2, r0, #2
 80030d4:	4650      	mov	r0, sl
 80030d6:	4659      	mov	r1, fp
 80030d8:	f7fd f8d2 	bl	8000280 <__aeabi_uldivmod>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4b0e      	ldr	r3, [pc, #56]	; (800311c <UART_SetConfig+0x38c>)
 80030e2:	fba3 1302 	umull	r1, r3, r3, r2
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	2164      	movs	r1, #100	; 0x64
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	3332      	adds	r3, #50	; 0x32
 80030f4:	4a09      	ldr	r2, [pc, #36]	; (800311c <UART_SetConfig+0x38c>)
 80030f6:	fba2 2303 	umull	r2, r3, r2, r3
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	f003 020f 	and.w	r2, r3, #15
 8003100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4432      	add	r2, r6
 8003106:	609a      	str	r2, [r3, #8]
}
 8003108:	bf00      	nop
 800310a:	377c      	adds	r7, #124	; 0x7c
 800310c:	46bd      	mov	sp, r7
 800310e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003112:	bf00      	nop
 8003114:	40011000 	.word	0x40011000
 8003118:	40011400 	.word	0x40011400
 800311c:	51eb851f 	.word	0x51eb851f

08003120 <__errno>:
 8003120:	4b01      	ldr	r3, [pc, #4]	; (8003128 <__errno+0x8>)
 8003122:	6818      	ldr	r0, [r3, #0]
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	20000064 	.word	0x20000064

0800312c <__libc_init_array>:
 800312c:	b570      	push	{r4, r5, r6, lr}
 800312e:	4d0d      	ldr	r5, [pc, #52]	; (8003164 <__libc_init_array+0x38>)
 8003130:	4c0d      	ldr	r4, [pc, #52]	; (8003168 <__libc_init_array+0x3c>)
 8003132:	1b64      	subs	r4, r4, r5
 8003134:	10a4      	asrs	r4, r4, #2
 8003136:	2600      	movs	r6, #0
 8003138:	42a6      	cmp	r6, r4
 800313a:	d109      	bne.n	8003150 <__libc_init_array+0x24>
 800313c:	4d0b      	ldr	r5, [pc, #44]	; (800316c <__libc_init_array+0x40>)
 800313e:	4c0c      	ldr	r4, [pc, #48]	; (8003170 <__libc_init_array+0x44>)
 8003140:	f000 fc4e 	bl	80039e0 <_init>
 8003144:	1b64      	subs	r4, r4, r5
 8003146:	10a4      	asrs	r4, r4, #2
 8003148:	2600      	movs	r6, #0
 800314a:	42a6      	cmp	r6, r4
 800314c:	d105      	bne.n	800315a <__libc_init_array+0x2e>
 800314e:	bd70      	pop	{r4, r5, r6, pc}
 8003150:	f855 3b04 	ldr.w	r3, [r5], #4
 8003154:	4798      	blx	r3
 8003156:	3601      	adds	r6, #1
 8003158:	e7ee      	b.n	8003138 <__libc_init_array+0xc>
 800315a:	f855 3b04 	ldr.w	r3, [r5], #4
 800315e:	4798      	blx	r3
 8003160:	3601      	adds	r6, #1
 8003162:	e7f2      	b.n	800314a <__libc_init_array+0x1e>
 8003164:	08003a54 	.word	0x08003a54
 8003168:	08003a54 	.word	0x08003a54
 800316c:	08003a54 	.word	0x08003a54
 8003170:	08003a58 	.word	0x08003a58

08003174 <memset>:
 8003174:	4402      	add	r2, r0
 8003176:	4603      	mov	r3, r0
 8003178:	4293      	cmp	r3, r2
 800317a:	d100      	bne.n	800317e <memset+0xa>
 800317c:	4770      	bx	lr
 800317e:	f803 1b01 	strb.w	r1, [r3], #1
 8003182:	e7f9      	b.n	8003178 <memset+0x4>

08003184 <siprintf>:
 8003184:	b40e      	push	{r1, r2, r3}
 8003186:	b500      	push	{lr}
 8003188:	b09c      	sub	sp, #112	; 0x70
 800318a:	ab1d      	add	r3, sp, #116	; 0x74
 800318c:	9002      	str	r0, [sp, #8]
 800318e:	9006      	str	r0, [sp, #24]
 8003190:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003194:	4809      	ldr	r0, [pc, #36]	; (80031bc <siprintf+0x38>)
 8003196:	9107      	str	r1, [sp, #28]
 8003198:	9104      	str	r1, [sp, #16]
 800319a:	4909      	ldr	r1, [pc, #36]	; (80031c0 <siprintf+0x3c>)
 800319c:	f853 2b04 	ldr.w	r2, [r3], #4
 80031a0:	9105      	str	r1, [sp, #20]
 80031a2:	6800      	ldr	r0, [r0, #0]
 80031a4:	9301      	str	r3, [sp, #4]
 80031a6:	a902      	add	r1, sp, #8
 80031a8:	f000 f868 	bl	800327c <_svfiprintf_r>
 80031ac:	9b02      	ldr	r3, [sp, #8]
 80031ae:	2200      	movs	r2, #0
 80031b0:	701a      	strb	r2, [r3, #0]
 80031b2:	b01c      	add	sp, #112	; 0x70
 80031b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80031b8:	b003      	add	sp, #12
 80031ba:	4770      	bx	lr
 80031bc:	20000064 	.word	0x20000064
 80031c0:	ffff0208 	.word	0xffff0208

080031c4 <__ssputs_r>:
 80031c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031c8:	688e      	ldr	r6, [r1, #8]
 80031ca:	429e      	cmp	r6, r3
 80031cc:	4682      	mov	sl, r0
 80031ce:	460c      	mov	r4, r1
 80031d0:	4690      	mov	r8, r2
 80031d2:	461f      	mov	r7, r3
 80031d4:	d838      	bhi.n	8003248 <__ssputs_r+0x84>
 80031d6:	898a      	ldrh	r2, [r1, #12]
 80031d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031dc:	d032      	beq.n	8003244 <__ssputs_r+0x80>
 80031de:	6825      	ldr	r5, [r4, #0]
 80031e0:	6909      	ldr	r1, [r1, #16]
 80031e2:	eba5 0901 	sub.w	r9, r5, r1
 80031e6:	6965      	ldr	r5, [r4, #20]
 80031e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031f0:	3301      	adds	r3, #1
 80031f2:	444b      	add	r3, r9
 80031f4:	106d      	asrs	r5, r5, #1
 80031f6:	429d      	cmp	r5, r3
 80031f8:	bf38      	it	cc
 80031fa:	461d      	movcc	r5, r3
 80031fc:	0553      	lsls	r3, r2, #21
 80031fe:	d531      	bpl.n	8003264 <__ssputs_r+0xa0>
 8003200:	4629      	mov	r1, r5
 8003202:	f000 fb47 	bl	8003894 <_malloc_r>
 8003206:	4606      	mov	r6, r0
 8003208:	b950      	cbnz	r0, 8003220 <__ssputs_r+0x5c>
 800320a:	230c      	movs	r3, #12
 800320c:	f8ca 3000 	str.w	r3, [sl]
 8003210:	89a3      	ldrh	r3, [r4, #12]
 8003212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003216:	81a3      	strh	r3, [r4, #12]
 8003218:	f04f 30ff 	mov.w	r0, #4294967295
 800321c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003220:	6921      	ldr	r1, [r4, #16]
 8003222:	464a      	mov	r2, r9
 8003224:	f000 fabe 	bl	80037a4 <memcpy>
 8003228:	89a3      	ldrh	r3, [r4, #12]
 800322a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800322e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003232:	81a3      	strh	r3, [r4, #12]
 8003234:	6126      	str	r6, [r4, #16]
 8003236:	6165      	str	r5, [r4, #20]
 8003238:	444e      	add	r6, r9
 800323a:	eba5 0509 	sub.w	r5, r5, r9
 800323e:	6026      	str	r6, [r4, #0]
 8003240:	60a5      	str	r5, [r4, #8]
 8003242:	463e      	mov	r6, r7
 8003244:	42be      	cmp	r6, r7
 8003246:	d900      	bls.n	800324a <__ssputs_r+0x86>
 8003248:	463e      	mov	r6, r7
 800324a:	4632      	mov	r2, r6
 800324c:	6820      	ldr	r0, [r4, #0]
 800324e:	4641      	mov	r1, r8
 8003250:	f000 fab6 	bl	80037c0 <memmove>
 8003254:	68a3      	ldr	r3, [r4, #8]
 8003256:	6822      	ldr	r2, [r4, #0]
 8003258:	1b9b      	subs	r3, r3, r6
 800325a:	4432      	add	r2, r6
 800325c:	60a3      	str	r3, [r4, #8]
 800325e:	6022      	str	r2, [r4, #0]
 8003260:	2000      	movs	r0, #0
 8003262:	e7db      	b.n	800321c <__ssputs_r+0x58>
 8003264:	462a      	mov	r2, r5
 8003266:	f000 fb6f 	bl	8003948 <_realloc_r>
 800326a:	4606      	mov	r6, r0
 800326c:	2800      	cmp	r0, #0
 800326e:	d1e1      	bne.n	8003234 <__ssputs_r+0x70>
 8003270:	6921      	ldr	r1, [r4, #16]
 8003272:	4650      	mov	r0, sl
 8003274:	f000 fabe 	bl	80037f4 <_free_r>
 8003278:	e7c7      	b.n	800320a <__ssputs_r+0x46>
	...

0800327c <_svfiprintf_r>:
 800327c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003280:	4698      	mov	r8, r3
 8003282:	898b      	ldrh	r3, [r1, #12]
 8003284:	061b      	lsls	r3, r3, #24
 8003286:	b09d      	sub	sp, #116	; 0x74
 8003288:	4607      	mov	r7, r0
 800328a:	460d      	mov	r5, r1
 800328c:	4614      	mov	r4, r2
 800328e:	d50e      	bpl.n	80032ae <_svfiprintf_r+0x32>
 8003290:	690b      	ldr	r3, [r1, #16]
 8003292:	b963      	cbnz	r3, 80032ae <_svfiprintf_r+0x32>
 8003294:	2140      	movs	r1, #64	; 0x40
 8003296:	f000 fafd 	bl	8003894 <_malloc_r>
 800329a:	6028      	str	r0, [r5, #0]
 800329c:	6128      	str	r0, [r5, #16]
 800329e:	b920      	cbnz	r0, 80032aa <_svfiprintf_r+0x2e>
 80032a0:	230c      	movs	r3, #12
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	f04f 30ff 	mov.w	r0, #4294967295
 80032a8:	e0d1      	b.n	800344e <_svfiprintf_r+0x1d2>
 80032aa:	2340      	movs	r3, #64	; 0x40
 80032ac:	616b      	str	r3, [r5, #20]
 80032ae:	2300      	movs	r3, #0
 80032b0:	9309      	str	r3, [sp, #36]	; 0x24
 80032b2:	2320      	movs	r3, #32
 80032b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80032bc:	2330      	movs	r3, #48	; 0x30
 80032be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003468 <_svfiprintf_r+0x1ec>
 80032c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032c6:	f04f 0901 	mov.w	r9, #1
 80032ca:	4623      	mov	r3, r4
 80032cc:	469a      	mov	sl, r3
 80032ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032d2:	b10a      	cbz	r2, 80032d8 <_svfiprintf_r+0x5c>
 80032d4:	2a25      	cmp	r2, #37	; 0x25
 80032d6:	d1f9      	bne.n	80032cc <_svfiprintf_r+0x50>
 80032d8:	ebba 0b04 	subs.w	fp, sl, r4
 80032dc:	d00b      	beq.n	80032f6 <_svfiprintf_r+0x7a>
 80032de:	465b      	mov	r3, fp
 80032e0:	4622      	mov	r2, r4
 80032e2:	4629      	mov	r1, r5
 80032e4:	4638      	mov	r0, r7
 80032e6:	f7ff ff6d 	bl	80031c4 <__ssputs_r>
 80032ea:	3001      	adds	r0, #1
 80032ec:	f000 80aa 	beq.w	8003444 <_svfiprintf_r+0x1c8>
 80032f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032f2:	445a      	add	r2, fp
 80032f4:	9209      	str	r2, [sp, #36]	; 0x24
 80032f6:	f89a 3000 	ldrb.w	r3, [sl]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 80a2 	beq.w	8003444 <_svfiprintf_r+0x1c8>
 8003300:	2300      	movs	r3, #0
 8003302:	f04f 32ff 	mov.w	r2, #4294967295
 8003306:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800330a:	f10a 0a01 	add.w	sl, sl, #1
 800330e:	9304      	str	r3, [sp, #16]
 8003310:	9307      	str	r3, [sp, #28]
 8003312:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003316:	931a      	str	r3, [sp, #104]	; 0x68
 8003318:	4654      	mov	r4, sl
 800331a:	2205      	movs	r2, #5
 800331c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003320:	4851      	ldr	r0, [pc, #324]	; (8003468 <_svfiprintf_r+0x1ec>)
 8003322:	f7fc ff5d 	bl	80001e0 <memchr>
 8003326:	9a04      	ldr	r2, [sp, #16]
 8003328:	b9d8      	cbnz	r0, 8003362 <_svfiprintf_r+0xe6>
 800332a:	06d0      	lsls	r0, r2, #27
 800332c:	bf44      	itt	mi
 800332e:	2320      	movmi	r3, #32
 8003330:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003334:	0711      	lsls	r1, r2, #28
 8003336:	bf44      	itt	mi
 8003338:	232b      	movmi	r3, #43	; 0x2b
 800333a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800333e:	f89a 3000 	ldrb.w	r3, [sl]
 8003342:	2b2a      	cmp	r3, #42	; 0x2a
 8003344:	d015      	beq.n	8003372 <_svfiprintf_r+0xf6>
 8003346:	9a07      	ldr	r2, [sp, #28]
 8003348:	4654      	mov	r4, sl
 800334a:	2000      	movs	r0, #0
 800334c:	f04f 0c0a 	mov.w	ip, #10
 8003350:	4621      	mov	r1, r4
 8003352:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003356:	3b30      	subs	r3, #48	; 0x30
 8003358:	2b09      	cmp	r3, #9
 800335a:	d94e      	bls.n	80033fa <_svfiprintf_r+0x17e>
 800335c:	b1b0      	cbz	r0, 800338c <_svfiprintf_r+0x110>
 800335e:	9207      	str	r2, [sp, #28]
 8003360:	e014      	b.n	800338c <_svfiprintf_r+0x110>
 8003362:	eba0 0308 	sub.w	r3, r0, r8
 8003366:	fa09 f303 	lsl.w	r3, r9, r3
 800336a:	4313      	orrs	r3, r2
 800336c:	9304      	str	r3, [sp, #16]
 800336e:	46a2      	mov	sl, r4
 8003370:	e7d2      	b.n	8003318 <_svfiprintf_r+0x9c>
 8003372:	9b03      	ldr	r3, [sp, #12]
 8003374:	1d19      	adds	r1, r3, #4
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	9103      	str	r1, [sp, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	bfbb      	ittet	lt
 800337e:	425b      	neglt	r3, r3
 8003380:	f042 0202 	orrlt.w	r2, r2, #2
 8003384:	9307      	strge	r3, [sp, #28]
 8003386:	9307      	strlt	r3, [sp, #28]
 8003388:	bfb8      	it	lt
 800338a:	9204      	strlt	r2, [sp, #16]
 800338c:	7823      	ldrb	r3, [r4, #0]
 800338e:	2b2e      	cmp	r3, #46	; 0x2e
 8003390:	d10c      	bne.n	80033ac <_svfiprintf_r+0x130>
 8003392:	7863      	ldrb	r3, [r4, #1]
 8003394:	2b2a      	cmp	r3, #42	; 0x2a
 8003396:	d135      	bne.n	8003404 <_svfiprintf_r+0x188>
 8003398:	9b03      	ldr	r3, [sp, #12]
 800339a:	1d1a      	adds	r2, r3, #4
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	9203      	str	r2, [sp, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bfb8      	it	lt
 80033a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80033a8:	3402      	adds	r4, #2
 80033aa:	9305      	str	r3, [sp, #20]
 80033ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003478 <_svfiprintf_r+0x1fc>
 80033b0:	7821      	ldrb	r1, [r4, #0]
 80033b2:	2203      	movs	r2, #3
 80033b4:	4650      	mov	r0, sl
 80033b6:	f7fc ff13 	bl	80001e0 <memchr>
 80033ba:	b140      	cbz	r0, 80033ce <_svfiprintf_r+0x152>
 80033bc:	2340      	movs	r3, #64	; 0x40
 80033be:	eba0 000a 	sub.w	r0, r0, sl
 80033c2:	fa03 f000 	lsl.w	r0, r3, r0
 80033c6:	9b04      	ldr	r3, [sp, #16]
 80033c8:	4303      	orrs	r3, r0
 80033ca:	3401      	adds	r4, #1
 80033cc:	9304      	str	r3, [sp, #16]
 80033ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033d2:	4826      	ldr	r0, [pc, #152]	; (800346c <_svfiprintf_r+0x1f0>)
 80033d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033d8:	2206      	movs	r2, #6
 80033da:	f7fc ff01 	bl	80001e0 <memchr>
 80033de:	2800      	cmp	r0, #0
 80033e0:	d038      	beq.n	8003454 <_svfiprintf_r+0x1d8>
 80033e2:	4b23      	ldr	r3, [pc, #140]	; (8003470 <_svfiprintf_r+0x1f4>)
 80033e4:	bb1b      	cbnz	r3, 800342e <_svfiprintf_r+0x1b2>
 80033e6:	9b03      	ldr	r3, [sp, #12]
 80033e8:	3307      	adds	r3, #7
 80033ea:	f023 0307 	bic.w	r3, r3, #7
 80033ee:	3308      	adds	r3, #8
 80033f0:	9303      	str	r3, [sp, #12]
 80033f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033f4:	4433      	add	r3, r6
 80033f6:	9309      	str	r3, [sp, #36]	; 0x24
 80033f8:	e767      	b.n	80032ca <_svfiprintf_r+0x4e>
 80033fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80033fe:	460c      	mov	r4, r1
 8003400:	2001      	movs	r0, #1
 8003402:	e7a5      	b.n	8003350 <_svfiprintf_r+0xd4>
 8003404:	2300      	movs	r3, #0
 8003406:	3401      	adds	r4, #1
 8003408:	9305      	str	r3, [sp, #20]
 800340a:	4619      	mov	r1, r3
 800340c:	f04f 0c0a 	mov.w	ip, #10
 8003410:	4620      	mov	r0, r4
 8003412:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003416:	3a30      	subs	r2, #48	; 0x30
 8003418:	2a09      	cmp	r2, #9
 800341a:	d903      	bls.n	8003424 <_svfiprintf_r+0x1a8>
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0c5      	beq.n	80033ac <_svfiprintf_r+0x130>
 8003420:	9105      	str	r1, [sp, #20]
 8003422:	e7c3      	b.n	80033ac <_svfiprintf_r+0x130>
 8003424:	fb0c 2101 	mla	r1, ip, r1, r2
 8003428:	4604      	mov	r4, r0
 800342a:	2301      	movs	r3, #1
 800342c:	e7f0      	b.n	8003410 <_svfiprintf_r+0x194>
 800342e:	ab03      	add	r3, sp, #12
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	462a      	mov	r2, r5
 8003434:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <_svfiprintf_r+0x1f8>)
 8003436:	a904      	add	r1, sp, #16
 8003438:	4638      	mov	r0, r7
 800343a:	f3af 8000 	nop.w
 800343e:	1c42      	adds	r2, r0, #1
 8003440:	4606      	mov	r6, r0
 8003442:	d1d6      	bne.n	80033f2 <_svfiprintf_r+0x176>
 8003444:	89ab      	ldrh	r3, [r5, #12]
 8003446:	065b      	lsls	r3, r3, #25
 8003448:	f53f af2c 	bmi.w	80032a4 <_svfiprintf_r+0x28>
 800344c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800344e:	b01d      	add	sp, #116	; 0x74
 8003450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003454:	ab03      	add	r3, sp, #12
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	462a      	mov	r2, r5
 800345a:	4b06      	ldr	r3, [pc, #24]	; (8003474 <_svfiprintf_r+0x1f8>)
 800345c:	a904      	add	r1, sp, #16
 800345e:	4638      	mov	r0, r7
 8003460:	f000 f87a 	bl	8003558 <_printf_i>
 8003464:	e7eb      	b.n	800343e <_svfiprintf_r+0x1c2>
 8003466:	bf00      	nop
 8003468:	08003a18 	.word	0x08003a18
 800346c:	08003a22 	.word	0x08003a22
 8003470:	00000000 	.word	0x00000000
 8003474:	080031c5 	.word	0x080031c5
 8003478:	08003a1e 	.word	0x08003a1e

0800347c <_printf_common>:
 800347c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003480:	4616      	mov	r6, r2
 8003482:	4699      	mov	r9, r3
 8003484:	688a      	ldr	r2, [r1, #8]
 8003486:	690b      	ldr	r3, [r1, #16]
 8003488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800348c:	4293      	cmp	r3, r2
 800348e:	bfb8      	it	lt
 8003490:	4613      	movlt	r3, r2
 8003492:	6033      	str	r3, [r6, #0]
 8003494:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003498:	4607      	mov	r7, r0
 800349a:	460c      	mov	r4, r1
 800349c:	b10a      	cbz	r2, 80034a2 <_printf_common+0x26>
 800349e:	3301      	adds	r3, #1
 80034a0:	6033      	str	r3, [r6, #0]
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	0699      	lsls	r1, r3, #26
 80034a6:	bf42      	ittt	mi
 80034a8:	6833      	ldrmi	r3, [r6, #0]
 80034aa:	3302      	addmi	r3, #2
 80034ac:	6033      	strmi	r3, [r6, #0]
 80034ae:	6825      	ldr	r5, [r4, #0]
 80034b0:	f015 0506 	ands.w	r5, r5, #6
 80034b4:	d106      	bne.n	80034c4 <_printf_common+0x48>
 80034b6:	f104 0a19 	add.w	sl, r4, #25
 80034ba:	68e3      	ldr	r3, [r4, #12]
 80034bc:	6832      	ldr	r2, [r6, #0]
 80034be:	1a9b      	subs	r3, r3, r2
 80034c0:	42ab      	cmp	r3, r5
 80034c2:	dc26      	bgt.n	8003512 <_printf_common+0x96>
 80034c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034c8:	1e13      	subs	r3, r2, #0
 80034ca:	6822      	ldr	r2, [r4, #0]
 80034cc:	bf18      	it	ne
 80034ce:	2301      	movne	r3, #1
 80034d0:	0692      	lsls	r2, r2, #26
 80034d2:	d42b      	bmi.n	800352c <_printf_common+0xb0>
 80034d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034d8:	4649      	mov	r1, r9
 80034da:	4638      	mov	r0, r7
 80034dc:	47c0      	blx	r8
 80034de:	3001      	adds	r0, #1
 80034e0:	d01e      	beq.n	8003520 <_printf_common+0xa4>
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	68e5      	ldr	r5, [r4, #12]
 80034e6:	6832      	ldr	r2, [r6, #0]
 80034e8:	f003 0306 	and.w	r3, r3, #6
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	bf08      	it	eq
 80034f0:	1aad      	subeq	r5, r5, r2
 80034f2:	68a3      	ldr	r3, [r4, #8]
 80034f4:	6922      	ldr	r2, [r4, #16]
 80034f6:	bf0c      	ite	eq
 80034f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034fc:	2500      	movne	r5, #0
 80034fe:	4293      	cmp	r3, r2
 8003500:	bfc4      	itt	gt
 8003502:	1a9b      	subgt	r3, r3, r2
 8003504:	18ed      	addgt	r5, r5, r3
 8003506:	2600      	movs	r6, #0
 8003508:	341a      	adds	r4, #26
 800350a:	42b5      	cmp	r5, r6
 800350c:	d11a      	bne.n	8003544 <_printf_common+0xc8>
 800350e:	2000      	movs	r0, #0
 8003510:	e008      	b.n	8003524 <_printf_common+0xa8>
 8003512:	2301      	movs	r3, #1
 8003514:	4652      	mov	r2, sl
 8003516:	4649      	mov	r1, r9
 8003518:	4638      	mov	r0, r7
 800351a:	47c0      	blx	r8
 800351c:	3001      	adds	r0, #1
 800351e:	d103      	bne.n	8003528 <_printf_common+0xac>
 8003520:	f04f 30ff 	mov.w	r0, #4294967295
 8003524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003528:	3501      	adds	r5, #1
 800352a:	e7c6      	b.n	80034ba <_printf_common+0x3e>
 800352c:	18e1      	adds	r1, r4, r3
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	2030      	movs	r0, #48	; 0x30
 8003532:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003536:	4422      	add	r2, r4
 8003538:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800353c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003540:	3302      	adds	r3, #2
 8003542:	e7c7      	b.n	80034d4 <_printf_common+0x58>
 8003544:	2301      	movs	r3, #1
 8003546:	4622      	mov	r2, r4
 8003548:	4649      	mov	r1, r9
 800354a:	4638      	mov	r0, r7
 800354c:	47c0      	blx	r8
 800354e:	3001      	adds	r0, #1
 8003550:	d0e6      	beq.n	8003520 <_printf_common+0xa4>
 8003552:	3601      	adds	r6, #1
 8003554:	e7d9      	b.n	800350a <_printf_common+0x8e>
	...

08003558 <_printf_i>:
 8003558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800355c:	460c      	mov	r4, r1
 800355e:	4691      	mov	r9, r2
 8003560:	7e27      	ldrb	r7, [r4, #24]
 8003562:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003564:	2f78      	cmp	r7, #120	; 0x78
 8003566:	4680      	mov	r8, r0
 8003568:	469a      	mov	sl, r3
 800356a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800356e:	d807      	bhi.n	8003580 <_printf_i+0x28>
 8003570:	2f62      	cmp	r7, #98	; 0x62
 8003572:	d80a      	bhi.n	800358a <_printf_i+0x32>
 8003574:	2f00      	cmp	r7, #0
 8003576:	f000 80d8 	beq.w	800372a <_printf_i+0x1d2>
 800357a:	2f58      	cmp	r7, #88	; 0x58
 800357c:	f000 80a3 	beq.w	80036c6 <_printf_i+0x16e>
 8003580:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003584:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003588:	e03a      	b.n	8003600 <_printf_i+0xa8>
 800358a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800358e:	2b15      	cmp	r3, #21
 8003590:	d8f6      	bhi.n	8003580 <_printf_i+0x28>
 8003592:	a001      	add	r0, pc, #4	; (adr r0, 8003598 <_printf_i+0x40>)
 8003594:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003598:	080035f1 	.word	0x080035f1
 800359c:	08003605 	.word	0x08003605
 80035a0:	08003581 	.word	0x08003581
 80035a4:	08003581 	.word	0x08003581
 80035a8:	08003581 	.word	0x08003581
 80035ac:	08003581 	.word	0x08003581
 80035b0:	08003605 	.word	0x08003605
 80035b4:	08003581 	.word	0x08003581
 80035b8:	08003581 	.word	0x08003581
 80035bc:	08003581 	.word	0x08003581
 80035c0:	08003581 	.word	0x08003581
 80035c4:	08003711 	.word	0x08003711
 80035c8:	08003635 	.word	0x08003635
 80035cc:	080036f3 	.word	0x080036f3
 80035d0:	08003581 	.word	0x08003581
 80035d4:	08003581 	.word	0x08003581
 80035d8:	08003733 	.word	0x08003733
 80035dc:	08003581 	.word	0x08003581
 80035e0:	08003635 	.word	0x08003635
 80035e4:	08003581 	.word	0x08003581
 80035e8:	08003581 	.word	0x08003581
 80035ec:	080036fb 	.word	0x080036fb
 80035f0:	680b      	ldr	r3, [r1, #0]
 80035f2:	1d1a      	adds	r2, r3, #4
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	600a      	str	r2, [r1, #0]
 80035f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80035fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003600:	2301      	movs	r3, #1
 8003602:	e0a3      	b.n	800374c <_printf_i+0x1f4>
 8003604:	6825      	ldr	r5, [r4, #0]
 8003606:	6808      	ldr	r0, [r1, #0]
 8003608:	062e      	lsls	r6, r5, #24
 800360a:	f100 0304 	add.w	r3, r0, #4
 800360e:	d50a      	bpl.n	8003626 <_printf_i+0xce>
 8003610:	6805      	ldr	r5, [r0, #0]
 8003612:	600b      	str	r3, [r1, #0]
 8003614:	2d00      	cmp	r5, #0
 8003616:	da03      	bge.n	8003620 <_printf_i+0xc8>
 8003618:	232d      	movs	r3, #45	; 0x2d
 800361a:	426d      	negs	r5, r5
 800361c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003620:	485e      	ldr	r0, [pc, #376]	; (800379c <_printf_i+0x244>)
 8003622:	230a      	movs	r3, #10
 8003624:	e019      	b.n	800365a <_printf_i+0x102>
 8003626:	f015 0f40 	tst.w	r5, #64	; 0x40
 800362a:	6805      	ldr	r5, [r0, #0]
 800362c:	600b      	str	r3, [r1, #0]
 800362e:	bf18      	it	ne
 8003630:	b22d      	sxthne	r5, r5
 8003632:	e7ef      	b.n	8003614 <_printf_i+0xbc>
 8003634:	680b      	ldr	r3, [r1, #0]
 8003636:	6825      	ldr	r5, [r4, #0]
 8003638:	1d18      	adds	r0, r3, #4
 800363a:	6008      	str	r0, [r1, #0]
 800363c:	0628      	lsls	r0, r5, #24
 800363e:	d501      	bpl.n	8003644 <_printf_i+0xec>
 8003640:	681d      	ldr	r5, [r3, #0]
 8003642:	e002      	b.n	800364a <_printf_i+0xf2>
 8003644:	0669      	lsls	r1, r5, #25
 8003646:	d5fb      	bpl.n	8003640 <_printf_i+0xe8>
 8003648:	881d      	ldrh	r5, [r3, #0]
 800364a:	4854      	ldr	r0, [pc, #336]	; (800379c <_printf_i+0x244>)
 800364c:	2f6f      	cmp	r7, #111	; 0x6f
 800364e:	bf0c      	ite	eq
 8003650:	2308      	moveq	r3, #8
 8003652:	230a      	movne	r3, #10
 8003654:	2100      	movs	r1, #0
 8003656:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800365a:	6866      	ldr	r6, [r4, #4]
 800365c:	60a6      	str	r6, [r4, #8]
 800365e:	2e00      	cmp	r6, #0
 8003660:	bfa2      	ittt	ge
 8003662:	6821      	ldrge	r1, [r4, #0]
 8003664:	f021 0104 	bicge.w	r1, r1, #4
 8003668:	6021      	strge	r1, [r4, #0]
 800366a:	b90d      	cbnz	r5, 8003670 <_printf_i+0x118>
 800366c:	2e00      	cmp	r6, #0
 800366e:	d04d      	beq.n	800370c <_printf_i+0x1b4>
 8003670:	4616      	mov	r6, r2
 8003672:	fbb5 f1f3 	udiv	r1, r5, r3
 8003676:	fb03 5711 	mls	r7, r3, r1, r5
 800367a:	5dc7      	ldrb	r7, [r0, r7]
 800367c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003680:	462f      	mov	r7, r5
 8003682:	42bb      	cmp	r3, r7
 8003684:	460d      	mov	r5, r1
 8003686:	d9f4      	bls.n	8003672 <_printf_i+0x11a>
 8003688:	2b08      	cmp	r3, #8
 800368a:	d10b      	bne.n	80036a4 <_printf_i+0x14c>
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	07df      	lsls	r7, r3, #31
 8003690:	d508      	bpl.n	80036a4 <_printf_i+0x14c>
 8003692:	6923      	ldr	r3, [r4, #16]
 8003694:	6861      	ldr	r1, [r4, #4]
 8003696:	4299      	cmp	r1, r3
 8003698:	bfde      	ittt	le
 800369a:	2330      	movle	r3, #48	; 0x30
 800369c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80036a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80036a4:	1b92      	subs	r2, r2, r6
 80036a6:	6122      	str	r2, [r4, #16]
 80036a8:	f8cd a000 	str.w	sl, [sp]
 80036ac:	464b      	mov	r3, r9
 80036ae:	aa03      	add	r2, sp, #12
 80036b0:	4621      	mov	r1, r4
 80036b2:	4640      	mov	r0, r8
 80036b4:	f7ff fee2 	bl	800347c <_printf_common>
 80036b8:	3001      	adds	r0, #1
 80036ba:	d14c      	bne.n	8003756 <_printf_i+0x1fe>
 80036bc:	f04f 30ff 	mov.w	r0, #4294967295
 80036c0:	b004      	add	sp, #16
 80036c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036c6:	4835      	ldr	r0, [pc, #212]	; (800379c <_printf_i+0x244>)
 80036c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	680e      	ldr	r6, [r1, #0]
 80036d0:	061f      	lsls	r7, r3, #24
 80036d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80036d6:	600e      	str	r6, [r1, #0]
 80036d8:	d514      	bpl.n	8003704 <_printf_i+0x1ac>
 80036da:	07d9      	lsls	r1, r3, #31
 80036dc:	bf44      	itt	mi
 80036de:	f043 0320 	orrmi.w	r3, r3, #32
 80036e2:	6023      	strmi	r3, [r4, #0]
 80036e4:	b91d      	cbnz	r5, 80036ee <_printf_i+0x196>
 80036e6:	6823      	ldr	r3, [r4, #0]
 80036e8:	f023 0320 	bic.w	r3, r3, #32
 80036ec:	6023      	str	r3, [r4, #0]
 80036ee:	2310      	movs	r3, #16
 80036f0:	e7b0      	b.n	8003654 <_printf_i+0xfc>
 80036f2:	6823      	ldr	r3, [r4, #0]
 80036f4:	f043 0320 	orr.w	r3, r3, #32
 80036f8:	6023      	str	r3, [r4, #0]
 80036fa:	2378      	movs	r3, #120	; 0x78
 80036fc:	4828      	ldr	r0, [pc, #160]	; (80037a0 <_printf_i+0x248>)
 80036fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003702:	e7e3      	b.n	80036cc <_printf_i+0x174>
 8003704:	065e      	lsls	r6, r3, #25
 8003706:	bf48      	it	mi
 8003708:	b2ad      	uxthmi	r5, r5
 800370a:	e7e6      	b.n	80036da <_printf_i+0x182>
 800370c:	4616      	mov	r6, r2
 800370e:	e7bb      	b.n	8003688 <_printf_i+0x130>
 8003710:	680b      	ldr	r3, [r1, #0]
 8003712:	6826      	ldr	r6, [r4, #0]
 8003714:	6960      	ldr	r0, [r4, #20]
 8003716:	1d1d      	adds	r5, r3, #4
 8003718:	600d      	str	r5, [r1, #0]
 800371a:	0635      	lsls	r5, r6, #24
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	d501      	bpl.n	8003724 <_printf_i+0x1cc>
 8003720:	6018      	str	r0, [r3, #0]
 8003722:	e002      	b.n	800372a <_printf_i+0x1d2>
 8003724:	0671      	lsls	r1, r6, #25
 8003726:	d5fb      	bpl.n	8003720 <_printf_i+0x1c8>
 8003728:	8018      	strh	r0, [r3, #0]
 800372a:	2300      	movs	r3, #0
 800372c:	6123      	str	r3, [r4, #16]
 800372e:	4616      	mov	r6, r2
 8003730:	e7ba      	b.n	80036a8 <_printf_i+0x150>
 8003732:	680b      	ldr	r3, [r1, #0]
 8003734:	1d1a      	adds	r2, r3, #4
 8003736:	600a      	str	r2, [r1, #0]
 8003738:	681e      	ldr	r6, [r3, #0]
 800373a:	6862      	ldr	r2, [r4, #4]
 800373c:	2100      	movs	r1, #0
 800373e:	4630      	mov	r0, r6
 8003740:	f7fc fd4e 	bl	80001e0 <memchr>
 8003744:	b108      	cbz	r0, 800374a <_printf_i+0x1f2>
 8003746:	1b80      	subs	r0, r0, r6
 8003748:	6060      	str	r0, [r4, #4]
 800374a:	6863      	ldr	r3, [r4, #4]
 800374c:	6123      	str	r3, [r4, #16]
 800374e:	2300      	movs	r3, #0
 8003750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003754:	e7a8      	b.n	80036a8 <_printf_i+0x150>
 8003756:	6923      	ldr	r3, [r4, #16]
 8003758:	4632      	mov	r2, r6
 800375a:	4649      	mov	r1, r9
 800375c:	4640      	mov	r0, r8
 800375e:	47d0      	blx	sl
 8003760:	3001      	adds	r0, #1
 8003762:	d0ab      	beq.n	80036bc <_printf_i+0x164>
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	079b      	lsls	r3, r3, #30
 8003768:	d413      	bmi.n	8003792 <_printf_i+0x23a>
 800376a:	68e0      	ldr	r0, [r4, #12]
 800376c:	9b03      	ldr	r3, [sp, #12]
 800376e:	4298      	cmp	r0, r3
 8003770:	bfb8      	it	lt
 8003772:	4618      	movlt	r0, r3
 8003774:	e7a4      	b.n	80036c0 <_printf_i+0x168>
 8003776:	2301      	movs	r3, #1
 8003778:	4632      	mov	r2, r6
 800377a:	4649      	mov	r1, r9
 800377c:	4640      	mov	r0, r8
 800377e:	47d0      	blx	sl
 8003780:	3001      	adds	r0, #1
 8003782:	d09b      	beq.n	80036bc <_printf_i+0x164>
 8003784:	3501      	adds	r5, #1
 8003786:	68e3      	ldr	r3, [r4, #12]
 8003788:	9903      	ldr	r1, [sp, #12]
 800378a:	1a5b      	subs	r3, r3, r1
 800378c:	42ab      	cmp	r3, r5
 800378e:	dcf2      	bgt.n	8003776 <_printf_i+0x21e>
 8003790:	e7eb      	b.n	800376a <_printf_i+0x212>
 8003792:	2500      	movs	r5, #0
 8003794:	f104 0619 	add.w	r6, r4, #25
 8003798:	e7f5      	b.n	8003786 <_printf_i+0x22e>
 800379a:	bf00      	nop
 800379c:	08003a29 	.word	0x08003a29
 80037a0:	08003a3a 	.word	0x08003a3a

080037a4 <memcpy>:
 80037a4:	440a      	add	r2, r1
 80037a6:	4291      	cmp	r1, r2
 80037a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80037ac:	d100      	bne.n	80037b0 <memcpy+0xc>
 80037ae:	4770      	bx	lr
 80037b0:	b510      	push	{r4, lr}
 80037b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037ba:	4291      	cmp	r1, r2
 80037bc:	d1f9      	bne.n	80037b2 <memcpy+0xe>
 80037be:	bd10      	pop	{r4, pc}

080037c0 <memmove>:
 80037c0:	4288      	cmp	r0, r1
 80037c2:	b510      	push	{r4, lr}
 80037c4:	eb01 0402 	add.w	r4, r1, r2
 80037c8:	d902      	bls.n	80037d0 <memmove+0x10>
 80037ca:	4284      	cmp	r4, r0
 80037cc:	4623      	mov	r3, r4
 80037ce:	d807      	bhi.n	80037e0 <memmove+0x20>
 80037d0:	1e43      	subs	r3, r0, #1
 80037d2:	42a1      	cmp	r1, r4
 80037d4:	d008      	beq.n	80037e8 <memmove+0x28>
 80037d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037de:	e7f8      	b.n	80037d2 <memmove+0x12>
 80037e0:	4402      	add	r2, r0
 80037e2:	4601      	mov	r1, r0
 80037e4:	428a      	cmp	r2, r1
 80037e6:	d100      	bne.n	80037ea <memmove+0x2a>
 80037e8:	bd10      	pop	{r4, pc}
 80037ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037f2:	e7f7      	b.n	80037e4 <memmove+0x24>

080037f4 <_free_r>:
 80037f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037f6:	2900      	cmp	r1, #0
 80037f8:	d048      	beq.n	800388c <_free_r+0x98>
 80037fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037fe:	9001      	str	r0, [sp, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	f1a1 0404 	sub.w	r4, r1, #4
 8003806:	bfb8      	it	lt
 8003808:	18e4      	addlt	r4, r4, r3
 800380a:	f000 f8d3 	bl	80039b4 <__malloc_lock>
 800380e:	4a20      	ldr	r2, [pc, #128]	; (8003890 <_free_r+0x9c>)
 8003810:	9801      	ldr	r0, [sp, #4]
 8003812:	6813      	ldr	r3, [r2, #0]
 8003814:	4615      	mov	r5, r2
 8003816:	b933      	cbnz	r3, 8003826 <_free_r+0x32>
 8003818:	6063      	str	r3, [r4, #4]
 800381a:	6014      	str	r4, [r2, #0]
 800381c:	b003      	add	sp, #12
 800381e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003822:	f000 b8cd 	b.w	80039c0 <__malloc_unlock>
 8003826:	42a3      	cmp	r3, r4
 8003828:	d90b      	bls.n	8003842 <_free_r+0x4e>
 800382a:	6821      	ldr	r1, [r4, #0]
 800382c:	1862      	adds	r2, r4, r1
 800382e:	4293      	cmp	r3, r2
 8003830:	bf04      	itt	eq
 8003832:	681a      	ldreq	r2, [r3, #0]
 8003834:	685b      	ldreq	r3, [r3, #4]
 8003836:	6063      	str	r3, [r4, #4]
 8003838:	bf04      	itt	eq
 800383a:	1852      	addeq	r2, r2, r1
 800383c:	6022      	streq	r2, [r4, #0]
 800383e:	602c      	str	r4, [r5, #0]
 8003840:	e7ec      	b.n	800381c <_free_r+0x28>
 8003842:	461a      	mov	r2, r3
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	b10b      	cbz	r3, 800384c <_free_r+0x58>
 8003848:	42a3      	cmp	r3, r4
 800384a:	d9fa      	bls.n	8003842 <_free_r+0x4e>
 800384c:	6811      	ldr	r1, [r2, #0]
 800384e:	1855      	adds	r5, r2, r1
 8003850:	42a5      	cmp	r5, r4
 8003852:	d10b      	bne.n	800386c <_free_r+0x78>
 8003854:	6824      	ldr	r4, [r4, #0]
 8003856:	4421      	add	r1, r4
 8003858:	1854      	adds	r4, r2, r1
 800385a:	42a3      	cmp	r3, r4
 800385c:	6011      	str	r1, [r2, #0]
 800385e:	d1dd      	bne.n	800381c <_free_r+0x28>
 8003860:	681c      	ldr	r4, [r3, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	6053      	str	r3, [r2, #4]
 8003866:	4421      	add	r1, r4
 8003868:	6011      	str	r1, [r2, #0]
 800386a:	e7d7      	b.n	800381c <_free_r+0x28>
 800386c:	d902      	bls.n	8003874 <_free_r+0x80>
 800386e:	230c      	movs	r3, #12
 8003870:	6003      	str	r3, [r0, #0]
 8003872:	e7d3      	b.n	800381c <_free_r+0x28>
 8003874:	6825      	ldr	r5, [r4, #0]
 8003876:	1961      	adds	r1, r4, r5
 8003878:	428b      	cmp	r3, r1
 800387a:	bf04      	itt	eq
 800387c:	6819      	ldreq	r1, [r3, #0]
 800387e:	685b      	ldreq	r3, [r3, #4]
 8003880:	6063      	str	r3, [r4, #4]
 8003882:	bf04      	itt	eq
 8003884:	1949      	addeq	r1, r1, r5
 8003886:	6021      	streq	r1, [r4, #0]
 8003888:	6054      	str	r4, [r2, #4]
 800388a:	e7c7      	b.n	800381c <_free_r+0x28>
 800388c:	b003      	add	sp, #12
 800388e:	bd30      	pop	{r4, r5, pc}
 8003890:	20000120 	.word	0x20000120

08003894 <_malloc_r>:
 8003894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003896:	1ccd      	adds	r5, r1, #3
 8003898:	f025 0503 	bic.w	r5, r5, #3
 800389c:	3508      	adds	r5, #8
 800389e:	2d0c      	cmp	r5, #12
 80038a0:	bf38      	it	cc
 80038a2:	250c      	movcc	r5, #12
 80038a4:	2d00      	cmp	r5, #0
 80038a6:	4606      	mov	r6, r0
 80038a8:	db01      	blt.n	80038ae <_malloc_r+0x1a>
 80038aa:	42a9      	cmp	r1, r5
 80038ac:	d903      	bls.n	80038b6 <_malloc_r+0x22>
 80038ae:	230c      	movs	r3, #12
 80038b0:	6033      	str	r3, [r6, #0]
 80038b2:	2000      	movs	r0, #0
 80038b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038b6:	f000 f87d 	bl	80039b4 <__malloc_lock>
 80038ba:	4921      	ldr	r1, [pc, #132]	; (8003940 <_malloc_r+0xac>)
 80038bc:	680a      	ldr	r2, [r1, #0]
 80038be:	4614      	mov	r4, r2
 80038c0:	b99c      	cbnz	r4, 80038ea <_malloc_r+0x56>
 80038c2:	4f20      	ldr	r7, [pc, #128]	; (8003944 <_malloc_r+0xb0>)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	b923      	cbnz	r3, 80038d2 <_malloc_r+0x3e>
 80038c8:	4621      	mov	r1, r4
 80038ca:	4630      	mov	r0, r6
 80038cc:	f000 f862 	bl	8003994 <_sbrk_r>
 80038d0:	6038      	str	r0, [r7, #0]
 80038d2:	4629      	mov	r1, r5
 80038d4:	4630      	mov	r0, r6
 80038d6:	f000 f85d 	bl	8003994 <_sbrk_r>
 80038da:	1c43      	adds	r3, r0, #1
 80038dc:	d123      	bne.n	8003926 <_malloc_r+0x92>
 80038de:	230c      	movs	r3, #12
 80038e0:	6033      	str	r3, [r6, #0]
 80038e2:	4630      	mov	r0, r6
 80038e4:	f000 f86c 	bl	80039c0 <__malloc_unlock>
 80038e8:	e7e3      	b.n	80038b2 <_malloc_r+0x1e>
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	1b5b      	subs	r3, r3, r5
 80038ee:	d417      	bmi.n	8003920 <_malloc_r+0x8c>
 80038f0:	2b0b      	cmp	r3, #11
 80038f2:	d903      	bls.n	80038fc <_malloc_r+0x68>
 80038f4:	6023      	str	r3, [r4, #0]
 80038f6:	441c      	add	r4, r3
 80038f8:	6025      	str	r5, [r4, #0]
 80038fa:	e004      	b.n	8003906 <_malloc_r+0x72>
 80038fc:	6863      	ldr	r3, [r4, #4]
 80038fe:	42a2      	cmp	r2, r4
 8003900:	bf0c      	ite	eq
 8003902:	600b      	streq	r3, [r1, #0]
 8003904:	6053      	strne	r3, [r2, #4]
 8003906:	4630      	mov	r0, r6
 8003908:	f000 f85a 	bl	80039c0 <__malloc_unlock>
 800390c:	f104 000b 	add.w	r0, r4, #11
 8003910:	1d23      	adds	r3, r4, #4
 8003912:	f020 0007 	bic.w	r0, r0, #7
 8003916:	1ac2      	subs	r2, r0, r3
 8003918:	d0cc      	beq.n	80038b4 <_malloc_r+0x20>
 800391a:	1a1b      	subs	r3, r3, r0
 800391c:	50a3      	str	r3, [r4, r2]
 800391e:	e7c9      	b.n	80038b4 <_malloc_r+0x20>
 8003920:	4622      	mov	r2, r4
 8003922:	6864      	ldr	r4, [r4, #4]
 8003924:	e7cc      	b.n	80038c0 <_malloc_r+0x2c>
 8003926:	1cc4      	adds	r4, r0, #3
 8003928:	f024 0403 	bic.w	r4, r4, #3
 800392c:	42a0      	cmp	r0, r4
 800392e:	d0e3      	beq.n	80038f8 <_malloc_r+0x64>
 8003930:	1a21      	subs	r1, r4, r0
 8003932:	4630      	mov	r0, r6
 8003934:	f000 f82e 	bl	8003994 <_sbrk_r>
 8003938:	3001      	adds	r0, #1
 800393a:	d1dd      	bne.n	80038f8 <_malloc_r+0x64>
 800393c:	e7cf      	b.n	80038de <_malloc_r+0x4a>
 800393e:	bf00      	nop
 8003940:	20000120 	.word	0x20000120
 8003944:	20000124 	.word	0x20000124

08003948 <_realloc_r>:
 8003948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394a:	4607      	mov	r7, r0
 800394c:	4614      	mov	r4, r2
 800394e:	460e      	mov	r6, r1
 8003950:	b921      	cbnz	r1, 800395c <_realloc_r+0x14>
 8003952:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003956:	4611      	mov	r1, r2
 8003958:	f7ff bf9c 	b.w	8003894 <_malloc_r>
 800395c:	b922      	cbnz	r2, 8003968 <_realloc_r+0x20>
 800395e:	f7ff ff49 	bl	80037f4 <_free_r>
 8003962:	4625      	mov	r5, r4
 8003964:	4628      	mov	r0, r5
 8003966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003968:	f000 f830 	bl	80039cc <_malloc_usable_size_r>
 800396c:	42a0      	cmp	r0, r4
 800396e:	d20f      	bcs.n	8003990 <_realloc_r+0x48>
 8003970:	4621      	mov	r1, r4
 8003972:	4638      	mov	r0, r7
 8003974:	f7ff ff8e 	bl	8003894 <_malloc_r>
 8003978:	4605      	mov	r5, r0
 800397a:	2800      	cmp	r0, #0
 800397c:	d0f2      	beq.n	8003964 <_realloc_r+0x1c>
 800397e:	4631      	mov	r1, r6
 8003980:	4622      	mov	r2, r4
 8003982:	f7ff ff0f 	bl	80037a4 <memcpy>
 8003986:	4631      	mov	r1, r6
 8003988:	4638      	mov	r0, r7
 800398a:	f7ff ff33 	bl	80037f4 <_free_r>
 800398e:	e7e9      	b.n	8003964 <_realloc_r+0x1c>
 8003990:	4635      	mov	r5, r6
 8003992:	e7e7      	b.n	8003964 <_realloc_r+0x1c>

08003994 <_sbrk_r>:
 8003994:	b538      	push	{r3, r4, r5, lr}
 8003996:	4d06      	ldr	r5, [pc, #24]	; (80039b0 <_sbrk_r+0x1c>)
 8003998:	2300      	movs	r3, #0
 800399a:	4604      	mov	r4, r0
 800399c:	4608      	mov	r0, r1
 800399e:	602b      	str	r3, [r5, #0]
 80039a0:	f7fd f9f8 	bl	8000d94 <_sbrk>
 80039a4:	1c43      	adds	r3, r0, #1
 80039a6:	d102      	bne.n	80039ae <_sbrk_r+0x1a>
 80039a8:	682b      	ldr	r3, [r5, #0]
 80039aa:	b103      	cbz	r3, 80039ae <_sbrk_r+0x1a>
 80039ac:	6023      	str	r3, [r4, #0]
 80039ae:	bd38      	pop	{r3, r4, r5, pc}
 80039b0:	20000170 	.word	0x20000170

080039b4 <__malloc_lock>:
 80039b4:	4801      	ldr	r0, [pc, #4]	; (80039bc <__malloc_lock+0x8>)
 80039b6:	f000 b811 	b.w	80039dc <__retarget_lock_acquire_recursive>
 80039ba:	bf00      	nop
 80039bc:	20000178 	.word	0x20000178

080039c0 <__malloc_unlock>:
 80039c0:	4801      	ldr	r0, [pc, #4]	; (80039c8 <__malloc_unlock+0x8>)
 80039c2:	f000 b80c 	b.w	80039de <__retarget_lock_release_recursive>
 80039c6:	bf00      	nop
 80039c8:	20000178 	.word	0x20000178

080039cc <_malloc_usable_size_r>:
 80039cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039d0:	1f18      	subs	r0, r3, #4
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	bfbc      	itt	lt
 80039d6:	580b      	ldrlt	r3, [r1, r0]
 80039d8:	18c0      	addlt	r0, r0, r3
 80039da:	4770      	bx	lr

080039dc <__retarget_lock_acquire_recursive>:
 80039dc:	4770      	bx	lr

080039de <__retarget_lock_release_recursive>:
 80039de:	4770      	bx	lr

080039e0 <_init>:
 80039e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e2:	bf00      	nop
 80039e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039e6:	bc08      	pop	{r3}
 80039e8:	469e      	mov	lr, r3
 80039ea:	4770      	bx	lr

080039ec <_fini>:
 80039ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ee:	bf00      	nop
 80039f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039f2:	bc08      	pop	{r3}
 80039f4:	469e      	mov	lr, r3
 80039f6:	4770      	bx	lr
